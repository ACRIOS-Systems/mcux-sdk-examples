<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_SUPER" name="SDKVersion 2.9.0 SuperSet" brief="This is SDK version 2.9.0 manifest file." format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-06-03 10:11:48.451225-->
  <!--This manifest is generated based on sdk repo commit: 242d157ba29afc4bbd1dac95f382a1491bc2daf5-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="QSPI_FLASH_MCIMX7U5xxxxx"/>
  </externalDefinitions>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="evkmcimx7ulp" name="EVK-MCIMX7ULP" href="https://www.nxp.com/pip/MCIMX7ULP-EVK" version="1.0.0" package="MCIMX7U5DVP07">
      <description>Evaluation Kit for the i.MX 7ULP Applications Processor</description>
      <image path="core/boards/evkmcimx7ulp" type="image">
        <files mask="evkmcimx7ulp.png"/>
      </image>
      <examples>
        <example id="evkmcimx7ulp_acmp_interrupt_print" name="acmp_interrupt_print" brief="The ACMP Interrupt project is a simple demonstration program that uses the SDK software. Itcompares the selected analog input with ACMP internal DAC output continuously and toggle the LEDwhen the final comparison result changed. The purpose of this demo is to show how to use theACMP driver in SDK software by interrupt way. The ACMP can be configured based on defaultconfiguration returned by the API ACMP_GetDefaultConfig(). The default configuration is: highspeed is not enabled, invert output is not enabled, unfiltered output is not enabled, pin outis not enabled, offset level is level 0, hysteresis level is level 0." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/evkmcimx7ulp/driver_examples/acmp/interrupt">
          <external path="examples/evkmcimx7ulp/driver_examples/acmp/interrupt" type="xml">
            <files mask="acmp_interrupt_print_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_acmp_polling_print" name="acmp_polling_print" brief="The ACMP Polling project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and toggle the LED when thefinal comparison result changed. The purpose of this demo is to show how to use the ACMP driverin SDK software by polling way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/evkmcimx7ulp/driver_examples/acmp/polling">
          <external path="examples/evkmcimx7ulp/driver_examples/acmp/polling" type="xml">
            <files mask="acmp_polling_print_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_bubble" name="bubble" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="examples/evkmcimx7ulp/demo_apps/bubble">
          <external path="examples/evkmcimx7ulp/demo_apps/bubble" type="xml">
            <files mask="bubble_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/evkmcimx7ulp/driver_examples/crc">
          <external path="examples/evkmcimx7ulp/driver_examples/crc" type="xml">
            <files mask="crc_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_dac12_basic" name="dac12_basic" brief="The dac12_basic example shows how to use DAC12 module simply as the general DAC12 converter.When the DAC12's fifo feature is not enabled, Any write to the DATA register will replace thedata in the buffer and push data to analog conversion without trigger support.In this example, it gets the value from terminal,outputs the DAC12 output voltage through DAC12 output pin." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dac12" path="examples/evkmcimx7ulp/driver_examples/dac12/basic">
          <external path="examples/evkmcimx7ulp/driver_examples/dac12/basic" type="xml">
            <files mask="dac12_basic_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_dac12_fifo_interrupt" name="dac12_fifo_interrupt" brief="The dac12_fifo_interrupt example shows how to use DAC12 FIFO interrupt.When the DAC12 FIFO watermark interrupt is enabled firstly, the application would enter the DAC12 ISR immediately, since remaining FIFO data is less than the watermark. Then the FIFO would be feed inside the ISR. Then the DAC12 interrupt could be restrained. Once the DAC12 FIFO is triggered in while loop, the data in FIFO is read out, then it becomes less than the watermark, so the FIFO would be feed again in DAC12 ISR. With this example, user can define the DAC12 output array to generate the different wave output. Also the software trigger can be called in some timer ISR so that the DAC12 would output the analog signal in indicated period. Or even use the hardware trigger to release the CPU." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dac12" path="examples/evkmcimx7ulp/driver_examples/dac12/fifo_interrupt">
          <external path="examples/evkmcimx7ulp/driver_examples/dac12/fifo_interrupt" type="xml">
            <files mask="dac12_fifo_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_ecompass" name="ecompass" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading)." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="examples/evkmcimx7ulp/demo_apps/ecompass">
          <external path="examples/evkmcimx7ulp/demo_apps/ecompass" type="xml">
            <files mask="ecompass_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/evkmcimx7ulp/driver_examples/edma/memory_to_memory">
          <external path="examples/evkmcimx7ulp/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/evkmcimx7ulp/driver_examples/edma/scatter_gather">
          <external path="examples/evkmcimx7ulp/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_ewm" name="ewm" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/evkmcimx7ulp/driver_examples/ewm">
          <external path="examples/evkmcimx7ulp/driver_examples/ewm" type="xml">
            <files mask="ewm_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_i2c_interrupt_lpi2c_transfer" name="flexio_i2c_interrupt_lpi2c_transfer" brief="The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/i2c/interrupt_lpi2c_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/i2c/interrupt_lpi2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_lpi2c_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_i2c_read_accel_value_transfer" name="flexio_i2c_read_accel_value_transfer" brief="The flexio_i2c_read_accel_value example shows how to use FLEXIO I2C  Master driver to communicate with an i2c device: 1. How to use the flexio i2c master driver to read a i2c device who_am_I register. 2. How to use the flexio i2c master driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/i2c/read_accel_value_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/i2c/read_accel_value_transfer" type="xml">
            <files mask="flexio_i2c_read_accel_value_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/pwm">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_spi_edma_lpspi_transfer_master" name="flexio_spi_edma_lpspi_transfer_master" brief="The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/spi/edma_lpspi_transfer/master">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/spi/edma_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_spi_edma_lpspi_transfer_slave" name="flexio_spi_edma_lpspi_transfer_slave" brief="The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/spi/edma_lpspi_transfer/slave">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/spi/edma_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_spi_int_lpspi_transfer_master" name="flexio_spi_int_lpspi_transfer_master" brief="The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/spi/int_lpspi_transfer/master">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/spi/int_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_spi_int_lpspi_transfer_slave" name="flexio_spi_int_lpspi_transfer_slave" brief="The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/spi/int_lpspi_transfer/slave">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/spi/int_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_uart_edma_transfer" name="flexio_uart_edma_transfer" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/uart/edma_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/uart/edma_transfer" type="xml">
            <files mask="flexio_uart_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/uart/int_rb_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/uart/interrupt_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmcimx7ulp/driver_examples/flexio/uart/polling_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_event">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_generic">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_hello">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_lpi2c" name="freertos_lpi2c" brief="The LPI2C Example project is a demonstration program that uses the KSDK software to manipulate the Low Power Inter-Integrated Circuit.The example uses two instances of LPI2C, one in configured as master and the other one as slave.The LPI2C master sends data to LPI2C slave. The slave will check the data it receives and shows the log." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_lpi2c">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_lpi2c" type="xml">
            <files mask="freertos_lpi2c_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_lpspi" name="freertos_lpspi" brief="The lpspi_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_lpspi">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_lpspi" type="xml">
            <files mask="freertos_lpspi_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_lpspi_b2b_master" name="freertos_lpspi_b2b_master" brief="The freertos_lpspi_b2b_master example shows how to use LPSPI driver in FreeRTOS." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_lpspi_b2b/master">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_lpspi_b2b/master" type="xml">
            <files mask="freertos_lpspi_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_lpspi_b2b_slave" name="freertos_lpspi_b2b_slave" brief="The freertos_lpspi_b2b_slave example shows how to use LPSPI driver in FreeRTOS." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_lpspi_b2b/slave">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_lpspi_b2b/slave" type="xml">
            <files mask="freertos_lpspi_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_lpuart" name="freertos_lpuart" brief="The LPUART example for FreeRTOS demonstrates the possibility to use the LPUART driver in the RTOS.The example uses single instance of LPUART IP and writes string into, then reads back chars.After every 4B received, these are sent back on LPUART." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_lpuart">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_lpuart" type="xml">
            <files mask="freertos_lpuart_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_mutex">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_pf1550" name="freertos_pf1550" brief="The freertos_pf1550 example demonstrates the usage of pf1550 service driver based on FreeRTOS and RPMSG_lite.This example should use with Linux Kernel running on Application Processor Core which has a virtual PF1550 driver in it.The example has 3 tasks running concurrent: the first one is user application on Cortex-M4 Core, here we use a hello worldapplication as a reference. The second one is a PF1550 Local Service task which will receive PF1550 control request fromother task and operate the PF1550 peripheral accordingly. The third one is the PF1550 Remote Service task, this task iscontinuous waiting for PF1550 control request raised by Remote Application Processor Core and convert the remote PF1550control request to PF1550 Local Service API calling and send response once PF1550 remote request is done or failed." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_pf1550">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_pf1550" type="xml">
            <files mask="freertos_pf1550_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_queue">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_sem">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_swtimer">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using GPT module." toolchain="armgcc" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmcimx7ulp/rtos_examples/freertos_tickless">
          <external path="examples/evkmcimx7ulp/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/evkmcimx7ulp/driver_examples/gpio/input_interrupt">
          <external path="examples/evkmcimx7ulp/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/evkmcimx7ulp/driver_examples/gpio/led_output">
          <external path="examples/evkmcimx7ulp/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="examples/evkmcimx7ulp/demo_apps/hello_world">
          <external path="examples/evkmcimx7ulp/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpadc_single_interrupt" name="lpadc_single_interrupt" brief="The lpadc_single_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/evkmcimx7ulp/driver_examples/lpadc/single_interrupt">
          <external path="examples/evkmcimx7ulp/driver_examples/lpadc/single_interrupt" type="xml">
            <files mask="lpadc_single_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpadc_single_polling" name="lpadc_single_polling" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/evkmcimx7ulp/driver_examples/lpadc/single_polling">
          <external path="examples/evkmcimx7ulp/driver_examples/lpadc/single_polling" type="xml">
            <files mask="lpadc_single_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpi2c_edma_b2b_transfer_master" name="lpi2c_edma_b2b_transfer_master" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/evkmcimx7ulp/driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="examples/evkmcimx7ulp/driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpi2c_edma_b2b_transfer_slave" name="lpi2c_edma_b2b_transfer_slave" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/evkmcimx7ulp/driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="examples/evkmcimx7ulp/driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpi2c_interrupt" name="lpi2c_interrupt" brief="The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/evkmcimx7ulp/driver_examples/lpi2c/interrupt">
          <external path="examples/evkmcimx7ulp/driver_examples/lpi2c/interrupt" type="xml">
            <files mask="lpi2c_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpi2c_interrupt_b2b_transfer_master" name="lpi2c_interrupt_b2b_transfer_master" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/evkmcimx7ulp/driver_examples/lpi2c/interrupt_b2b_transfer/master">
          <external path="examples/evkmcimx7ulp/driver_examples/lpi2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpi2c_interrupt_b2b_transfer_slave" name="lpi2c_interrupt_b2b_transfer_slave" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/evkmcimx7ulp/driver_examples/lpi2c/interrupt_b2b_transfer/slave">
          <external path="examples/evkmcimx7ulp/driver_examples/lpi2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpi2c_polling_b2b_master" name="lpi2c_polling_b2b_master" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/evkmcimx7ulp/driver_examples/lpi2c/polling_b2b/master">
          <external path="examples/evkmcimx7ulp/driver_examples/lpi2c/polling_b2b/master" type="xml">
            <files mask="lpi2c_polling_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpi2c_polling_b2b_slave" name="lpi2c_polling_b2b_slave" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/evkmcimx7ulp/driver_examples/lpi2c/polling_b2b/slave">
          <external path="examples/evkmcimx7ulp/driver_examples/lpi2c/polling_b2b/slave" type="xml">
            <files mask="lpi2c_polling_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpi2c_read_accel_value_transfer" name="lpi2c_read_accel_value_transfer" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/evkmcimx7ulp/driver_examples/lpi2c/read_accel_value_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/lpi2c/read_accel_value_transfer" type="xml">
            <files mask="lpi2c_read_accel_value_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpi2c_vlps" name="lpi2c_vlps" brief="This example describes how to use kinetis SDK drivers to implement LPI2C transmit and receive in the VLPS (very low power STOP mode) with async DMA.The LPI2C module is designed to have ability to work under low power module like STOP, VLPW and VLPS. It can use DMA to transmit the data from or to application user buffer without CPU interaction.It uses LPI2C to access the on board accelerometer sensor to read the Accelerometer X, Y, Z data every 500ms. CPU would keep in VLPS low power mode, except for some trigger events and data output to LPUART0." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="examples/evkmcimx7ulp/demo_apps/lpi2c_vlps">
          <external path="examples/evkmcimx7ulp/demo_apps/lpi2c_vlps" type="xml">
            <files mask="lpi2c_vlps_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpit_single_channel" name="lpit_single_channel" brief="The LPIT single channel project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/evkmcimx7ulp/driver_examples/lpit/single_channel">
          <external path="examples/evkmcimx7ulp/driver_examples/lpit/single_channel" type="xml">
            <files mask="lpit_single_channel_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpspi_edma_b2b_transfer_master" name="lpspi_edma_b2b_transfer_master" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/evkmcimx7ulp/driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="examples/evkmcimx7ulp/driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpspi_edma_b2b_transfer_slave" name="lpspi_edma_b2b_transfer_slave" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/evkmcimx7ulp/driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="examples/evkmcimx7ulp/driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpspi_interrupt_b2b_master" name="lpspi_interrupt_b2b_master" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/evkmcimx7ulp/driver_examples/lpspi/interrupt_b2b/master">
          <external path="examples/evkmcimx7ulp/driver_examples/lpspi/interrupt_b2b/master" type="xml">
            <files mask="lpspi_interrupt_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpspi_interrupt_b2b_slave" name="lpspi_interrupt_b2b_slave" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/evkmcimx7ulp/driver_examples/lpspi/interrupt_b2b/slave">
          <external path="examples/evkmcimx7ulp/driver_examples/lpspi/interrupt_b2b/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpspi_interrupt_b2b_transfer_master" name="lpspi_interrupt_b2b_transfer_master" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/evkmcimx7ulp/driver_examples/lpspi/interrupt_b2b_transfer/master">
          <external path="examples/evkmcimx7ulp/driver_examples/lpspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpspi_interrupt_b2b_transfer_slave" name="lpspi_interrupt_b2b_transfer_slave" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/evkmcimx7ulp/driver_examples/lpspi/interrupt_b2b_transfer/slave">
          <external path="examples/evkmcimx7ulp/driver_examples/lpspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpspi_polling_b2b_transfer_master" name="lpspi_polling_b2b_transfer_master" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/evkmcimx7ulp/driver_examples/lpspi/polling_b2b_transfer/master">
          <external path="examples/evkmcimx7ulp/driver_examples/lpspi/polling_b2b_transfer/master" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpspi_polling_b2b_transfer_slave" name="lpspi_polling_b2b_transfer_slave" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/evkmcimx7ulp/driver_examples/lpspi/polling_b2b_transfer/slave">
          <external path="examples/evkmcimx7ulp/driver_examples/lpspi/polling_b2b_transfer/slave" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/evkmcimx7ulp/driver_examples/lptmr">
          <external path="examples/evkmcimx7ulp/driver_examples/lptmr" type="xml">
            <files mask="lptmr_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/evkmcimx7ulp/driver_examples/lpuart/edma_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/evkmcimx7ulp/driver_examples/lpuart/interrupt">
          <external path="examples/evkmcimx7ulp/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/evkmcimx7ulp/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/evkmcimx7ulp/driver_examples/lpuart/interrupt_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/evkmcimx7ulp/driver_examples/lpuart/polling">
          <external path="examples/evkmcimx7ulp/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_ltc_aes" name="ltc_aes" brief="This project is a demonstration program that uses the KSDK software for encryption/decryption sampledata using AES-CBC, AES-CCM, and XCBC-MAC algorithm." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ltc" path="examples/evkmcimx7ulp/driver_examples/ltc/aes">
          <external path="examples/evkmcimx7ulp/driver_examples/ltc/aes" type="xml">
            <files mask="ltc_aes_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_ltc_aes_edma" name="ltc_aes_edma" brief="This project is a demonstration program that uses the KSDK software for encryption/decryption sample data using EDMA forAES-CBC algorithm." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ltc" path="examples/evkmcimx7ulp/driver_examples/ltc/aes_edma">
          <external path="examples/evkmcimx7ulp/driver_examples/ltc/aes_edma" type="xml">
            <files mask="ltc_aes_edma_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_mmcau" name="mmcau" brief="Memory-Mapped Cryptographic Acceleration Unit (MMCAU)This project is a demonstration program that uses the KSDK software for encryption/decryption sampledata using AES-CBC, DES3-CBC and Hash algorithms MD5, SHA1 and SHA256." toolchain="armgcc" compiler="compiler_gcc" category="mmcau_examples" path="examples/evkmcimx7ulp/mmcau_examples/mmcau_api">
          <external path="examples/evkmcimx7ulp/mmcau_examples/mmcau_api" type="xml">
            <files mask="mmcau_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_pf1550" name="pf1550" brief="The pf1550 driver example demonstrates the usage of pf1550 SDK component driver.The example shows the usage of PF1550 API to:1. Set regulator output voltages;2. Query regulator output voltages;3. Dump PF1550 register content;4. Charge a Li-on Battery Cell.To use this example, user need to pay attention the output voltage when update the regulatoroutput and make sure the output voltage to set will not cause hardware damage;You need also to pay attention to the charging voltage setting when charging Li-on battery cell,and make sure that the battery is not over-charged." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/evkmcimx7ulp/driver_examples/pf1550">
          <external path="examples/evkmcimx7ulp/driver_examples/pf1550" type="xml">
            <files mask="pf1550_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_qspi_edma_transfer" name="qspi_edma_transfer" brief="The qspi_edma example shows how to use qspi driver with EDMA:In this example, qspi will send data and operate the external flash connected with QSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and programe a page into the flash, at last check if the data in flash is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/qspi" path="examples/evkmcimx7ulp/driver_examples/qspi/edma_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/qspi/edma_transfer" type="xml">
            <files mask="qspi_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_qspi_polling_transfer" name="qspi_polling_transfer" brief="The qspi_polling example shows how to use qspi driver with polling:In this example, qspi will send data and operate the external flash connected with QSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and programe a page into the flash, at last check if the data in flash is correct.Notice: While do program, it is not suggested to make the flash write frequency bigger than the core clock frequency.In some tool chain's Debug version, this may cause core do not have enough speed to send data to flash.The flash write frequency equals to QSPI working frequency plus data line number. For example, if QSPI working in 48MHz,program command uses quad mode, the write frequency is 48MHz * 4 = 192MHz." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/qspi" path="examples/evkmcimx7ulp/driver_examples/qspi/polling_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/qspi/polling_transfer" type="xml">
            <files mask="qspi_polling_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_sai_edma_transfer" name="sai_edma_transfer" brief="The sai_edma_transfer example shows how to use sai driver with EDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM using EDMA channel." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="examples/evkmcimx7ulp/driver_examples/sai/edma_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/sai/edma_transfer" type="xml">
            <files mask="sai_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_sai_interrupt" name="sai_interrupt" brief="The sai_interrupt example shows how to use sai functional API to implement interrupt playback:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="examples/evkmcimx7ulp/driver_examples/sai/interrupt">
          <external path="examples/evkmcimx7ulp/driver_examples/sai/interrupt" type="xml">
            <files mask="sai_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_sai_interrupt_transfer" name="sai_interrupt_transfer" brief="The sai_interrupt_transfer example shows how to use sai driver with interrupt:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="examples/evkmcimx7ulp/driver_examples/sai/interrupt_transfer">
          <external path="examples/evkmcimx7ulp/driver_examples/sai/interrupt_transfer" type="xml">
            <files mask="sai_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_sema42_uboot" name="sema42_uboot" brief="The sema42 uboot example shows how to use SEMA42 driver to lock and unlock a sema gate.This example should work together with uboot. This example runs on Cortex-M core,the uboot runs on the Cortex-A core." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sema42" path="examples/evkmcimx7ulp/driver_examples/sema42/uboot">
          <external path="examples/evkmcimx7ulp/driver_examples/sema42/uboot" type="xml">
            <files mask="sema42_uboot_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_shell_mem" name="shell_mem" brief="The Shell Demo application demonstrates ram and flash memory access commands." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="examples/evkmcimx7ulp/demo_apps/shell_mem">
          <external path="examples/evkmcimx7ulp/demo_apps/shell_mem" type="xml">
            <files mask="shell_mem_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_snvs_hp_rtc" name="snvs_hp_rtc" brief="The SNVS HP RTC project is a simple demonstration program of the SDK SNVS HP driver. The test will set up RTC date and time to a predefined value and starts the counter. RTC then triggers an alarm after a user specified time period. The alarm will be set with reference to this predefined date and time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/snvs" path="examples/evkmcimx7ulp/driver_examples/snvs/snvs_hp_rtc">
          <external path="examples/evkmcimx7ulp/driver_examples/snvs/snvs_hp_rtc" type="xml">
            <files mask="snvs_hp_rtc_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_snvs_lp_srtc" name="snvs_lp_srtc" brief="The SNVS LP SRTC project is a simple demonstration program of the SDK SNVS LP driver. The test will set up secure RTC (SRTC) date and time to a predefined value and starts the counter, then the SRTC counter value is synchronized with non secure RTC (RTC). RTC then triggers an alarm after a user specified time period. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/snvs" path="examples/evkmcimx7ulp/driver_examples/snvs/snvs_lp_srtc">
          <external path="examples/evkmcimx7ulp/driver_examples/snvs/snvs_lp_srtc" type="xml">
            <files mask="snvs_lp_srtc_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_tpm_combine_pwm" name="tpm_combine_pwm" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/evkmcimx7ulp/driver_examples/tpm/combine_pwm">
          <external path="examples/evkmcimx7ulp/driver_examples/tpm/combine_pwm" type="xml">
            <files mask="tpm_combine_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_tpm_dual_edge_capture" name="tpm_dual_edge_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/evkmcimx7ulp/driver_examples/tpm/dual_edge_capture">
          <external path="examples/evkmcimx7ulp/driver_examples/tpm/dual_edge_capture" type="xml">
            <files mask="tpm_dual_edge_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/evkmcimx7ulp/driver_examples/tpm/input_capture">
          <external path="examples/evkmcimx7ulp/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/evkmcimx7ulp/driver_examples/tpm/output_compare">
          <external path="examples/evkmcimx7ulp/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/evkmcimx7ulp/driver_examples/tpm/pwm_twochannel">
          <external path="examples/evkmcimx7ulp/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/evkmcimx7ulp/driver_examples/tpm/simple_pwm">
          <external path="examples/evkmcimx7ulp/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/evkmcimx7ulp/driver_examples/tpm/timer">
          <external path="examples/evkmcimx7ulp/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_trgmux_lptmr_trigger_lpit" name="trgmux_lptmr_trigger_lpit" brief="The TRGMUX project is a simple demonstration program of the SDK TRGMUX driver. It generatesa 10KHz PWM by LPIT0 CH0, and clone by TRGMUX to output this PWM to eight TRGMUX_OUTx pins." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/trgmux" path="examples/evkmcimx7ulp/driver_examples/trgmux/lptmr_trigger_lpit">
          <external path="examples/evkmcimx7ulp/driver_examples/trgmux/lptmr_trigger_lpit" type="xml">
            <files mask="trgmux_lptmr_trigger_lpit_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_trng_random" name="trng_random" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/trng" path="examples/evkmcimx7ulp/driver_examples/trng/random">
          <external path="examples/evkmcimx7ulp/driver_examples/trng/random" type="xml">
            <files mask="trng_random_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_tstmr" name="tstmr" brief="The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/evkmcimx7ulp/driver_examples/tstmr">
          <external path="examples/evkmcimx7ulp/driver_examples/tstmr" type="xml">
            <files mask="tstmr_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_wdog32" name="wdog32" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/evkmcimx7ulp/driver_examples/wdog32">
          <external path="examples/evkmcimx7ulp/driver_examples/wdog32" type="xml">
            <files mask="wdog32_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmcimx7ulp_xrdc" name="xrdc" brief="The xrdc example shows how to control the memory and peripheral accesspolicy using XRDC.In this example, one peripheral and a memory region are set to unaccessible, thenthe hardfault occurs." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/evkmcimx7ulp/driver_examples/xrdc">
          <external path="examples/evkmcimx7ulp/driver_examples/xrdc" type="xml">
            <files mask="xrdc_v3_8.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MCIMX7U5xxxxx" name="MCIMX7U5" version="1.0.0" full_name="MCIMX7U5xxxxx" family="MCIMX7Ux" platform="i.MX">
      <description>i.MX 7ULP: Cortex-A7 and Cortex-M4, ultra low-power, 2D/3D graphics</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="m4_MCIMX7U5xxxxx" name="m4" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="SRAM_LOWER_MCIMX7U5xxxxx" name="SRAM_LOWER" addr="1ffd0000" size="00030000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_UPPER_MCIMX7U5xxxxx" name="SRAM_UPPER" addr="20000000" size="00010000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="0" ram_size_kb="256"/>
      <package id="MCIMX7U5DVP07" name="MCIMX7U5DVP07"/>
      <package id="MCIMX7U5DVK07" name="MCIMX7U5DVK07"/>
      <package id="MCIMX7U5CVP06" name="MCIMX7U5CVP06"/>
      <evaluation_boards>
        <evaluation_board name="evkmcimx7ulp"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.attach.slave.release.MCIMX7U5xxxxx" name="internal.attach.slave" value="true"/>
            <params id="internal.multi.swd.release.MCIMX7U5xxxxx" name="internal.multi.swd" value="true"/>
            <params id="internal.wiretype.release.MCIMX7U5xxxxx" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MCIMX7U5xxxxx" name="internal.has_swo" value="false"/>
          </params>
          <drivers>
            <driver id_refs="QSPI_FLASH_MCIMX7U5xxxxx">
              <driverBinary path="core/devices/MCIMX7U5/mcuxpresso" type="binary">
                <files mask="flash_driver_placeholder.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.evkmcimx7ulp.MCIMX7U5" name="evkmcimx7ulp" brief="Board_project_template evkmcimx7ulp" version="1.0.0" full_name="Board_project_template evkmcimx7ulp" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/evkmcimx7ulp/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.msmc.MCIMX7U5"/>
          <component_dependency value="platform.devices.MCIMX7U5_startup.MCIMX7U5"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MCIMX7U5"/>
              <component_dependency value="component.serial_manager.MCIMX7U5"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MCIMX7U5"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.MCIMX7U5" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="MCIMX7U5xxxxx" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.Include_dsp.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MCIMX7U5" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Driver_Include_Common_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MCIMX7U5" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MCIMX7U5" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MCIMX7U5" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MCIMX7U5" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MCIMX7U5" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MCIMX7U5" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Driver_Include_I2C_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MCIMX7U5" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MCIMX7U5" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MCIMX7U5" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MCIMX7U5" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Driver_Include_SPI_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MCIMX7U5" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MCIMX7U5" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MCIMX7U5" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MCIMX7U5" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MCIMX7U5" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="MCIMX7U5xxxxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.MCIMX7U5" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="MCIMX7U5xxxxx" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_common_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm4.MCIMX7U5" name="CMSIS_Include_core_cm4" brief="Cmsis_include_core_cm4" version="5.3.0" full_name="Cmsis_include_core_cm4" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MCIMX7U5"/>
          <component_dependency value="platform.Include_dsp.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_core_cm4_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.MCIMX7U5" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="MCIMX7U5xxxxx" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_dsp_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.MCIMX7U5" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="MCIMX7U5xxxxx" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.MCIMX7U5.MCIMX7U5" name="MCIMX7U5" brief="Devices_project_template MCIMX7U5" version="1.0.0" full_name="Devices_project_template MCIMX7U5" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MCIMX7U5/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.devices.MCIMX7U5_startup.MCIMX7U5"/>
          <component_dependency value="platform.drivers.msmc.MCIMX7U5"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MCIMX7U5"/>
              <component_dependency value="component.serial_manager.MCIMX7U5"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MCIMX7U5"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="imgutil.MCIMX7U5" name="MCIMX7Ux_imgutil" brief="Mcimx7ux_imgutil" version="1.0.0" full_name="Mcimx7ux_imgutil" devices="MCIMX7U5xxxxx" user_visible="true" type="other" package_base_path="core/tools/imgutil" project_base_path="imgutil">
      <source relative_path="bin" type="other">
        <files mask="imgutil"/>
        <files mask="imgutil64"/>
        <files mask="imgutil.exe"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source relative_path="evkmcimx7ulp" type="script">
        <files mask="mkimg.sh"/>
      </source>
      <source relative_path="evkmcimx7ulp" type="binary">
        <files mask="qcb.bin"/>
      </source>
    </component>
    <component id="RTE_Device.MCIMX7U5" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MCIMX7U5/template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
          <component_dependency value="platform.drivers.dmamux.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.MCIMX7U5" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="MCIMX7U5xxxxx" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.MCIMX7U5" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.timer_manager.MCIMX7U5"/>
          <component_dependency value="component.gpio_adapter.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_da7212_adapter.MCIMX7U5" name="codecs_da7212_adapter" brief="Component da7212 adapter for multi codecs" version="2.2.0" full_name="Component codec_da7212_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.MCIMX7U5"/>
          <component_dependency value="driver.codec.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_da7212_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_da7212_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_i2c.MCIMX7U5" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/codec/i2c" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.lpi2c_adapter.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_codec_i2c_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_sgtl_adapter.MCIMX7U5" name="codecs_sgtl_adapter" brief="Component sgtl5000 adapter for multi codecs" version="2.2.0" full_name="Component codec_sgtl_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.MCIMX7U5"/>
          <component_dependency value="driver.codec.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_sgtl_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sgtl_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_wm8960_adapter.MCIMX7U5" name="codecs_wm8960_adapter" brief="Component wm8960 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8960_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.MCIMX7U5"/>
          <component_dependency value="driver.codec.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8960_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8960_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.MCIMX7U5" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.osa.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.crc_adapter.MCIMX7U5" name="crc_adapter" brief="Component crc_adapter" version="1.0.0" full_name="Component crc_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="platform.drivers.crc.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.da7212_adapter.MCIMX7U5" name="codec_da7212_adapter" brief="Component da7212 adapter for single codec" version="2.2.0" full_name="Component da7212_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/da7212" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.MCIMX7U5"/>
          <component_dependency value="driver.codec.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpio_adapter.MCIMX7U5" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.0" full_name="Component gpio_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MCIMX7U5"/>
          <component_dependency value="platform.drivers.port.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.MCIMX7U5" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.timer_manager.MCIMX7U5"/>
          <component_dependency value="component.gpio_adapter.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.MCIMX7U5" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lists_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.MCIMX7U5" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="utility.debug_console.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.MCIMX7U5" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.log.MCIMX7U5"/>
          <component_dependency value="utility.debug_console.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.MCIMX7U5" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.log.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpi2c_adapter.MCIMX7U5" name="lpi2c_adapter" brief="Component lpi2c_adapter" version="1.0.0" full_name="Component lpi2c_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="platform.drivers.lpi2c.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpi2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lpi2c_adapter_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpit_adapter.MCIMX7U5" name="lpit_adapter" brief="Component lpit_adapter" version="1.0.0" full_name="Component lpit_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="platform.drivers.lpit.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpit.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_adapter.MCIMX7U5" name="lptmr_adapter" brief="Component lptmr_adapter" version="1.0.0" full_name="Component lptmr_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="platform.drivers.lptmr.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_adapter.MCIMX7U5" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="platform.drivers.lpuart.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lpuart_adapter_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.MCIMX7U5" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.lists.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.MCIMX7U5" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.lists.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.MCIMX7U5" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.lists.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MCIMX7U5" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MCIMX7U5" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.MCIMX7U5" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source condition="middleware.freertos-kernel.MCIMX7U5" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.MCIMX7U5" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.lists.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_free_rtos.MCIMX7U5" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.lists.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.MCIMX7U5" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="utility.debug_console.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_tpm_adapter.MCIMX7U5" name="pwm_tpm_adapter" brief="Component pwm_tpm_adapter" version="1.0.0" full_name="Component pwm_tpm_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="platform.drivers.tpm.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.MCIMX7U5" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.lists.MCIMX7U5"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MCIMX7U5"/>
            <component_dependency value="component.serial_manager_swo.MCIMX7U5"/>
            <component_dependency value="component.serial_manager_virtual.MCIMX7U5"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_swo.MCIMX7U5" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.serial_manager.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_swo.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_swo.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.MCIMX7U5" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MCIMX7U5"/>
          <component_dependency value="component.serial_manager.MCIMX7U5"/>
          <component_dependency value="platform.drivers.lpuart.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_uart_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.MCIMX7U5" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MCIMX7U5"/>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.sgtl_adapter.MCIMX7U5" name="codec_sgtl_adapter" brief="Component sgtl5000 adapter for single codec" version="2.2.0" full_name="Component sgtl_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/sgtl5000" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.MCIMX7U5"/>
          <component_dependency value="driver.codec.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.MCIMX7U5" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.MCIMX7U5" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.MCIMX7U5" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.lists.MCIMX7U5"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.MCIMX7U5"/>
            <component_dependency value="component.lptmr_adapter.MCIMX7U5"/>
            <component_dependency value="component.lpit_adapter.MCIMX7U5"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.tpm_adapter.MCIMX7U5" name="tpm_adapter" brief="Component tpm_adapter" version="1.0.0" full_name="Component tpm_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="platform.drivers.tpm.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.trng_adapter.MCIMX7U5" name="trng_adapter" brief="Component trng_adapter" version="1.0.0" full_name="Component trng_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="platform.drivers.trng.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_trng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wm8960_adapter.MCIMX7U5" name="codec_wm8960_adapter" brief="Component wm8960 adapter for single codecs" version="2.2.0" full_name="Component wm8960_adapter" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/wm8960" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.MCIMX7U5"/>
          <component_dependency value="driver.codec.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_wm8960_adapter_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.devices.MCIMX7U5_CMSIS.MCIMX7U5" name="MCIMX7U5_CMSIS" brief="Device MCIMX7U5_cmsis" version="1.0.0" full_name="Device MCIMX7U5_cmsis" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MCIMX7U5" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.Include_core_cm4.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="MCIMX7U5_cm4.h"/>
        <files mask="MCIMX7U5_cm4_features.h"/>
        <files mask="system_MCIMX7U5_cm4.h"/>
      </source>
      <source relative_path="./" type="src" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="system_MCIMX7U5_cm4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_MCIMX7U5_CMSIS_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include" device_cores="m4_MCIMX7U5xxxxx"/>
      </include_paths>
    </component>
    <component id="platform.devices.MCIMX7U5_debugger.MCIMX7U5" name="MCIMX7U5_debugger" brief="Device MCIMX7U5_debugger" version="1.0.0" full_name="Device MCIMX7U5_debugger" devices="MCIMX7U5xxxxx" user_visible="true" type="debugger" package_base_path="core/devices/MCIMX7U5" project_base_path="MCIMX7U5">
      <source relative_path="./" type="xml" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="MCIMX7U5_cm4.xml"/>
      </source>
    </component>
    <component id="platform.devices.MCIMX7U5_linker.MCIMX7U5" name="MCIMX7U5_linker" brief="Device MCIMX7U5_linker" version="1.0.0" full_name="Device MCIMX7U5_linker" devices="MCIMX7U5xxxxx" user_visible="true" type="linker" package_base_path="core/devices/MCIMX7U5" project_base_path="MCIMX7U5">
      <source toolchain="armgcc" relative_path="gcc" type="linker" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="MCIMX7U5xxxxx_cm4_flash.ld"/>
        <files mask="MCIMX7U5xxxxx_cm4_ram.ld"/>
      </source>
    </component>
    <component id="platform.devices.MCIMX7U5_startup.MCIMX7U5" name="MCIMX7U5_startup" brief="Device MCIMX7U5_startup" version="1.1.0" full_name="Device MCIMX7U5_startup" devices="MCIMX7U5xxxxx" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/MCIMX7U5" project_base_path="startup">
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="startup_MCIMX7U5_cm4.S"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_MCIMX7U5_startup_MCIMX7U5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="docs.MCIMX7U5.MCIMX7U5" name="MCIMX7U5" brief="Docs mcimx7u5" version="1.0.0" full_name="Docs mcimx7u5" devices="MCIMX7U5xxxxx" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for EVK-MCIMX7ULP.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for EVK-MCIMX7ULP.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.acmp.MCIMX7U5" name="acmp" brief="ACMP Driver" version="2.0.6" full_name="ACMP Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/acmp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_acmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_acmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_acmp_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cache_lmem.MCIMX7U5" name="cache_lmem" brief="CACHE LMEM Driver" version="2.0.5" full_name="CACHE LMEM Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/cache/lmem" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_cache_lmem_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.MCIMX7U5" name="clock" brief="Clock Driver" version="2.3.1" full_name="Clock Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/devices/MCIMX7U5/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_clock_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.codec.MCIMX7U5" name="codec" brief="Driver codec" version="2.2.1" full_name="Driver codec" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <any_of>
            <component_dependency value="component.wm8960_adapter.MCIMX7U5"/>
            <component_dependency value="component.codec_da7212_adapter.MCIMX7U5"/>
            <component_dependency value="component.codec_sgtl_adapter.MCIMX7U5"/>
            <component_dependency value="component.codec_wm8960_adapter.MCIMX7U5"/>
            <component_dependency value="component.da7212_adapter.MCIMX7U5"/>
            <component_dependency value="component.sgtl_adapter.MCIMX7U5"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_codec_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.MCIMX7U5" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MCIMX7U5"/>
          <component_dependency value="platform.devices.MCIMX7U5_CMSIS.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_common_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.crc.MCIMX7U5" name="crc" brief="CRC Driver" version="2.0.3" full_name="CRC Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/crc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_crc_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dac12.MCIMX7U5" name="dac" brief="DAC12 Driver" version="2.0.1" full_name="DAC12 Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/dac12" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dac12.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dac12.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dac12_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dialog7212.MCIMX7U5" name="dialog7212" brief="Driver dialog7212" version="2.2.2" full_name="Driver dialog7212" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/codec/da7212" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.codec_i2c.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dialog7212.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dialog7212.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmamux.MCIMX7U5" name="dmamux" brief="DMAMUX Driver" version="2.0.5" full_name="DMAMUX Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/dmamux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dmamux_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.edma.MCIMX7U5" name="edma" brief="EDMA Driver" version="2.4.1" full_name="EDMA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/edma" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="platform.drivers.dmamux.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_edma_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ewm.MCIMX7U5" name="ewm" brief="EWM Driver" version="2.0.3" full_name="EWM Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/ewm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ewm_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio.MCIMX7U5" name="flexio" brief="FLEXIO Driver" version="2.0.4" full_name="FLEXIO Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_camera.MCIMX7U5" name="flexio_camera" brief="FLEXIO Driver" version="2.1.3" full_name="FLEXIO CAMERA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_camera.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_camera.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_camera_edma.MCIMX7U5" name="flexio_camera_edma" brief="FLEXIO CAMERA EDMA Driver" version="2.1.3" full_name="FLEXIO CAMERA EDMA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_camera.MCIMX7U5"/>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_camera_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_camera_edma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MCIMX7U5" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.4.0" full_name="FLEXIO I2C Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_i2c_master_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s.MCIMX7U5" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.2.0" full_name="FLEXIO I2S Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s_edma.MCIMX7U5" name="flexio_i2s_edma" brief="FLEXIO I2S EDMA Driver" version="2.1.7" full_name="FLEXIO I2S EDMA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
          <component_dependency value="platform.drivers.flexio_i2s.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s_edma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_mculcd.MCIMX7U5" name="flexio_mculcd" brief="FLEXIO MCULCD Driver" version="2.0.5" full_name="FLEXIO MCULCD Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_mculcd.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_mculcd.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_mculcd_edma.MCIMX7U5" name="flexio_mculcd_edma" brief="FLEXIO MCULCD EDMA Driver" version="2.0.4" full_name="FLEXIO MCULCD EDMA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_mculcd.MCIMX7U5"/>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_mculcd_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_mculcd_edma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi.MCIMX7U5" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.2.0" full_name="FLEXIO SPI Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_spi_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi_edma.MCIMX7U5" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.2.0" full_name="FLEXIO SPI EDMA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
          <component_dependency value="platform.drivers.flexio_spi.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_spi_edma_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart.MCIMX7U5" name="flexio_uart" brief="FLEXIO UART Driver" version="2.3.0" full_name="FLEXIO UART Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_uart_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart_edma.MCIMX7U5" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.3.0" full_name="FLEXIO UART EDMA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_uart.MCIMX7U5"/>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_uart_edma_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.fxos8700cq.MCIMX7U5" name="fxos8700cq" brief="Driver fxos8700cq" version="1.0.0" full_name="Driver fxos8700cq" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="board_component" package_base_path="core/components/fxos8700cq" project_base_path="accel">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_fxos8700cq_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpio.MCIMX7U5" name="gpio" brief="GPIO Driver" version="2.5.1" full_name="GPIO Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_gpio_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.llwu.MCIMX7U5" name="llwu" brief="LLWU Driver" version="2.0.5" full_name="LLWU Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/llwu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_llwu_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpadc.MCIMX7U5" name="lpadc" brief="LPADC Driver" version="2.3.0" full_name="LPADC Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpadc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpadc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpadc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpadc_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c.MCIMX7U5" name="i2c" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpi2c_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_edma.MCIMX7U5" name="i2c_edma" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Edma Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
          <component_dependency value="platform.drivers.lpi2c.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpi2c_edma_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_freertos.MCIMX7U5" name="i2c_freertos" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Freerto Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c.MCIMX7U5"/>
          <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpi2c_freertos_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpit.MCIMX7U5" name="lpit" brief="LPIT Driver" version="2.0.2" full_name="LPIT Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpit" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpit.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpit.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpit_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi.MCIMX7U5" name="lpspi" brief="LPSPI Driver" version="2.1.0" full_name="LPSPI Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpspi_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_edma.MCIMX7U5" name="lpspi_edma" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Edma Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
          <component_dependency value="platform.drivers.lpspi.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpspi_edma_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_freertos.MCIMX7U5" name="lpspi_freertos" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Freertos Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi.MCIMX7U5"/>
          <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpspi_freertos_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lptmr.MCIMX7U5" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lptmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lptmr_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart.MCIMX7U5" name="lpuart" brief="LPUART Driver" version="2.4.1" full_name="LPUART Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_edma.MCIMX7U5" name="lpuart_edma" brief="LPUART Driver" version="2.4.0" full_name="LPUART Edma Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
          <component_dependency value="platform.drivers.lpuart.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_edma_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_freertos.MCIMX7U5" name="lpuart_freertos" brief="LPUART Driver" version="2.4.0" full_name="LPUART Freertos Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MCIMX7U5"/>
          <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_freertos_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ltc.MCIMX7U5" name="ltc" brief="LTC Driver" version="2.0.15" full_name="LTC Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/ltc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ltc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ltc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ltc_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ltc_edma.MCIMX7U5" name="ltc_edma" brief="LTC Driver" version="2.0.15" full_name="LTC EDMA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/ltc" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.ltc.MCIMX7U5"/>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ltc_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ltc_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ltc_edma_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.msmc.MCIMX7U5" name="msmc" brief="MSMC Driver" version="2.1.2" full_name="MSMC Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/msmc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_msmc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_msmc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_msmc_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mu.MCIMX7U5" name="mu" brief="MU Driver" version="2.0.6" full_name="MU Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/mu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mu_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.pf1550.MCIMX7U5" name="pf1550" brief="Driver pf1550" version="1.0.0" full_name="Driver pf1550" devices="MCIMX7U5xxxxx" user_visible="true" type="board_component" package_base_path="core/components/pf1550" project_base_path="pmic_driver">
      <source relative_path="./" type="c_include">
        <files mask="fsl_pf1550.h"/>
        <files mask="fsl_pf1550_charger.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pf1550.c"/>
        <files mask="fsl_pf1550_charger.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pf1550_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pmc0.MCIMX7U5" name="pmc" brief="PMC0 Driver" version="2.0.0" full_name="PMC0 Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/pmc0" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pmc0.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pmc0_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.port.MCIMX7U5" name="port" brief="PORT Driver" version="2.1.1" full_name="PORT Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/port" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_port_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.qspi.MCIMX7U5" name="qspi" brief="QSPI Driver" version="2.2.2" full_name="QSPI Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/qspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_qspi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_qspi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_qspi_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.qspi_edma.MCIMX7U5" name="qspi_edma" brief="QSPI Driver" version="2.2.2" full_name="QSPI EDMA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/qspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.qspi.MCIMX7U5"/>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_qspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_qspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_qspi_edma_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai.MCIMX7U5" name="sai" brief="SAI Driver" version="2.3.2" full_name="SAI Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/sai" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sai_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai_edma.MCIMX7U5" name="sai_edma" brief="SAI EDMA Driver" version="2.3.1" full_name="SAI EDMA Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/sai" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MCIMX7U5"/>
          <component_dependency value="platform.drivers.sai.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sai_edma_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sema42.MCIMX7U5" name="sema42" brief="SEMA42 Driver" version="2.0.2" full_name="SEMA42 Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/sema42" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sema42.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sema42.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sema42_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.sgtl5000.MCIMX7U5" name="sgtl5000" brief="Driver sgtl5000" version="2.1.1" full_name="Driver sgtl5000" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/codec/sgtl5000" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.codec_i2c.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sgtl5000.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sgtl5000.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.snvs_hp.MCIMX7U5" name="snvs_hp" brief="SNVS HP Driver" version="2.2.0" full_name="SNVS HP Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/snvs_hp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_snvs_hp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_snvs_hp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_snvs_hp_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.snvs_lp.MCIMX7U5" name="snvs_lp" brief="SNVS LP Driver" version="2.2.0" full_name="SNVS LP Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/snvs_lp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_snvs_lp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_snvs_lp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_snvs_lp_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.srtm.MCIMX7U5" name="srtm" brief="Driver srtm" version="1.0.0" full_name="Driver srtm" devices="MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/srtm" project_base_path="srtm">
      <source relative_path="include" type="c_include">
        <files mask="srtm_channel.h"/>
        <files mask="srtm_defs.h"/>
        <files mask="srtm_dispatcher.h"/>
        <files mask="srtm_message.h"/>
        <files mask="srtm_peercore.h"/>
        <files mask="srtm_service.h"/>
      </source>
      <source relative_path="srtm" type="src">
        <files mask="srtm_channel.c"/>
        <files mask="srtm_dispatcher.c"/>
        <files mask="srtm_message.c"/>
        <files mask="srtm_peercore.c"/>
        <files mask="srtm_service.c"/>
      </source>
      <source relative_path="srtm" type="c_include">
        <files mask="srtm_channel_struct.h"/>
        <files mask="srtm_dispatcher_struct.h"/>
        <files mask="srtm_message_struct.h"/>
        <files mask="srtm_peercore_struct.h"/>
        <files mask="srtm_service_struct.h"/>
        <files mask="srtm_heap.h"/>
        <files mask="srtm_message_pool.h"/>
        <files mask="srtm_list.h"/>
        <files mask="srtm_mutex.h"/>
        <files mask="srtm_sem.h"/>
      </source>
      <source relative_path="port" type="src">
        <files mask="srtm_message_pool.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_srtm_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="srtm" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.srtm.freertos.MCIMX7U5" name="freertos" brief="Driver srtm freertos" version="1.0.0" full_name="Driver srtm freertos" devices="MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/srtm/port" project_base_path="srtm/port">
      <dependencies>
        <component_dependency value="driver.srtm.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="srtm_heap_freertos.c"/>
        <files mask="srtm_mutex_freertos.c"/>
        <files mask="srtm_sem_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_srtm_freertos_MCIMX7U5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.drivers.tpm.MCIMX7U5" name="tpm" brief="TPM Driver" version="2.0.7" full_name="TPM Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/tpm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_tpm_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.trgmux.MCIMX7U5" name="trgmux" brief="TRGMUX Driver" version="2.0.1" full_name="TRGMUX Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/trgmux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trgmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_trgmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_trgmux_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.trng.MCIMX7U5" name="trng" brief="TRNG Driver" version="2.0.12" full_name="TRNG Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/trng" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_trng.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trng.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_trng_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tstmr.MCIMX7U5" name="tstmr" brief="TSTMR Driver" version="2.0.0" full_name="TSTMR Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/tstmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tstmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_tstmr_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wdog32.MCIMX7U5" name="wdog" brief="WDOG32 Driver" version="2.0.4" full_name="WDOG32 Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/wdog32" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wdog32.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wdog32.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wdog32_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8960.MCIMX7U5" name="wm8960" brief="Driver wm8960" version="2.1.3" full_name="Driver wm8960" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="software_component" package_base_path="core/components/codec/wm8960" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
          <component_dependency value="component.codec_i2c.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8960.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8960.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wm8960_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.xrdc.MCIMX7U5" name="xrdc" brief="XRDC Driver" version="2.0.4" full_name="XRDC Driver" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="driver" package_base_path="core/drivers/xrdc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_xrdc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_xrdc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_xrdc_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.MCIMX7U5" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="MCIMX7U5xxxxx" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.freertos-kernel.MCIMX7U5" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="202007.00.0" full_name="FreeRTOS kernel" devices="MCIMX7U5xxxxx" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.extension.MCIMX7U5"/>
          <component_dependency value="middleware.freertos-kernel.template.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="event_groups.c"/>
        <files mask="croutine.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="croutine.h"/>
        <files mask="StackMacros.h"/>
        <files mask="atomic.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM4F" type="src" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="port.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM4F" type="c_include" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="portable/GCC/ARM_CM4F" toolchain="armgcc mcuxpresso" type="c_include" device_cores="m4_MCIMX7U5xxxxx"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.armv8m.MCIMX7U5" name="FreeRTOS port ARMv8M" brief="FreeRTOS port ARMv8M" version="202007.00.0" full_name="FreeRTOS port ARMv8M" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
      </dependencies>
      <source relative_path="portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/context" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/heap" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/init" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/macros" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.extension.MCIMX7U5" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="202007.00.0" full_name="FreeRTOS NXP extension" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_extension_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.MCIMX7U5" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="202007.00.0" full_name="FreeRTOS heap 1" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.MCIMX7U5" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="202007.00.0" full_name="FreeRTOS heap 2" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.MCIMX7U5" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="202007.00.0" full_name="FreeRTOS heap_3" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.MCIMX7U5" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="202007.00.0" full_name="FreeRTOS heap 4" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_heap_4_MCIMX7U5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.MCIMX7U5" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="202007.00.0" full_name="FreeRTOS heap 5" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_newlib.MCIMX7U5" name="FreeRTOS heap newlib" brief="FreeRTOS heap newlib" version="202007.00.0" full_name="FreeRTOS heap newlib" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_useNewlib.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.MCIMX7U5" name="FreeRTOS MPU wrappers" brief="FreeRTOS MPU wrappers" version="202007.00.0" full_name="FreeRTOS MPU wrappers" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MCIMX7U5"/>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.template.MCIMX7U5" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="202007.00.0" full_name="FreeRTOS configuration template" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel" user_visible="false" type="project_template" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="template/ARM_CM4F" type="c_include" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source exclude="true" relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
        <files mask="heap_useNewlib.c"/>
      </source>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <include_paths>
        <include_path relative_path="template/ARM_CM4F" type="c_include" device_cores="m4_MCIMX7U5xxxxx"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.unused.MCIMX7U5" name="FreeRTOS unused" brief="FreeRTOS unused" version="202007.00.0" full_name="FreeRTOS unused" devices="MCIMX7U5xxxxx" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="./" type="doc">
        <files mask="History.txt"/>
        <files mask="readme.txt"/>
      </source>
      <source relative_path="./" type="other">
        <files mask="Quick_Start_Guide.url"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source relative_path="License" type="doc">
        <files mask="license.txt"/>
      </source>
      <source relative_path="portable/ARMClang" type="doc">
        <files mask="Use-the-GCC-ports.txt"/>
      </source>
    </component>
    <component id="middleware.issdk.algorithms.pedometer.MCIMX7U5" name="pedometer" brief="ISSDK Pedometer Algorithm Common" version="1.7.0" full_name="Middleware issdk algorithms pedometer common" devices="MCIMX7U5xxxxx" user_visible="false" type="middleware" package_base_path="middleware/issdk" project_base_path="pedometer">
      <dependencies>
        <all>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="algorithms/pedometer/source" project_relative_path="./" type="src">
        <files mask="pedometer.c"/>
      </source>
      <source relative_path="algorithms/pedometer/include" project_relative_path="./" type="c_include">
        <files mask="pedometer.h"/>
      </source>
      <source relative_path="algorithms/pedometer/include/libinclude" project_relative_path="./" type="c_include">
        <files mask="KeynetikPedometer.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_issdk_algorithms_pedometer_common_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="algorithms/pedometer/include" project_relative_path="./" type="c_include"/>
        <include_path relative_path="algorithms/pedometer/include/libinclude" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.issdk.algorithms.pedometer.lib_cm4.MCIMX7U5" name="pedometer_lib_cm4" brief="ISSDK Pedometer Algorithm Library for CM4" version="1.0.0" full_name="Middleware issdk algorithms pedometer lib_cm4" devices="MCIMX7U5xxxxx" user_visible="false" type="middleware" package_base_path="middleware/issdk" project_base_path="libs">
      <source relative_path="algorithms/pedometer/lib" project_relative_path="./" type="lib">
        <files mask="libpedometerm4.a"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_issdk_algorithms_pedometer_lib_cm4_MCIMX7U5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.issdk.sensor.allregdefs.MCIMX7U5" name="issdk_allregdefs" brief="ISSDK Sensors RegDefs" version="1.7.0" full_name="Middleware issdk sensor allregdefs" devices="MCIMX7U5xxxxx" user_visible="true" type="middleware" package_base_path="middleware/issdk" project_base_path="sensors">
      <dependencies>
        <all>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MCIMX7U5"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="sensors" project_relative_path="./" type="c_include">
        <files mask="fxas21002.h"/>
        <files mask="fxos8700.h"/>
        <files mask="mpl3115.h"/>
        <files mask="fxlc95000.h"/>
        <files mask="fxls8471q.h"/>
        <files mask="fxls8962.h"/>
        <files mask="fxpq3115.h"/>
        <files mask="mag3110.h"/>
        <files mask="mma845x.h"/>
        <files mask="mma865x.h"/>
        <files mask="mma8491q.h"/>
        <files mask="mma9553.h"/>
        <files mask="diff_p.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_issdk_sensor_allregdefs_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="sensors" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mmcau.cm4_cm7.MCIMX7U5" name="mmcau_cm4_cm7" brief="MMCAU library for ARM Cortex M4/M7 core" version="2.0.1" full_name="Kinetis MMCAU security function library for Arm Cortex-M4 and Cortex-M7" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" category="Security/MMCAU library" user_visible="true" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <dependencies>
        <all>
          <component_dependency value="middleware.mmcau.common_files.MCIMX7U5"/>
          <component_dependency value="platform.drivers.clock.MCIMX7U5"/>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
        </all>
      </dependencies>
      <source toolchain="armgcc mcuxpresso" relative_path="asm-cm4-cm7" type="lib">
        <files mask="lib_mmcau.a"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_mmcau_cm4_cm7_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mmcau.common_files.MCIMX7U5" name="mmcau" brief="MMCAU common library source files" version="2.0.1" full_name="Kinetis MMCAU common source files" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" category="Security/MMCAU library" user_visible="true" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="cau_api.h"/>
        <files mask="fsl_mmcau.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mmcau.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_mmcau_common_files_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mmcau.mmcau_files.MCIMX7U5" name="mmcau" brief="MMCAU security function library source files" version="2.0.1" full_name="Kinetis MMCAU security function library source files" devices="MCIMX7U5xxxxx" category="Security/MMCAU library" user_visible="false" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <source relative_path="./" type="doc">
        <files mask="README.txt"/>
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source relative_path="asm-cm4-cm7/src" type="other" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="cau2_defines.hdr"/>
      </source>
      <source relative_path="asm-cm4-cm7/src" type="asm_include" device_cores="m4_MCIMX7U5xxxxx">
        <files mask="mmcau_sha1_functions.s"/>
        <files mask="mmcau_md5_functions.s"/>
        <files mask="mmcau_sha256_functions.s"/>
        <files mask="mmcau_aes_functions.s"/>
        <files mask="mmcau_des_functions.s"/>
      </source>
    </component>
    <component id="middleware.mmcau.unused_files.MCIMX7U5" name="unused_files" brief="MMCAU files unused by projects" version="2.0.1" full_name="MMCAU library unused files" devices="MCIMX7U5xxxxx" user_visible="false" type="other" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <source exclude="true" relative_path="doxygen" type="other">
        <files mask="fsl_mmcau.dox" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.remoteproc.loadscript.MCIMX7U5" name="remoteproc_load_script" brief="remoteproc-load script" version="1.0.0" full_name="remoteproc-load script" devices="MCIMX7U5xxxxx" user_visible="true" type="other" package_base_path="middleware/multicore" project_base_path="multicore">
      <source relative_path="tools/remoteproc-load" type="script">
        <files mask="load.sh"/>
      </source>
      <source relative_path="tools/remoteproc-load" type="other">
        <files mask="Readme.md"/>
        <files mask="remote.cfg"/>
      </source>
    </component>
    <component id="middleware.usb.common_header.MCIMX7U5" name="USB Common Header" brief="Middleware usb common_header" version="2.7.0" full_name="USB Common Header" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" category="USB/USB Common Header" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <component_dependency value="component.osa.MCIMX7U5"/>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.common_header.MCIMX7U5" name="USB Device Common Header" brief="Middleware usb device common_header" version="2.7.0" full_name="USB Device Common Header" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.MCIMX7U5"/>
          <component_dependency value="middleware.usb.common_header.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="device" project_relative_path="device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source relative_path="device" project_relative_path="device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <include_paths>
        <include_path relative_path="device" project_relative_path="device/include" type="c_include"/>
        <include_path relative_path="device" project_relative_path="device/source" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.MCIMX7U5" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utilities_misc_utilities_MCIMX7U5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MCIMX7U5" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_MCIMX7U5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.MCIMX7U5" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_lite_MCIMX7U5.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.MCIMX7U5" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MCIMX7U5"/>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.MCIMX7U5" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MCIMX7U5"/>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_lite_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.notifier.MCIMX7U5" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/devices/MCIMX7U5/utilities" project_base_path="utilities/utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MCIMX7U5"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.MCIMX7U5" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="MCIMX7U5xxxxx" device_cores="m4_MCIMX7U5xxxxx" user_visible="true" type="utilities" package_base_path="core/devices/MCIMX7U5/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MCIMX7U5"/>
          <component_dependency value="component.lists.MCIMX7U5"/>
          <component_dependency value="platform.drivers.common.MCIMX7U5"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_shell_MCIMX7U5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
