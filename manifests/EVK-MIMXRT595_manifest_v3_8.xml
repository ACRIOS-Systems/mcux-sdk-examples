<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_EVK-MIMXRT595" name="EVK-MIMXRT595" brief="This is SDK version 2.10.0 manifest file. It describes the content of the EVK-MIMXRT595 and additional settings for tools that support SDK version 2.10.0" format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-08-03 13:04:52.489238-->
  <!--This manifest is generated based on sdk repo commit: a40647dd23698fa812ab2e267466ae159e1a5d45-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <ksdk id="MCUXpressoSDK2100" name="MCUXpressoSDK2100" version="2.10.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.4.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="10.2.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.4.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="evkmimxrt595" name="EVK-MIMXRT595" href="" version="1.0.0" package="MIMXRT595SFFOC">
      <description>i.MX RT595 Evaluation Kit</description>
      <image path="core/boards/evkmimxrt595" type="image">
        <files mask="evkmimxrt595.png"/>
      </image>
      <memory>
        <memoryBlock id="QSPI_FLASH_evkmimxrt595" name="QSPI_FLASH" addr="08000000" size="00800000" type="ExtFlash" access="RO"/>
      </memory>
      <examples>
        <example id="evkmimxrt595_acmp_interrupt" name="acmp_interrupt" brief="The ACMP interrupt project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and toggle the LED when thefinal comparison result changed. The purpose of this demo is to show how to use the ACMP driverin SDK software by interrupt way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/evkmimxrt595/driver_examples/acmp/interrupt">
          <external path="examples/evkmimxrt595/driver_examples/acmp/interrupt" type="xml">
            <files mask="acmp_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_acmp_polling" name="acmp_polling" brief="The ACMP Polling project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and toggle the LED when thefinal comparison result changed. The purpose of this demo is to show how to use the ACMP driverin SDK software by polling way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/evkmimxrt595/driver_examples/acmp/polling">
          <external path="examples/evkmimxrt595/driver_examples/acmp/polling" type="xml">
            <files mask="acmp_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_acmp_round_robin" name="acmp_round_robin" brief="The ACMP Round-Robin project is a simple demonstration program that uses the SDK software. User must set the round-robin mode trigger in specific board properly according to the board resource before running the example. When the example running, it sets positive port as fixed channel and internal DAC output as comparison reference in positive port and sets the channels input by useras round-robin checker channel. The example will enter stop mode and wait user to change the voltage of round-robin checker channel. It will exit stop mode after the voltage of round-robin checkerchannel changed by user." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/evkmimxrt595/driver_examples/acmp/round_robin">
          <external path="examples/evkmimxrt595/driver_examples/acmp/round_robin" type="xml">
            <files mask="acmp_round_robin_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_casper" name="casper" brief="The CASPER Example project is a demonstration program that uses the KSDK software to calculate RSA." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/casper" path="examples/evkmimxrt595/driver_examples/casper">
          <external path="examples/evkmimxrt595/driver_examples/casper" type="xml">
            <files mask="casper_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/crc" path="examples/evkmimxrt595/driver_examples/crc">
          <external path="examples/evkmimxrt595/driver_examples/crc" type="xml">
            <files mask="crc_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_ctimer_match_example" name="ctimer_match_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, the match feature of the CTimer is used to toggle the output level." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/evkmimxrt595/driver_examples/ctimer/simple_match">
          <external path="examples/evkmimxrt595/driver_examples/ctimer/simple_match" type="xml">
            <files mask="ctimer_match_example_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_ctimer_match_interrupt_example" name="ctimer_match_interrupt_example" brief="The Simple Match Interrupt project is to demonstrate usage of the SDK CTimer driver with interrupt callback functionsIn this example the upon match and IO pin connected to the LED is toggled and the timer is reset, so it would generate a square wave.With an interrupt callback the match value is changed frequently in such a way that the frequency of the output square wave is increased gradually." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/evkmimxrt595/driver_examples/ctimer/simple_match_interrupt">
          <external path="examples/evkmimxrt595/driver_examples/ctimer/simple_match_interrupt" type="xml">
            <files mask="ctimer_match_interrupt_example_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_ctimer_pwm_example" name="ctimer_pwm_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, CTimer is used to generate a PWM signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/evkmimxrt595/driver_examples/ctimer/simple_pwm">
          <external path="examples/evkmimxrt595/driver_examples/ctimer/simple_pwm" type="xml">
            <files mask="ctimer_pwm_example_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_ctimer_pwm_interrupt_example" name="ctimer_pwm_interrupt_example" brief="The Simple PWM Interrupt project is to demonstrate usage of the SDK CTimer driver as a PWM with interrupt callback functionsIn this example an IO pin connected to the LED is used as a PWM output line to generate a PWM signal.With an interrupt callback the PWM duty cycle is changed frequently in such a way that the LED brightness can be varied." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/evkmimxrt595/driver_examples/ctimer/simple_pwm_interrupt">
          <external path="examples/evkmimxrt595/driver_examples/ctimer/simple_pwm_interrupt" type="xml">
            <files mask="ctimer_pwm_interrupt_example_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_dma_channel_chain" name="dma_channel_chain" brief="The DMA channel chain example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the DMA channel chain feature." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/evkmimxrt595/driver_examples/dma/channel_chain">
          <external path="examples/evkmimxrt595/driver_examples/dma/channel_chain" type="xml">
            <files mask="dma_channel_chain_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_dma_interleave_transfer" name="dma_interleave_transfer" brief="The DMA interleave transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA interleave feature." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/evkmimxrt595/driver_examples/dma/interleave_transfer">
          <external path="examples/evkmimxrt595/driver_examples/dma/interleave_transfer" type="xml">
            <files mask="dma_interleave_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_dma_linked_transfer" name="dma_linked_transfer" brief="The DMA linked transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a linked trnasfer example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/evkmimxrt595/driver_examples/dma/linked_transfer">
          <external path="examples/evkmimxrt595/driver_examples/dma/linked_transfer" type="xml">
            <files mask="dma_linked_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_dma_memory_to_memory" name="dma_memory_to_memory" brief="The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/evkmimxrt595/driver_examples/dma/memory_to_memory">
          <external path="examples/evkmimxrt595/driver_examples/dma/memory_to_memory" type="xml">
            <files mask="dma_memory_to_memory_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_dmic_dma" name="dmic_dma" brief="This example shows how to use DMA to transfer data from DMIC to memory." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dmic" path="examples/evkmimxrt595/driver_examples/dmic/dmic_dma">
          <external path="examples/evkmimxrt595/driver_examples/dmic/dmic_dma" type="xml">
            <files mask="dmic_dma_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_dmic_hwvad" name="dmic_hwvad" brief="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This demo explains how built in HWVAD( HW voice activity detector) in LPC5411x can be used towake up the device from sleep mode" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dmic" path="examples/evkmimxrt595/driver_examples/dmic/dmic_hwvad">
          <external path="examples/evkmimxrt595/driver_examples/dmic/dmic_hwvad" type="xml">
            <files mask="dmic_hwvad_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_dmic_i2s_codec" name="dmic_i2s_codec" brief="Demonstrates the DMIC working with I2S. Audio is converted to samples in the DMIC module.Then, the data is placed into the I2S buffer. Last, it is read from the I2S buffer and sentto the CODEC, then the audio data will be output to Lineout of CODEC.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dmic" path="examples/evkmimxrt595/driver_examples/dmic/dmic_i2s_codec">
          <external path="examples/evkmimxrt595/driver_examples/dmic/dmic_i2s_codec" type="xml">
            <files mask="dmic_i2s_codec_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_dmic_i2s_dma" name="dmic_i2s_dma" brief="Demonstrates the DMIC working with I2S. Audio is converted to samples in the DMIC module.Then, the data is placed memory buffer. Last, it is send data to the I2S buffer and send to the CODEC, then the audio data will be output to Lineout of CODEC.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dmic" path="examples/evkmimxrt595/driver_examples/dmic/dmic_i2s_dma">
          <external path="examples/evkmimxrt595/driver_examples/dmic/dmic_i2s_dma" type="xml">
            <files mask="dmic_i2s_dma_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_dmic_multi_channel" name="dmic_multi_channel" brief="Demonstrates the DMIC multi channel working with I2S. Audio is converted to samples in the DMIC module.Then, the data is placed memory buffer. Last, it is send data to the I2S buffer and send to the CODEC, then the audio data will be output to Lineout of CODEC.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dmic" path="examples/evkmimxrt595/driver_examples/dmic/dmic_multi_channel">
          <external path="examples/evkmimxrt595/driver_examples/dmic/dmic_multi_channel" type="xml">
            <files mask="dmic_multi_channel_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_flexio_i2c_interrupt_flexcomm_i2c_transfer" name="flexio_i2c_interrupt_flexcomm_i2c_transfer" brief="The flexio_i2c_interrupt example shows how to use flexio i2c master driver in interrupt way:In this example, a flexio simulated i2c master connect to an flexcomm I2C slave." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmimxrt595/driver_examples/flexio/i2c/interrupt_i2c_transfer">
          <external path="examples/evkmimxrt595/driver_examples/flexio/i2c/interrupt_i2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_flexcomm_i2c_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmimxrt595/driver_examples/flexio/pwm">
          <external path="examples/evkmimxrt595/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_flexio_spi_int_spi_transfer_master" name="flexio_spi_int_spi_transfer_master" brief="The flexio_spi_master_interrupt_spi_slave example shows how to use flexio spi master driver in interrupt way:In this example, a flexio simulated master connect to a spi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmimxrt595/driver_examples/flexio/spi/int_spi_transfer/master">
          <external path="examples/evkmimxrt595/driver_examples/flexio/spi/int_spi_transfer/master" type="xml">
            <files mask="flexio_spi_int_spi_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmimxrt595/driver_examples/flexio/uart/interrupt_transfer">
          <external path="examples/evkmimxrt595/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/evkmimxrt595/driver_examples/flexio/uart/polling_transfer">
          <external path="examples/evkmimxrt595/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_flexspi_octal_dma_transfer" name="flexspi_octal_dma_transfer" brief="The flexspi_octal_dma_transfer example shows how to use flexspi driver with dma:In this example, flexspi will send data and operate the external octal flash connected with FLEXSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and program a page into the flash, at last check if the data in flash is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexspi" path="examples/evkmimxrt595/driver_examples/flexspi/octal/dma_transfer">
          <external path="examples/evkmimxrt595/driver_examples/flexspi/octal/dma_transfer" type="xml">
            <files mask="flexspi_octal_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_flexspi_octal_polling_transfer" name="flexspi_octal_polling_transfer" brief="The flexspi_octal_polling_transfer example shows how to use flexspi driver with polling:In this example, flexspi will send data and operate the external octal flash connected with FLEXSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and program a page into the flash, at last check if the data in flash is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexspi" path="examples/evkmimxrt595/driver_examples/flexspi/octal/polling_transfer">
          <external path="examples/evkmimxrt595/driver_examples/flexspi/octal/polling_transfer" type="xml">
            <files mask="flexspi_octal_polling_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_flexspi_psram_dma_transfer" name="flexspi_psram_dma_transfer" brief="The flexspi_psram_dma_transfer example shows how to use flexspi driver with dma: In this example, flexspi will send data and operate the external PSRAM connected with FLEXSPI. Some simple flash command will be executed, such as Read Data and Write Data.Example will write/read through the whole chip, through IP command and AHB command." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexspi" path="examples/evkmimxrt595/driver_examples/flexspi/psram/dma_transfer">
          <external path="examples/evkmimxrt595/driver_examples/flexspi/psram/dma_transfer" type="xml">
            <files mask="flexspi_psram_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_flexspi_psram_polling_transfer" name="flexspi_psram_polling_transfer" brief="The flexspi_psram_polling_transfer example shows how to use flexspi driver with polling: In this example, flexspi will send data and operate the external PSRAM connected with FLEXSPI. Some simple flash command will be executed, such as Read Data and Write Data.Example will write/read through the whole chip, through IP command and AHB command." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexspi" path="examples/evkmimxrt595/driver_examples/flexspi/psram/polling_transfer">
          <external path="examples/evkmimxrt595/driver_examples/flexspi/psram/polling_transfer" type="xml">
            <files mask="flexspi_psram_polling_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_fmeas" name="fmeas" brief="This example shows how to use SDK drivers to use the Frequency Measure feature of SYSCON module on LPC devices.It shows how to measure a target frequency using a (faster) reference frequency. The example uses the internal main clock as the reference frequency to measure the frequencies of the RTC, watchdog oscillator, and internal RC oscillator." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/fmeas" path="examples/evkmimxrt595/driver_examples/fmeas">
          <external path="examples/evkmimxrt595/driver_examples/fmeas" type="xml">
            <files mask="fmeas_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_blinky_ns" name="freertos_blinky_ns" brief="The blinky example for FreeRTOS demonstrates the possibility to use the trust-zone features of FreeRTOS." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" linked_projects="evkmimxrt595_freertos_blinky_s" path="examples/evkmimxrt595/rtos_examples/freertos_tzm/freertos_blinky_ns">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_tzm/freertos_blinky_ns" type="xml">
            <files mask="freertos_blinky_ns_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_blinky_s" name="freertos_blinky_s" brief="The blinky example for FreeRTOS demonstrates the possibility to use the trust-zone features of FreeRTOS." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" linked_projects="evkmimxrt595_freertos_blinky_ns" path="examples/evkmimxrt595/rtos_examples/freertos_tzm/freertos_blinky_s">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_tzm/freertos_blinky_s" type="xml">
            <files mask="freertos_blinky_s_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_event">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_generic">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_hello">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_i2c" name="freertos_i2c" brief="The freertos_i2c example shows an application using RTOS tasks with I2C driver:The example supports 2 different connections:On board connection and board to board connection.With one board connection, 2 I2C instances of the same board are used. One i2c instance used as I2C master and another I2C instance used as I2C slave .    Default settings in freertos_i2c.c (in folder boards/&lt;board&gt;/rtos_examples/freertos_i2c) is applied.    Two tasks are created. One task is associated with an I2C master operation and another task deals with I2C slave operation.    1. I2C master task sends data to I2C slave task.    2. I2C master task reads data sent back from I2C slave task.    The transmit data and the receive data of both I2C master task and I2C slave task are printed out on terminal.With board to board connection, one I2C instance on one board is used as I2C master and the I2C instance on other board is used as I2C slave. Tasks are created to run on each board to handle I2C communication.    File freertos_i2c.c should have following definitions:    #define EXAMPLE_CONNECT_I2C BOARD_TO_BOARD    For board used as I2C master:        #define I2C_MASTER_SLAVE isMASTER    For board used as I2C slave:        #define I2C_MASTER_SLAVE isSLAVE" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_i2c">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_i2c" type="xml">
            <files mask="freertos_i2c_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_mpu_ns" name="freertos_mpu_ns" brief="The blinky example for FreeRTOS demonstrates the possibility to use the trust-zone features of FreeRTOS." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" linked_projects="evkmimxrt595_freertos_mpu_s" path="examples/evkmimxrt595/rtos_examples/freertos_mpu/freertos_mpu_ns">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_mpu/freertos_mpu_ns" type="xml">
            <files mask="freertos_mpu_ns_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_mpu_s" name="freertos_mpu_s" brief="The blinky example for FreeRTOS demonstrates the possibility to use the trust-zone features of FreeRTOS." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" linked_projects="evkmimxrt595_freertos_mpu_ns" path="examples/evkmimxrt595/rtos_examples/freertos_mpu/freertos_mpu_s">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_mpu/freertos_mpu_s" type="xml">
            <files mask="freertos_mpu_s_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_mutex">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_queue">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_sem">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_spi" name="freertos_spi" brief="The freertos_spi example shows how to use SPI driver in FreeRTOS:In this example , one spi instance is used as SPI master with blocking and another spi instance is used as SPI slave.1. SPI master sends/receives data using task blocking calls to/from SPI slave. (SPI Slave uses interrupt to receive/sendthe data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_spi">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_spi" type="xml">
            <files mask="freertos_spi_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer’s callback SwTimerCallback isperiodically executed and text “Tick.” is printed to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_swtimer">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then&#10;it is waked up by expired time delay that using RTC module or occur any a hardware interrupt.&#10;&#10;" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_tickless">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_freertos_usart" name="freertos_usart" brief="The USART example for FreeRTOS demonstrates the possibility to use the USART driver in the RTOS.The example uses single instance of USART IP and writes string into, then reads back chars.After every 4B received, these are sent back on USART." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/evkmimxrt595/rtos_examples/freertos_usart">
          <external path="examples/evkmimxrt595/rtos_examples/freertos_usart" type="xml">
            <files mask="freertos_usart_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear registers for each GPIO pin output register. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/evkmimxrt595/driver_examples/gpio/input_interrupt">
          <external path="examples/evkmimxrt595/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs. The example use LEDs and buttons to demonstrates GPIO API for port and pin manipulation (init, set,clear, and toggle)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/evkmimxrt595/driver_examples/gpio/led_output">
          <external path="examples/evkmimxrt595/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_hashcrypt" name="hashcrypt" brief="The hashcrypt Example project is a demonstration program that uses the KSDK software to encrypt and hash data with hardware acceleration." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/hashcrypt" path="examples/evkmimxrt595/driver_examples/hashcrypt">
          <external path="examples/evkmimxrt595/driver_examples/hashcrypt" type="xml">
            <files mask="hashcrypt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/evkmimxrt595/demo_apps/hello_world">
          <external path="examples/evkmimxrt595/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_hello_world_hybrid" name="hello_world_hybrid" brief="The HelloWorldHybrid demo prints the &quot;hello world&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to boot from the external flash into the internal SRAM and the remaining code that resides in the flash is fetched/executed directly(XIP)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/evkmimxrt595/demo_apps/hello_world_hybrid">
          <external path="examples/evkmimxrt595/demo_apps/hello_world_hybrid" type="xml">
            <files mask="hello_world_hybrid_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2c_accel_event_trigger" name="i2c_accel_event_trigger" brief="This example demonstrate how to wake up main device in low power mode with accelerometer trigger event. The accelerometer can keep working while the main device is in low power mode (or deep sleep mode). Only when the configured event was captured, the accelerometer will trigger the interrupt to wake up the main device. This example uses I2C to configure the accelerometer to work in 800Hz data rate with low noise mode. And when the tap event is triggered, it will wake up the main device. And 32 samples around the trigger event will be captured." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/evkmimxrt595/driver_examples/i2c/accel_event_trigger">
          <external path="examples/evkmimxrt595/driver_examples/i2c/accel_event_trigger" type="xml">
            <files mask="i2c_accel_event_trigger_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2c_dma_b2b_transfer_master" name="i2c_dma_b2b_transfer_master" brief="The i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/evkmimxrt595/driver_examples/i2c/dma_b2b_transfer/master">
          <external path="examples/evkmimxrt595/driver_examples/i2c/dma_b2b_transfer/master" type="xml">
            <files mask="i2c_dma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2c_dma_b2b_transfer_slave" name="i2c_dma_b2b_transfer_slave" brief="The i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/evkmimxrt595/driver_examples/i2c/dma_b2b_transfer/slave">
          <external path="examples/evkmimxrt595/driver_examples/i2c/dma_b2b_transfer/slave" type="xml">
            <files mask="i2c_dma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/evkmimxrt595/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="examples/evkmimxrt595/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/evkmimxrt595/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="examples/evkmimxrt595/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2c_polling_b2b_master" name="i2c_polling_b2b_master" brief="The i2c_polling_b2b_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/evkmimxrt595/driver_examples/i2c/polling_b2b/master">
          <external path="examples/evkmimxrt595/driver_examples/i2c/polling_b2b/master" type="xml">
            <files mask="i2c_polling_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2c_polling_b2b_slave" name="i2c_polling_b2b_slave" brief="The i2c_polling_b2b_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/evkmimxrt595/driver_examples/i2c/polling_b2b/slave">
          <external path="examples/evkmimxrt595/driver_examples/i2c/polling_b2b/slave" type="xml">
            <files mask="i2c_polling_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2c_read_accel_value_transfer" name="i2c_read_accel_value_transfer" brief="The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/evkmimxrt595/driver_examples/i2c/read_accel_value_transfer">
          <external path="examples/evkmimxrt595/driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="i2c_read_accel_value_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2s_dma_record_playback" name="i2s_dma_record_playback" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2s" path="examples/evkmimxrt595/driver_examples/i2s/dma_record_playback">
          <external path="examples/evkmimxrt595/driver_examples/i2s/dma_record_playback" type="xml">
            <files mask="i2s_dma_record_playback_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2s_dma_transfer" name="i2s_dma_transfer" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2s" path="examples/evkmimxrt595/driver_examples/i2s/dma_transfer">
          <external path="examples/evkmimxrt595/driver_examples/i2s/dma_transfer" type="xml">
            <files mask="i2s_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2s_dma_transfer_tfa9896" name="i2s_dma_transfer_tfa9896" brief="The I2S example project uses one I2S interface to continuously record input sound to a buffer and another I2S interface to playback the buffer to output - digital loopback. It requires NXP Mic/Audio/Oled Shield with TFA9896 codec. It needs to have 1-2 connected on JP3." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2s" path="examples/evkmimxrt595/driver_examples/i2s/dma_transfer_tfa9896">
          <external path="examples/evkmimxrt595/driver_examples/i2s/dma_transfer_tfa9896" type="xml">
            <files mask="i2s_dma_transfer_tfa9896_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2s_interrupt_record_playback" name="i2s_interrupt_record_playback" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2s" path="examples/evkmimxrt595/driver_examples/i2s/interrupt_record_playback">
          <external path="examples/evkmimxrt595/driver_examples/i2s/interrupt_record_playback" type="xml">
            <files mask="i2s_interrupt_record_playback_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i2s_interrupt_transfer" name="i2s_interrupt_transfer" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2s" path="examples/evkmimxrt595/driver_examples/i2s/interrupt_transfer">
          <external path="examples/evkmimxrt595/driver_examples/i2s/interrupt_transfer" type="xml">
            <files mask="i2s_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i3c_polling_b2b_transfer_master" name="i3c_polling_b2b_transfer_master" brief="The i3c_polling_b2b_transfer_master example shows how to use i3c driver as master to do board to board transfer using polling method:In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/evkmimxrt595/driver_examples/i3c/polling_b2b_transfer/master">
          <external path="examples/evkmimxrt595/driver_examples/i3c/polling_b2b_transfer/master" type="xml">
            <files mask="i3c_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_i3c_polling_b2b_transfer_slave" name="i3c_polling_b2b_transfer_slave" brief="The i3c_polling_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with a polling master:In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i3c" path="examples/evkmimxrt595/driver_examples/i3c/polling_b2b_transfer/slave">
          <external path="examples/evkmimxrt595/driver_examples/i3c/polling_b2b_transfer/slave" type="xml">
            <files mask="i3c_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_iap_flash_fcb" name="iap_flash_fcb" brief="The IAP flash project is a simple demonstration program of the SDK IAP driver. It provides some flash operations with ROM API, such as using a complete FlexSPI NOR Configuration Block to configure the flash, erasing sectors and programing pages. All operations are followed by flash memory check to ensure the data operated are successful." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/iap3" path="examples/evkmimxrt595/driver_examples/iap/flash_fcb">
          <external path="examples/evkmimxrt595/driver_examples/iap/flash_fcb" type="xml">
            <files mask="iap_flash_fcb_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_lcdif_cursor_argb" name="lcdif_cursor_argb" brief="This example demonstrates how to use the LCDIF cursor in ARGB8888 mode. In this exapmle, the screen is devided into two parts: red and blue. A cursor is moving in the screen, the cursor alpha value changes during moving." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/evkmimxrt595/driver_examples/lcdif/cursor_argb">
          <external path="examples/evkmimxrt595/driver_examples/lcdif/cursor_argb" type="xml">
            <files mask="lcdif_cursor_argb_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_lcdif_cursor_masked" name="lcdif_cursor_masked" brief="This example demonstrates how to use the LCDIF cursor in masked mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/evkmimxrt595/driver_examples/lcdif/cursor_masked">
          <external path="examples/evkmimxrt595/driver_examples/lcdif/cursor_masked" type="xml">
            <files mask="lcdif_cursor_masked_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_lcdif_gamma" name="lcdif_gamma" brief="This example demonstrates how to use the LCDIF gamma correction feature. In this example, the gamma corretion table is set to invert the original picture. The original picture is gradual changed gray bars, the gamma correction is continuously enabled and disabled, so you can see the screen switch between the original picture and the inverted picture." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/evkmimxrt595/driver_examples/lcdif/gamma">
          <external path="examples/evkmimxrt595/driver_examples/lcdif/gamma" type="xml">
            <files mask="lcdif_gamma_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_lcdif_rgb565" name="lcdif_rgb565" brief="This example demonstrates how to use the LCDIF driver to show the RGB565 format frame buffer. When the example runs, a rectangle is moving in the screen, and its color changes when touch border." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdif" path="examples/evkmimxrt595/driver_examples/lcdif/rgb565">
          <external path="examples/evkmimxrt595/driver_examples/lcdif/rgb565" type="xml">
            <files mask="lcdif_rgb565_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_lpadc_dma" name="lpadc_dma" brief="The lpdc_dma example shows how to use ADC to trigger a DMA transfer. In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC's sample input. When running the project, typing any key into debug console would trigger the conversion, the software trigger API is called to start the conversion. When the ADC conversion is completed, it would trigger the DMA in ping-pong transfer mode to move the ADC conversion result from ADC conversion data register to user indicated memory. Then the main loop waits for the transfer to be done and print the result to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/evkmimxrt595/driver_examples/lpadc/dma">
          <external path="examples/evkmimxrt595/driver_examples/lpadc/dma" type="xml">
            <files mask="lpadc_dma_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_lpadc_interrupt" name="lpadc_interrupt" brief="The lpdc_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/evkmimxrt595/driver_examples/lpadc/interrupt">
          <external path="examples/evkmimxrt595/driver_examples/lpadc/interrupt" type="xml">
            <files mask="lpadc_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_lpadc_polling" name="lpadc_polling" brief="The lpadc_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/evkmimxrt595/driver_examples/lpadc/polling">
          <external path="examples/evkmimxrt595/driver_examples/lpadc/polling" type="xml">
            <files mask="lpadc_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_lpadc_temperature_measurement" name="lpadc_temperature_measurement" brief="The lpadc_temperature_measurement example shows how to measure the temperature within the internal sensor. In this example, the ADC input channel is mapped to an internal temperature sensor. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value. In ADC ISR, the watermark flag would be cleared by reading the conversion result value. When the conversion done, two valid result will be put in the FIFO, then the temperature can be calculated within the two results and a specific formula." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/evkmimxrt595/driver_examples/lpadc/temperature_measurement">
          <external path="examples/evkmimxrt595/driver_examples/lpadc/temperature_measurement" type="xml">
            <files mask="lpadc_temperature_measurement_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_mmccard_freertos" name="mmccard_freertos" brief="The MMCCARD FreeRTOS project is a demonstration program that uses the SDK software. It reads/writes/erases the MMC card continusly. The purpose of this example is to show how to use MMCCARD driverwith FreeRTOS in SDK software to access MMC card.Note:User can use MMC plus card or emmc(on board IC, but not recommand use emmc socket,due to high speed timing restriction)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/mmccard_freertos" path="examples/evkmimxrt595/sdmmc_examples/mmccard_freertos">
          <external path="examples/evkmimxrt595/sdmmc_examples/mmccard_freertos" type="xml">
            <files mask="mmccard_freertos_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_mmccard_interrupt" name="mmccard_interrupt" brief="The MMCCARD Interrupt project is a demonstration program that uses the SDK software. It reads/writes/erases the MMC card continusly. The purpose of this example is to show how to use MMCCARD driver andshow how to use interrupt based transfer API in SDK software driver to access MMC card.Note:User can use MMC plus card or emmc(on board IC, but not recommand use emmc socket,due to high speed timing restriction)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/mmccard" path="examples/evkmimxrt595/sdmmc_examples/mmccard_interrupt">
          <external path="examples/evkmimxrt595/sdmmc_examples/mmccard_interrupt" type="xml">
            <files mask="mmccard_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_mmccard_polling" name="mmccard_polling" brief="The MMCCARD Polling project is a demonstration program that uses the SDK software. It reads/writes/erases the MMC card continusly. The purpose of this example is to show how to use MMCCARD driver andshow how to use polling based transfer API in SDK software driver to access MMC card.Note:User can use MMC plus card or emmc(on board IC, but not recommand use emmc socket,due to high speed timing restriction)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/mmccard" path="examples/evkmimxrt595/sdmmc_examples/mmccard_polling">
          <external path="examples/evkmimxrt595/sdmmc_examples/mmccard_polling" type="xml">
            <files mask="mmccard_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_mrt_example" name="mrt_example" brief="The MRT project is a simple demonstration program of the SDK MRT driver. It sets up the MRThardware block to trigger a periodic interrupt after every 250 milliseconds. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mrt" path="examples/evkmimxrt595/driver_examples/mrt">
          <external path="examples/evkmimxrt595/driver_examples/mrt" type="xml">
            <files mask="mrt_example_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_ostimer_example" name="ostimer_example" brief="The OSTIMER project is a simple demonstration program of the SDK OSTIMER driver. It sets the OSTIMER as the wakeup source from deep-sleep mode. After wakeup from deep-sleep mode, OS timer will set match value to trigger the interrupt while the timer count tick reach the match value about every 2 seconds." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ostimer" path="examples/evkmimxrt595/driver_examples/ostimer">
          <external path="examples/evkmimxrt595/driver_examples/ostimer" type="xml">
            <files mask="ostimer_example_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_otfad_decrypt" name="otfad_decrypt" brief="The OTFAD project is a simple demonstration program of the SDK OTFAD driver. It support for on the fly AES decryption for the data stored in external memories in an encrypted form." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/otfad/decrypt" path="examples/evkmimxrt595/driver_examples/otfad/decrypt">
          <external path="examples/evkmimxrt595/driver_examples/otfad/decrypt" type="xml">
            <files mask="otfad_decrypt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_pca9420" name="pca9420" brief="The pca9420 driver example demonstrates the usage of pca9420 SDK component driver.The example shows the usage of PCA9420 API to dump mode group settings; Or switch mode group; Or dump PCA9420 register content;" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pca9420" path="examples/evkmimxrt595/driver_examples/pca9420">
          <external path="examples/evkmimxrt595/driver_examples/pca9420" type="xml">
            <files mask="pca9420_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_pint_pattern_match" name="pint_pattern_match" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pint" path="examples/evkmimxrt595/driver_examples/pint/pattern_match">
          <external path="examples/evkmimxrt595/driver_examples/pint/pattern_match" type="xml">
            <files mask="pint_pattern_match_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_pint_pin_interrupt" name="pint_pin_interrupt" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pint" path="examples/evkmimxrt595/driver_examples/pint/pin_interrupt">
          <external path="examples/evkmimxrt595/driver_examples/pint/pin_interrupt" type="xml">
            <files mask="pint_pin_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_power_manager" name="power_manager" brief="The power_manager application shows the usage of normal power mode control APIs for entering the four kinds of low power mode: Sleep mode, Deep Sleep mode, Deep Power Down mode and Full Deep Power Down mode. When the application runs to each low power mode, the device would cut off the power for specific modules to save power. The device can be also waken up by prepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin circuit would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions. 1. Configure all pins as GPIO with pull-up resistor disabled in the IOCON block. 2. Configure GPIO pins as outputs using the GPIO DIR register. 3. Write 1 to the GPIO CLR register to drive the outputs LOW. 4. All peripherals disabled." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/evkmimxrt595/demo_apps/power_manager">
          <external path="examples/evkmimxrt595/demo_apps/power_manager" type="xml">
            <files mask="power_manager_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_benchmark_fft" name="powerquad_benchmark_fft" brief="This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_fft to show the PowerQuad performance improvement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_fft">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_fft" type="xml">
            <files mask="powerquad_benchmark_fft_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_benchmark_filter" name="powerquad_benchmark_filter" brief="This example shows the PowerQuad based CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_sw_filter to show the PowerQuad performance improvement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_filter">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_filter" type="xml">
            <files mask="powerquad_benchmark_filter_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_benchmark_math" name="powerquad_benchmark_math" brief="This example shows the PowerQuad based CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_sw_math to show the PowerQuad performance improvement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_math">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_math" type="xml">
            <files mask="powerquad_benchmark_math_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_benchmark_matrix" name="powerquad_benchmark_matrix" brief="This example shows the PowerQuad based CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_sw_matrix to show the PowerQuad performance improvement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_matrix">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_matrix" type="xml">
            <files mask="powerquad_benchmark_matrix_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_benchmark_sw_fft" name="powerquad_benchmark_sw_fft" brief="This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_fft to show the PowerQuad performance improvement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_sw_fft">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_sw_fft" type="xml">
            <files mask="powerquad_benchmark_sw_fft_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_benchmark_sw_filter" name="powerquad_benchmark_sw_filter" brief="This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_filter to show the PowerQuad performance improvement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_sw_filter">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_sw_filter" type="xml">
            <files mask="powerquad_benchmark_sw_filter_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_benchmark_sw_math" name="powerquad_benchmark_sw_math" brief="This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_math to show the PowerQuad performance improvement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_sw_math">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_sw_math" type="xml">
            <files mask="powerquad_benchmark_sw_math_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_benchmark_sw_matrix" name="powerquad_benchmark_sw_matrix" brief="This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_matrix to show the PowerQuad performance improvement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_sw_matrix">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_sw_matrix" type="xml">
            <files mask="powerquad_benchmark_sw_matrix_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_benchmark_vector" name="powerquad_benchmark_vector" brief="This example shows the PowerQuad based CMSIS DSP function performance." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_vector">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/benchmark_vector" type="xml">
            <files mask="powerquad_benchmark_vector_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_cmsis" name="powerquad_cmsis" brief="This example shows how to use powerquad driver CMSIS DSP compatible functions." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/cmsis">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/cmsis" type="xml">
            <files mask="powerquad_cmsis_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_filter" name="powerquad_filter" brief="This example shows how to use powerquad driver filter functions." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/filter">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/filter" type="xml">
            <files mask="powerquad_filter_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_fir_fast" name="powerquad_fir_fast" brief="The PowerQuad fetches data from system RAM and private RAM through different path, for the calcutations which need data from two parts of memory, such as FIR, convolve, correlate, and some matrix operations, place the input data B in private RAM improves the performance. PowerQuad private RAM starts from address 0xe0000000, the first 4KByte is used by PowerQuad driver, the RAM starts from 0xe0001000 could be used by user for optimization. In this example, the FIR taps, convolve input data B, and correlate input data B are not changed, so they are converted to float format and saved to private RAM at the beginning. If the example runs successfully, the performance using optimized method is better than the nornal method." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/fir_fast">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/fir_fast" type="xml">
            <files mask="powerquad_fir_fast_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_math" name="powerquad_math" brief="This example project shows how to use the powerquad driver math functions." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/math">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/math" type="xml">
            <files mask="powerquad_math_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_matrix" name="powerquad_matrix" brief="This example shows how to use powerquad driver matrix functions." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/matrix">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/matrix" type="xml">
            <files mask="powerquad_matrix_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_powerquad_transform" name="powerquad_transform" brief="This example shows how to use powerquad driver transform functions." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/powerquad" path="examples/evkmimxrt595/driver_examples/powerquad/transform">
          <external path="examples/evkmimxrt595/driver_examples/powerquad/transform" type="xml">
            <files mask="powerquad_transform_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_puf" name="puf" brief="This driver example project demonstrates how to use driver for the PUF controller which provides a secure key storage." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/puf" path="examples/evkmimxrt595/driver_examples/puf">
          <external path="examples/evkmimxrt595/driver_examples/puf" type="xml">
            <files mask="puf_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_rtc_example" name="rtc_example" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/rtc" path="examples/evkmimxrt595/driver_examples/rtc">
          <external path="examples/evkmimxrt595/driver_examples/rtc" type="xml">
            <files mask="rtc_example_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_sctimer_16bit_counter" name="sctimer_16bit_counter" brief="The SCTimer 16-bit counter project is a demonstration program of the SDK SCTimer driver operation when using the SCTimer counteras two 16-bit counters.The example toggles an output per counter when a match occurs." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/evkmimxrt595/driver_examples/sctimer/16bit_counter">
          <external path="examples/evkmimxrt595/driver_examples/sctimer/16bit_counter" type="xml">
            <files mask="sctimer_16bit_counter_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_sctimer_multi_state_pwm" name="sctimer_multi_state_pwm" brief="The SCTImer multi-state project is a demonstration program of the SCTimer state machine. It shows how to set up events to be triggered in a certain stateand transitioning between states.State 0 has 2 events that generate a PWM signal, it also has an event linked to an input signal to transition to State 1.State 1 has 4 events that generate 2 PWM signals, it also has an event linked to an input signal to transition to State 0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/evkmimxrt595/driver_examples/sctimer/multi_state_pwm">
          <external path="examples/evkmimxrt595/driver_examples/sctimer/multi_state_pwm" type="xml">
            <files mask="sctimer_multi_state_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_sctimer_pwm_with_dutycyle_change" name="sctimer_pwm_with_dutycyle_change" brief="This SCTIMer project is a demonstration program of the SDK SCTimer driver's PWM generation. It sets up a PWM signaland periodically updates the PWM signals dutycycle." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/evkmimxrt595/driver_examples/sctimer/pwm_with_dutycyle_change">
          <external path="examples/evkmimxrt595/driver_examples/sctimer/pwm_with_dutycyle_change" type="xml">
            <files mask="sctimer_pwm_with_dutycyle_change_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_sctimer_simple_pwm" name="sctimer_simple_pwm" brief="The SCTimer project is a simple demonstration program of the SDK SCTimer's driver capabiltiy to generate PWM signals." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/evkmimxrt595/driver_examples/sctimer/simple_pwm">
          <external path="examples/evkmimxrt595/driver_examples/sctimer/simple_pwm" type="xml">
            <files mask="sctimer_simple_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_sdcard_freertos" name="sdcard_freertos" brief="The SDCARD FreeRTOS project is a demonstration program that uses the SDK software. It reads/writes/erases the SD card continusly. The purpose of this example is to show how to use SDCARD driver with FreeRTOS in SDK software to access SD card.Note: If DATA3 is used as the card detect PIN, please make sure DATA3 is pull down, no matter internal or external, at the same time, make sure the card can pull DATA3 up, then host can detect card through DATA3.And SDHC do not support detect card through CD by host, card can be detected through DATA3 or GPIO.No matter detect card through host or gpio, make sure the pinmux configuration is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/sdcard_freertos" path="examples/evkmimxrt595/sdmmc_examples/sdcard_freertos">
          <external path="examples/evkmimxrt595/sdmmc_examples/sdcard_freertos" type="xml">
            <files mask="sdcard_freertos_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_sdcard_interrupt" name="sdcard_interrupt" brief="The SDCARD Interrupt project is a demonstration program that uses the SDK software. It reads/writes/erases the SD card continusly. The purpose of this example is to show how to use SDCARD driver andshow how to use interrupt based transfer API in SDHC driver in SDK software to access SD card.Note: If DATA3 is used as the card detect PIN, please make sure DATA3 is pull down, no matter internal or external, at the same time, make sure the card can pull DATA3 up, then host can detect card through DATA3.And SDHC do not support detect card through CD by host, card can be detected through DATA3 or GPIO.No matter detect card through host or gpio, make sure the pinmux configuration is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/sdcard_interrupt" path="examples/evkmimxrt595/sdmmc_examples/sdcard_interrupt">
          <external path="examples/evkmimxrt595/sdmmc_examples/sdcard_interrupt" type="xml">
            <files mask="sdcard_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_sdcard_polling" name="sdcard_polling" brief="The SDCARD Polling project is a demonstration program that uses the SDK software. It reads/writes/erases the SD card continusly. The purpose of this example is to show how to use SDCARD driver andshow how to use polling based transfer API in SDHC driver in SDK software to access SD card.Note: If DATA3 is used as the card detect PIN, please make sure DATA3 is pull down, no matter internal or external, at the same time, make sure the card can pull DATA3 up, then host can detect card through DATA3.And SDHC do not support detect card through CD by host, card can be detected through DATA3 or GPIO.No matter detect card through host or gpio, make sure the pinmux configuration is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/sdcard_polling" path="examples/evkmimxrt595/sdmmc_examples/sdcard_polling">
          <external path="examples/evkmimxrt595/sdmmc_examples/sdcard_polling" type="xml">
            <files mask="sdcard_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_sdio" name="sdio" brief="The SDIO project is a demonstration program that uses the SDK software. It reads/writes the SDIO card reigister. The purpose of this example is to show how to use SDio driver and this is a very simple example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples" path="examples/evkmimxrt595/sdmmc_examples/sdio">
          <external path="examples/evkmimxrt595/sdmmc_examples/sdio" type="xml">
            <files mask="sdio_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_sdio_freertos" name="sdio_freertos" brief="The SDIO FREERTOS project is a demonstration program that uses the SDK software. It reads/writes the SDIO card reigister. The purpose of this example is to show how to use SDio driver with freertos." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/sdio_freertos" path="examples/evkmimxrt595/sdmmc_examples/sdio_freertos">
          <external path="examples/evkmimxrt595/sdmmc_examples/sdio_freertos" type="xml">
            <files mask="sdio_freertos_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/evkmimxrt595/demo_apps/shell">
          <external path="examples/evkmimxrt595/demo_apps/shell" type="xml">
            <files mask="shell_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_spi_dma_b2b_transfer_master" name="spi_dma_b2b_transfer_master" brief="The spi_dma_b2b_transfer_master example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from slave is correct. This example needs to work with spi_dma_b2b_transfer_slave example.Note: This example will run in master mode, please prepare another board for slave, and the slave       board should be started first.Project Information1.How to set the baudrate of SPI?  The baudrate of SPI is easy to set, just make sure the source clock of SPI." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/evkmimxrt595/driver_examples/spi/dma_b2b_transfer/master">
          <external path="examples/evkmimxrt595/driver_examples/spi/dma_b2b_transfer/master" type="xml">
            <files mask="spi_dma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_spi_dma_b2b_transfer_slave" name="spi_dma_b2b_transfer_slave" brief="The spi_dma_b2b_transfer_slave example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from master is correct. This example needs to work with spi_dma_b2b_transfer_master example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/evkmimxrt595/driver_examples/spi/dma_b2b_transfer/slave">
          <external path="examples/evkmimxrt595/driver_examples/spi/dma_b2b_transfer/slave" type="xml">
            <files mask="spi_dma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_spi_interrupt_b2b_master" name="spi_interrupt_b2b_master" brief="The spi_interrupt_b2b_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and checkif the data master received is correct. This example needs to work with spi_interrupt_b2b_slave example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/evkmimxrt595/driver_examples/spi/interrupt_b2b/master">
          <external path="examples/evkmimxrt595/driver_examples/spi/interrupt_b2b/master" type="xml">
            <files mask="spi_interrupt_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_spi_interrupt_b2b_slave" name="spi_interrupt_b2b_slave" brief="The spi_interrupt_b2b_slave example shows how to use spi functional API to do interrupt transfer as a slave:In this example, the spi instance as slave. Slave receives data froma master and send a peiece of data to master,and check if the data slave received is correct. This example needs to work with spi_interrupt_b2b_master example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/evkmimxrt595/driver_examples/spi/interrupt_b2b/slave">
          <external path="examples/evkmimxrt595/driver_examples/spi/interrupt_b2b/slave" type="xml">
            <files mask="spi_interrupt_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_spi_interrupt_b2b_transfer_master" name="spi_interrupt_b2b_transfer_master" brief="The spi_interrupt_board2board_master example shows how to use spi driver as master to do board to board transfer withinterrupt:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/evkmimxrt595/driver_examples/spi/interrupt_b2b_transfer/master">
          <external path="examples/evkmimxrt595/driver_examples/spi/interrupt_b2b_transfer/master" type="xml">
            <files mask="spi_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_spi_interrupt_b2b_transfer_slave" name="spi_interrupt_b2b_transfer_slave" brief="The spi_interrupt_board2board_slave example shows how to use spi driver as slave to do board to board transfer with interrupt:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/evkmimxrt595/driver_examples/spi/interrupt_b2b_transfer/slave">
          <external path="examples/evkmimxrt595/driver_examples/spi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="spi_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_spi_polling_b2b_transfer_master" name="spi_polling_b2b_transfer_master" brief="The spi_polling_board2board_master example shows how to use spi driver as master to do board to board transfer with polling:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/evkmimxrt595/driver_examples/spi/polling_b2b_transfer/master">
          <external path="examples/evkmimxrt595/driver_examples/spi/polling_b2b_transfer/master" type="xml">
            <files mask="spi_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_spi_polling_b2b_transfer_slave" name="spi_polling_b2b_transfer_slave" brief="The spi_polling_board2board_slave example shows how to use spi driver as slave to do board to board transfer withpolling:Notice: The SPI slave of this example uses interrupt mode, as there is no polling mode for SPI slave.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/evkmimxrt595/driver_examples/spi/polling_b2b_transfer/slave">
          <external path="examples/evkmimxrt595/driver_examples/spi/polling_b2b_transfer/slave" type="xml">
            <files mask="spi_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_clockout" name="clockout" brief="The syscon_clockout driver example shows how to output the internal clock signal. In this driver example, users can choose the clock signal to be outputted, and the divider of the output clock signal. By probe the output pin, users can observe the selected internal clock signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/syscon" path="examples/evkmimxrt595/driver_examples/clockout">
          <external path="examples/evkmimxrt595/driver_examples/clockout" type="xml">
            <files mask="clockout_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_trng_random" name="trng_random" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/trng" path="examples/evkmimxrt595/driver_examples/trng/random">
          <external path="examples/evkmimxrt595/driver_examples/trng/random" type="xml">
            <files mask="trng_random_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_usart_dma_double_buffer_transfer" name="usart_dma_double_buffer_transfer" brief="This example shows how to use the DMA driver to implement a double buffer receive scheme from the USARTThe example shows the double buffer constructed using two descriptors (g_pingpong_desc). These descriptors are cycled from one to the other.Things to note- The descriptors of the ping pong transfer need to be aligned to size 16- The inital transfer will perform the same job as first descriptor of ping pong, so the first linkeage is to go to g_pingpong_desc[1]- g_pingpong_desc[1] then chains the g_pingpong_desc[0] as the next descriptor- The properties are set up such that g_pingpong_desc[0] (and the initial configuration uses INTA to signal back to the callback)- g_pingpong_desc[1] uses INTB to signal to the callback- The scheduled callback uses this information to know which data was last writtenA note on PerformanceThe intent of this example is to illustrate how a double-buffer scheme can be implemented using the dma. The performance of this example will be limited to how quickly the echo printer can read-out the data from the ping pong buffer and display it. This means that the example will work well if characters are entered at a rate where the DMA callback to echo the string can keep up with the input stream. Connecting the USARTRX to a continuous fast speed will cause the DMA to fall behind. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/evkmimxrt595/driver_examples/usart/dma_double_buffer_transfer">
          <external path="examples/evkmimxrt595/driver_examples/usart/dma_double_buffer_transfer" type="xml">
            <files mask="usart_dma_double_buffer_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_usart_dma_low_power" name="usart_dma_low_power" brief="The usart_dma_low_power example shows how to use usart to wake up the system in low power modes, and how to wake up for DMA only. In this example, one usart instance connects to PC through usart, the board will start receiving characters from PC and then go into low power mode. Each character from PC will only wake up the DMA but the CPU keeps in low power mode. Once 8 characters were received, system will be woken up and echo the characters to PC." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/evkmimxrt595/driver_examples/usart/dma_low_power">
          <external path="examples/evkmimxrt595/driver_examples/usart/dma_low_power" type="xml">
            <files mask="usart_dma_low_power_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_usart_dma_transfer" name="usart_dma_transfer" brief="The usart_dma example shows how to use usart driver with DMA:In this example, one usart instance connect to PC through usart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/evkmimxrt595/driver_examples/usart/dma_transfer">
          <external path="examples/evkmimxrt595/driver_examples/usart/dma_transfer" type="xml">
            <files mask="usart_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_usart_interrupt" name="usart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/evkmimxrt595/driver_examples/usart/interrupt">
          <external path="examples/evkmimxrt595/driver_examples/usart/interrupt" type="xml">
            <files mask="usart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_usart_interrupt_rb_transfer" name="usart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/evkmimxrt595/driver_examples/usart/interrupt_rb_transfer">
          <external path="examples/evkmimxrt595/driver_examples/usart/interrupt_rb_transfer" type="xml">
            <files mask="usart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_usart_interrupt_transfer" name="usart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/evkmimxrt595/driver_examples/usart/interrupt_transfer">
          <external path="examples/evkmimxrt595/driver_examples/usart/interrupt_transfer" type="xml">
            <files mask="usart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_usart_polling" name="usart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/evkmimxrt595/driver_examples/usart/polling">
          <external path="examples/evkmimxrt595/driver_examples/usart/polling" type="xml">
            <files mask="usart_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_utick" name="utick" brief="The utick project is a simple demonstration program of the SDK utick driver. It sets up the utick hardware block to trigger a periodic interrupt after every 1 second. When the utick interrupt is triggered a message is printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/utick" path="examples/evkmimxrt595/driver_examples/utick">
          <external path="examples/evkmimxrt595/driver_examples/utick" type="xml">
            <files mask="utick_v3_8.xml"/>
          </external>
        </example>
        <example id="evkmimxrt595_wwdt_example" name="wwdt_example" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 5 times of refreshing the watchdog, a timeout reset is generated." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/wwdt" path="examples/evkmimxrt595/driver_examples/wwdt">
          <external path="examples/evkmimxrt595/driver_examples/wwdt" type="xml">
            <files mask="wwdt_example_v3_8.xml"/>
          </external>
        </example>
      </examples>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <drivers>
            <driver id_refs="QSPI_FLASH_evkmimxrt595">
              <driverBinary path="core/devices/MIMXRT595S/mcuxpresso" type="binary">
                <files mask="MIMXRT500_SFDP_MXIC_OSPI.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
    </board>
  </boards>
  <devices>
    <device id="MIMXRT595S" name="MIMXRT595S" version="1.0.0" full_name="MIMXRT595S" family="MIMXRT500" platform="i.MX">
      <description>MIMXRT595S: i.MX® MIMXRT595S 200MHz, 5M SRAM Microcontrollers (MCUs) based on ARM® Cortex®-M33 Core</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
        <metadata key="compatible_device.segger" value="MIMXRT595S_M33"/>
        <metadata key="compatible_device.pemicro" value="MIMXRT595S"/>
        <metadata key="vendor.device.multicore" value="true"/>
      </metadataSet>
      <core id="cm33_MIMXRT595S" name="cm33" fpu="true" type="cm33" boot_role="primary" dsp="true"/>
      <memory>
        <memoryBlock id="SRAM_MIMXRT595S" name="SRAM" addr="00080000" size="00280000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_ROM_MIMXRT595S" name="SRAM_ROM" addr="00000000" size="00020000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_SHARED_MIMXRT595S" name="SRAM_SHARED" addr="00020000" size="00060000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_DSP_MIMXRT595S" name="SRAM_DSP" addr="00300000" size="00200000" type="RAM" access="RW"/>
        <memoryBlock id="USB_RAM_MIMXRT595S" name="USB_RAM" addr="40140000" size="00004000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="0" ram_size_kb="5120"/>
      <package id="MIMXRT595SFFOC" name="MIMXRT595SFFOC"/>
      <package id="MIMXRT595SFAWC" name="MIMXRT595SFAWC"/>
      <evaluation_boards>
        <evaluation_board name="evkmimxrt595"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MIMXRT595S" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MIMXRT595S" name="internal.has_swo" value="true"/>
            <params id="misc.options.MIMXRT595S" name="misc.options" value="--bootromstall 0x50002034"/>
            <params id="internal.connect.script.debug.mcuxpresso.MIMXRT595S" name="internal.connect.script" value="RT500_connect.scp"/>
          </params>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.evkmimxrt595.MIMXRT595S" name="evkmimxrt595" brief="Board_project_template evkmimxrt595" version="1.0.0" full_name="Board_project_template evkmimxrt595" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/evkmimxrt595/project_template" project_base_path="board">
      <defines>
        <define name="FSL_SDK_DRIVER_QUICK_ACCESS_ENABLE" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm_usart.MIMXRT595S"/>
          <component_dependency value="component.usart_adapter.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_iopctl.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_gpio.MIMXRT595S"/>
          <component_dependency value="platform.drivers.reset.MIMXRT595S"/>
          <component_dependency value="device.MIMXRT595S_startup.MIMXRT595S"/>
          <component_dependency value="platform.drivers.cache_cache64.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.clock.MIMXRT595S"/>
          <component_dependency value="platform.drivers.power.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flash_config.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexspi.MIMXRT595S"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MIMXRT595S"/>
              <component_dependency value="component.serial_manager.MIMXRT595S"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MIMXRT595S"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_DSP_Library.MIMXRT595S" name="CMSIS_DSP_Library" brief="CMSIS-DSP Library for Cortex-M, SC000, and SC300" version="1.7.0" full_name="CMSIS DSP Library" devices="MIMXRT595S" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/DSP" project_base_path="CMSIS/DSP">
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="Lib/GCC" project_relative_path="./" type="lib" device_cores="cm33_MIMXRT595S">
        <files mask="libarm_ARMv8MMLldfsp_math.a"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="CMSIS_DSP_Library.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_DSP_Source.MIMXRT595S" name="CMSIS_DSP_Library_Source" brief="CMSIS-DSP Library for Cortex-M, SC000, and SC300" version="1.7.0" full_name="CMSIS DSP Library Source" devices="MIMXRT595S" user_visible="true" type="CMSIS_driver" package_base_path="core/CMSIS/DSP" project_base_path="CMSIS/DSP">
      <source relative_path="Include" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source relative_path="Source/BasicMathFunctions" type="src">
        <files mask="BasicMathFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/BasicMathFunctions" type="src">
        <files mask="arm_abs_f32.c" hidden="true"/>
        <files mask="arm_abs_q15.c" hidden="true"/>
        <files mask="arm_abs_q31.c" hidden="true"/>
        <files mask="arm_abs_q7.c" hidden="true"/>
        <files mask="arm_add_f32.c" hidden="true"/>
        <files mask="arm_add_q15.c" hidden="true"/>
        <files mask="arm_add_q31.c" hidden="true"/>
        <files mask="arm_add_q7.c" hidden="true"/>
        <files mask="arm_dot_prod_f32.c" hidden="true"/>
        <files mask="arm_dot_prod_q15.c" hidden="true"/>
        <files mask="arm_dot_prod_q31.c" hidden="true"/>
        <files mask="arm_dot_prod_q7.c" hidden="true"/>
        <files mask="arm_mult_f32.c" hidden="true"/>
        <files mask="arm_mult_q15.c" hidden="true"/>
        <files mask="arm_mult_q31.c" hidden="true"/>
        <files mask="arm_mult_q7.c" hidden="true"/>
        <files mask="arm_negate_f32.c" hidden="true"/>
        <files mask="arm_negate_q15.c" hidden="true"/>
        <files mask="arm_negate_q31.c" hidden="true"/>
        <files mask="arm_negate_q7.c" hidden="true"/>
        <files mask="arm_offset_f32.c" hidden="true"/>
        <files mask="arm_offset_q15.c" hidden="true"/>
        <files mask="arm_offset_q31.c" hidden="true"/>
        <files mask="arm_offset_q7.c" hidden="true"/>
        <files mask="arm_scale_f32.c" hidden="true"/>
        <files mask="arm_scale_q15.c" hidden="true"/>
        <files mask="arm_scale_q31.c" hidden="true"/>
        <files mask="arm_scale_q7.c" hidden="true"/>
        <files mask="arm_shift_q15.c" hidden="true"/>
        <files mask="arm_shift_q31.c" hidden="true"/>
        <files mask="arm_shift_q7.c" hidden="true"/>
        <files mask="arm_sub_f32.c" hidden="true"/>
        <files mask="arm_sub_q15.c" hidden="true"/>
        <files mask="arm_sub_q31.c" hidden="true"/>
        <files mask="arm_sub_q7.c" hidden="true"/>
      </source>
      <source relative_path="Source/CommonTables" type="src">
        <files mask="CommonTables.c"/>
      </source>
      <source exclude="true" relative_path="Source/CommonTables" type="src">
        <files mask="arm_common_tables.c" hidden="true"/>
        <files mask="arm_const_structs.c" hidden="true"/>
      </source>
      <source relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="ComplexMathFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/ComplexMathFunctions" type="src">
        <files mask="arm_cmplx_conj_f32.c" hidden="true"/>
        <files mask="arm_cmplx_conj_q15.c" hidden="true"/>
        <files mask="arm_cmplx_conj_q31.c" hidden="true"/>
        <files mask="arm_cmplx_dot_prod_f32.c" hidden="true"/>
        <files mask="arm_cmplx_dot_prod_q15.c" hidden="true"/>
        <files mask="arm_cmplx_dot_prod_q31.c" hidden="true"/>
        <files mask="arm_cmplx_mag_f32.c" hidden="true"/>
        <files mask="arm_cmplx_mag_q15.c" hidden="true"/>
        <files mask="arm_cmplx_mag_q31.c" hidden="true"/>
        <files mask="arm_cmplx_mag_squared_f32.c" hidden="true"/>
        <files mask="arm_cmplx_mag_squared_q15.c" hidden="true"/>
        <files mask="arm_cmplx_mag_squared_q31.c" hidden="true"/>
        <files mask="arm_cmplx_mult_cmplx_f32.c" hidden="true"/>
        <files mask="arm_cmplx_mult_cmplx_q15.c" hidden="true"/>
        <files mask="arm_cmplx_mult_cmplx_q31.c" hidden="true"/>
        <files mask="arm_cmplx_mult_real_f32.c" hidden="true"/>
        <files mask="arm_cmplx_mult_real_q15.c" hidden="true"/>
        <files mask="arm_cmplx_mult_real_q31.c" hidden="true"/>
      </source>
      <source relative_path="Source/ControllerFunctions" type="src">
        <files mask="ControllerFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/ControllerFunctions" type="src">
        <files mask="arm_pid_init_f32.c" hidden="true"/>
        <files mask="arm_pid_init_q15.c" hidden="true"/>
        <files mask="arm_pid_init_q31.c" hidden="true"/>
        <files mask="arm_pid_reset_f32.c" hidden="true"/>
        <files mask="arm_pid_reset_q15.c" hidden="true"/>
        <files mask="arm_pid_reset_q31.c" hidden="true"/>
        <files mask="arm_sin_cos_f32.c" hidden="true"/>
        <files mask="arm_sin_cos_q31.c" hidden="true"/>
      </source>
      <source relative_path="Source/FastMathFunctions" type="src">
        <files mask="FastMathFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/FastMathFunctions" type="src">
        <files mask="arm_cos_f32.c" hidden="true"/>
        <files mask="arm_cos_q15.c" hidden="true"/>
        <files mask="arm_cos_q31.c" hidden="true"/>
        <files mask="arm_sin_f32.c" hidden="true"/>
        <files mask="arm_sin_q15.c" hidden="true"/>
        <files mask="arm_sin_q31.c" hidden="true"/>
        <files mask="arm_sqrt_q15.c" hidden="true"/>
        <files mask="arm_sqrt_q31.c" hidden="true"/>
      </source>
      <source relative_path="Source/FilteringFunctions" type="src">
        <files mask="FilteringFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/FilteringFunctions" type="src">
        <files mask="arm_biquad_cascade_df1_32x64_init_q31.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df1_32x64_q31.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df1_f32.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df1_fast_q15.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df1_fast_q31.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df1_init_f32.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df1_init_q15.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df1_init_q31.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df1_q15.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df1_q31.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df2T_f32.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df2T_f64.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df2T_init_f32.c" hidden="true"/>
        <files mask="arm_biquad_cascade_df2T_init_f64.c" hidden="true"/>
        <files mask="arm_biquad_cascade_stereo_df2T_f32.c" hidden="true"/>
        <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c" hidden="true"/>
        <files mask="arm_conv_f32.c" hidden="true"/>
        <files mask="arm_conv_fast_opt_q15.c" hidden="true"/>
        <files mask="arm_conv_fast_q15.c" hidden="true"/>
        <files mask="arm_conv_fast_q31.c" hidden="true"/>
        <files mask="arm_conv_opt_q15.c" hidden="true"/>
        <files mask="arm_conv_opt_q7.c" hidden="true"/>
        <files mask="arm_conv_partial_f32.c" hidden="true"/>
        <files mask="arm_conv_partial_fast_opt_q15.c" hidden="true"/>
        <files mask="arm_conv_partial_fast_q15.c" hidden="true"/>
        <files mask="arm_conv_partial_fast_q31.c" hidden="true"/>
        <files mask="arm_conv_partial_opt_q15.c" hidden="true"/>
        <files mask="arm_conv_partial_opt_q7.c" hidden="true"/>
        <files mask="arm_conv_partial_q15.c" hidden="true"/>
        <files mask="arm_conv_partial_q31.c" hidden="true"/>
        <files mask="arm_conv_partial_q7.c" hidden="true"/>
        <files mask="arm_conv_q15.c" hidden="true"/>
        <files mask="arm_conv_q31.c" hidden="true"/>
        <files mask="arm_conv_q7.c" hidden="true"/>
        <files mask="arm_correlate_f32.c" hidden="true"/>
        <files mask="arm_correlate_fast_opt_q15.c" hidden="true"/>
        <files mask="arm_correlate_fast_q15.c" hidden="true"/>
        <files mask="arm_correlate_fast_q31.c" hidden="true"/>
        <files mask="arm_correlate_opt_q15.c" hidden="true"/>
        <files mask="arm_correlate_opt_q7.c" hidden="true"/>
        <files mask="arm_correlate_q15.c" hidden="true"/>
        <files mask="arm_correlate_q31.c" hidden="true"/>
        <files mask="arm_correlate_q7.c" hidden="true"/>
        <files mask="arm_fir_decimate_f32.c" hidden="true"/>
        <files mask="arm_fir_decimate_fast_q15.c" hidden="true"/>
        <files mask="arm_fir_decimate_fast_q31.c" hidden="true"/>
        <files mask="arm_fir_decimate_init_f32.c" hidden="true"/>
        <files mask="arm_fir_decimate_init_q15.c" hidden="true"/>
        <files mask="arm_fir_decimate_init_q31.c" hidden="true"/>
        <files mask="arm_fir_decimate_q15.c" hidden="true"/>
        <files mask="arm_fir_decimate_q31.c" hidden="true"/>
        <files mask="arm_fir_f32.c" hidden="true"/>
        <files mask="arm_fir_fast_q15.c" hidden="true"/>
        <files mask="arm_fir_fast_q31.c" hidden="true"/>
        <files mask="arm_fir_init_f32.c" hidden="true"/>
        <files mask="arm_fir_init_q15.c" hidden="true"/>
        <files mask="arm_fir_init_q31.c" hidden="true"/>
        <files mask="arm_fir_init_q7.c" hidden="true"/>
        <files mask="arm_fir_interpolate_f32.c" hidden="true"/>
        <files mask="arm_fir_interpolate_init_f32.c" hidden="true"/>
        <files mask="arm_fir_interpolate_init_q15.c" hidden="true"/>
        <files mask="arm_fir_interpolate_init_q31.c" hidden="true"/>
        <files mask="arm_fir_interpolate_q15.c" hidden="true"/>
        <files mask="arm_fir_interpolate_q31.c" hidden="true"/>
        <files mask="arm_fir_lattice_f32.c" hidden="true"/>
        <files mask="arm_fir_lattice_init_f32.c" hidden="true"/>
        <files mask="arm_fir_lattice_init_q15.c" hidden="true"/>
        <files mask="arm_fir_lattice_init_q31.c" hidden="true"/>
        <files mask="arm_fir_lattice_q15.c" hidden="true"/>
        <files mask="arm_fir_lattice_q31.c" hidden="true"/>
        <files mask="arm_fir_q15.c" hidden="true"/>
        <files mask="arm_fir_q31.c" hidden="true"/>
        <files mask="arm_fir_q7.c" hidden="true"/>
        <files mask="arm_fir_sparse_f32.c" hidden="true"/>
        <files mask="arm_fir_sparse_init_f32.c" hidden="true"/>
        <files mask="arm_fir_sparse_init_q15.c" hidden="true"/>
        <files mask="arm_fir_sparse_init_q31.c" hidden="true"/>
        <files mask="arm_fir_sparse_init_q7.c" hidden="true"/>
        <files mask="arm_fir_sparse_q15.c" hidden="true"/>
        <files mask="arm_fir_sparse_q31.c" hidden="true"/>
        <files mask="arm_fir_sparse_q7.c" hidden="true"/>
        <files mask="arm_iir_lattice_f32.c" hidden="true"/>
        <files mask="arm_iir_lattice_init_f32.c" hidden="true"/>
        <files mask="arm_iir_lattice_init_q15.c" hidden="true"/>
        <files mask="arm_iir_lattice_init_q31.c" hidden="true"/>
        <files mask="arm_iir_lattice_q15.c" hidden="true"/>
        <files mask="arm_iir_lattice_q31.c" hidden="true"/>
        <files mask="arm_lms_f32.c" hidden="true"/>
        <files mask="arm_lms_init_f32.c" hidden="true"/>
        <files mask="arm_lms_init_q15.c" hidden="true"/>
        <files mask="arm_lms_init_q31.c" hidden="true"/>
        <files mask="arm_lms_norm_f32.c" hidden="true"/>
        <files mask="arm_lms_norm_init_f32.c" hidden="true"/>
        <files mask="arm_lms_norm_init_q15.c" hidden="true"/>
        <files mask="arm_lms_norm_init_q31.c" hidden="true"/>
        <files mask="arm_lms_norm_q15.c" hidden="true"/>
        <files mask="arm_lms_norm_q31.c" hidden="true"/>
        <files mask="arm_lms_q15.c" hidden="true"/>
        <files mask="arm_lms_q31.c" hidden="true"/>
      </source>
      <source relative_path="Source/MatrixFunctions" type="src">
        <files mask="MatrixFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/MatrixFunctions" type="src">
        <files mask="arm_mat_add_f32.c" hidden="true"/>
        <files mask="arm_mat_add_q15.c" hidden="true"/>
        <files mask="arm_mat_add_q31.c" hidden="true"/>
        <files mask="arm_mat_cmplx_mult_f32.c" hidden="true"/>
        <files mask="arm_mat_cmplx_mult_q15.c" hidden="true"/>
        <files mask="arm_mat_cmplx_mult_q31.c" hidden="true"/>
        <files mask="arm_mat_init_f32.c" hidden="true"/>
        <files mask="arm_mat_init_q15.c" hidden="true"/>
        <files mask="arm_mat_init_q31.c" hidden="true"/>
        <files mask="arm_mat_inverse_f32.c" hidden="true"/>
        <files mask="arm_mat_inverse_f64.c" hidden="true"/>
        <files mask="arm_mat_mult_f32.c" hidden="true"/>
        <files mask="arm_mat_mult_fast_q15.c" hidden="true"/>
        <files mask="arm_mat_mult_fast_q31.c" hidden="true"/>
        <files mask="arm_mat_mult_q15.c" hidden="true"/>
        <files mask="arm_mat_mult_q31.c" hidden="true"/>
        <files mask="arm_mat_scale_f32.c" hidden="true"/>
        <files mask="arm_mat_scale_q15.c" hidden="true"/>
        <files mask="arm_mat_scale_q31.c" hidden="true"/>
        <files mask="arm_mat_sub_f32.c" hidden="true"/>
        <files mask="arm_mat_sub_q15.c" hidden="true"/>
        <files mask="arm_mat_sub_q31.c" hidden="true"/>
        <files mask="arm_mat_trans_f32.c" hidden="true"/>
        <files mask="arm_mat_trans_q15.c" hidden="true"/>
        <files mask="arm_mat_trans_q31.c" hidden="true"/>
      </source>
      <source relative_path="Source/StatisticsFunctions" type="src">
        <files mask="StatisticsFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/StatisticsFunctions" type="src">
        <files mask="arm_max_f32.c" hidden="true"/>
        <files mask="arm_max_q15.c" hidden="true"/>
        <files mask="arm_max_q31.c" hidden="true"/>
        <files mask="arm_max_q7.c" hidden="true"/>
        <files mask="arm_mean_f32.c" hidden="true"/>
        <files mask="arm_mean_q15.c" hidden="true"/>
        <files mask="arm_mean_q31.c" hidden="true"/>
        <files mask="arm_mean_q7.c" hidden="true"/>
        <files mask="arm_min_f32.c" hidden="true"/>
        <files mask="arm_min_q15.c" hidden="true"/>
        <files mask="arm_min_q31.c" hidden="true"/>
        <files mask="arm_min_q7.c" hidden="true"/>
        <files mask="arm_power_f32.c" hidden="true"/>
        <files mask="arm_power_q15.c" hidden="true"/>
        <files mask="arm_power_q31.c" hidden="true"/>
        <files mask="arm_power_q7.c" hidden="true"/>
        <files mask="arm_rms_f32.c" hidden="true"/>
        <files mask="arm_rms_q15.c" hidden="true"/>
        <files mask="arm_rms_q31.c" hidden="true"/>
        <files mask="arm_std_f32.c" hidden="true"/>
        <files mask="arm_std_q15.c" hidden="true"/>
        <files mask="arm_std_q31.c" hidden="true"/>
        <files mask="arm_var_f32.c" hidden="true"/>
        <files mask="arm_var_q15.c" hidden="true"/>
        <files mask="arm_var_q31.c" hidden="true"/>
      </source>
      <source relative_path="Source/SupportFunctions" type="src">
        <files mask="SupportFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/SupportFunctions" type="src">
        <files mask="arm_copy_f32.c" hidden="true"/>
        <files mask="arm_copy_q15.c" hidden="true"/>
        <files mask="arm_copy_q31.c" hidden="true"/>
        <files mask="arm_copy_q7.c" hidden="true"/>
        <files mask="arm_fill_f32.c" hidden="true"/>
        <files mask="arm_fill_q15.c" hidden="true"/>
        <files mask="arm_fill_q31.c" hidden="true"/>
        <files mask="arm_fill_q7.c" hidden="true"/>
        <files mask="arm_float_to_q15.c" hidden="true"/>
        <files mask="arm_float_to_q31.c" hidden="true"/>
        <files mask="arm_float_to_q7.c" hidden="true"/>
        <files mask="arm_q15_to_float.c" hidden="true"/>
        <files mask="arm_q15_to_q31.c" hidden="true"/>
        <files mask="arm_q15_to_q7.c" hidden="true"/>
        <files mask="arm_q31_to_float.c" hidden="true"/>
        <files mask="arm_q31_to_q15.c" hidden="true"/>
        <files mask="arm_q31_to_q7.c" hidden="true"/>
        <files mask="arm_q7_to_float.c" hidden="true"/>
        <files mask="arm_q7_to_q15.c" hidden="true"/>
        <files mask="arm_q7_to_q31.c" hidden="true"/>
      </source>
      <source relative_path="Source/TransformFunctions" type="src">
        <files mask="TransformFunctions.c"/>
      </source>
      <source exclude="true" relative_path="Source/TransformFunctions" type="src">
        <files mask="arm_bitreversal.c" hidden="true"/>
        <files mask="arm_bitreversal2.c" hidden="true"/>
        <files mask="arm_cfft_f32.c" hidden="true"/>
        <files mask="arm_cfft_q15.c" hidden="true"/>
        <files mask="arm_cfft_q31.c" hidden="true"/>
        <files mask="arm_cfft_radix2_f32.c" hidden="true"/>
        <files mask="arm_cfft_radix2_init_f32.c" hidden="true"/>
        <files mask="arm_cfft_radix2_init_q15.c" hidden="true"/>
        <files mask="arm_cfft_radix2_init_q31.c" hidden="true"/>
        <files mask="arm_cfft_radix2_q15.c" hidden="true"/>
        <files mask="arm_cfft_radix2_q31.c" hidden="true"/>
        <files mask="arm_cfft_radix4_f32.c" hidden="true"/>
        <files mask="arm_cfft_radix4_init_f32.c" hidden="true"/>
        <files mask="arm_cfft_radix4_init_q15.c" hidden="true"/>
        <files mask="arm_cfft_radix4_init_q31.c" hidden="true"/>
        <files mask="arm_cfft_radix4_q15.c" hidden="true"/>
        <files mask="arm_cfft_radix4_q31.c" hidden="true"/>
        <files mask="arm_cfft_radix8_f32.c" hidden="true"/>
        <files mask="arm_dct4_f32.c" hidden="true"/>
        <files mask="arm_dct4_init_f32.c" hidden="true"/>
        <files mask="arm_dct4_init_q15.c" hidden="true"/>
        <files mask="arm_dct4_init_q31.c" hidden="true"/>
        <files mask="arm_dct4_q15.c" hidden="true"/>
        <files mask="arm_dct4_q31.c" hidden="true"/>
        <files mask="arm_rfft_f32.c" hidden="true"/>
        <files mask="arm_rfft_fast_f32.c" hidden="true"/>
        <files mask="arm_rfft_fast_init_f32.c" hidden="true"/>
        <files mask="arm_rfft_init_f32.c" hidden="true"/>
        <files mask="arm_rfft_init_q15.c" hidden="true"/>
        <files mask="arm_rfft_init_q31.c" hidden="true"/>
        <files mask="arm_rfft_q15.c" hidden="true"/>
        <files mask="arm_rfft_q31.c" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_OSTick.MIMXRT595S" name="CMSIS_Device_API_OSTick" brief="Device interrupt controller interface" version="1.0.1" full_name="CMSIS Device API OSTick" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <source relative_path="./" type="c_include">
        <files mask="os_tick.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Device_API_RTOS2.MIMXRT595S" name="CMSIS_Device_API_RTOS2" brief="CMSIS-RTOS API for Cortex-M, SC000, and SC300" version="2.1.3" full_name="CMSIS Device API RTOS2" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2/Include" project_base_path="CMSIS/RTOS2/Include">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_os2.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.CAN.MIMXRT595S" name="CMSIS_Driver_CAN" brief="Access to #include Driver_CAN.h file for custom implementation" version="1.2.0" full_name="CMSIS Driver CAN" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Common.MIMXRT595S" name="CMSIS_Driver_Common" brief="Access to #include Driver_Common.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver Common" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet.MIMXRT595S" name="CMSIS_Driver_Ethernet_Common" brief="Access to #include Driver_ETH.h file for custom implementation" version="2.1.0" full_name="CMSIS Driver Ethernet Common" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_MAC.MIMXRT595S" name="CMSIS_Driver_Ethernet_MAC" brief="Access to #include Driver_ETH_MAC.h file for custom implementation" version="2.1.0" full_name="CMSIS Driver Ethernet MAC" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Ethernet.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Ethernet_PHY.MIMXRT595S" name="CMSIS_Driver_Ethernet_PHY" brief="Access to #include Driver_ETH_PHY.h file for custom implementation" version="2.1.0" full_name="CMSIS Driver Ethernet PHY" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Ethernet.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.Flash.MIMXRT595S" name="CMSIS_Driver_Flash" brief="Access to #include Driver_Flash.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver Flash" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.GPIO.MIMXRT595S" name="NXP_CMSIS_Driver_GPIO" brief="NXP Standardized GPIO Driver aligned with CMSIS style." version="2.0.0" full_name="NXP CMSIS Driver GPIO" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.I2C.MIMXRT595S" name="CMSIS_Driver_I2C" brief="Access to #include Driver_I2C.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver I2C" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.MCI.MIMXRT595S" name="CMSIS_Driver_MCI" brief="Access to #include Driver_MCI.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver MCI" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.NAND.MIMXRT595S" name="CMSIS_Driver_NAND" brief="Access to #include Driver_NAND.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver NAND" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SAI.MIMXRT595S" name="CMSIS_Driver_SAI" brief="Access to #include Driver_SAI.h file for custom implementation" version="1.1.0" full_name="CMSIS Driver SAI" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.SPI.MIMXRT595S" name="CMSIS_Driver_SPI" brief="Access to #include Driver_SPI.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver SPI" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USART.MIMXRT595S" name="CMSIS_Driver_USART" brief="Access to #include Driver_USART.h file for custom implementation" version="2.3.0" full_name="CMSIS Driver USART" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB.MIMXRT595S" name="CMSIS_Driver_USB_Common" brief="Access to #include Driver_USB.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver USB Common" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Device.MIMXRT595S" name="CMSIS_Driver_USB_Device" brief="Access to #include Driver_USBD.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver USB Device" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.USB.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.USB_Host.MIMXRT595S" name="CMSIS_Driver_USB_Host" brief="Access to #include Driver_USBH.h file for custom implementation" version="2.2.0" full_name="CMSIS Driver USB Host" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.USB.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Driver_Include.WiFi.MIMXRT595S" name="CMSIS_Driver_WiFi" brief="Access to #include Driver_WiFi.h file" version="1.0.0" full_name="CMSIS Driver WiFi" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="CMSIS_Driver_Include.Common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_Include_core_cm.MIMXRT595S" name="CMSIS_Include_CM" brief="CMSIS-CORE for Cortex-M, ARMv8-M, ARMv8.1-M" version="5.3.0" full_name="CMSIS Include For Cortex-M, ARMv8-M, ARMv8.1-M" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Core/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="cmsis_version.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_MIMXRT595S">
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="tz_context.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="CMSIS_Include_core_cm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_Common.MIMXRT595S" name="CMSIS_RTOS2_Keil_RTX5_Common" brief="CMSIS-RTOS2 RTX5 Common part for Cortex-M, SC000, C300 and Armv8-M (Library)" version="5.5.1" full_name="CMSIS RTOS2 Keil RTX5 Common" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2" project_base_path="CMSIS/RTOS2">
      <dependencies>
        <all>
          <component_dependency value="CMSIS_Device_API_OSTick.MIMXRT595S"/>
          <component_dependency value="CMSIS_Device_API_RTOS2.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="RTX/Source" type="c_include">
        <files mask="rtx_core_c.h"/>
        <files mask="rtx_core_ca.h"/>
        <files mask="rtx_core_cm.h"/>
        <files mask="rtx_lib.h"/>
      </source>
      <source relative_path="RTX/Source" type="src">
        <files mask="rtx_lib.c"/>
      </source>
      <source relative_path="RTX/Include" type="c_include">
        <files mask="rtx_evr.h"/>
        <files mask="rtx_os.h"/>
      </source>
      <source relative_path="RTX/Config" type="src">
        <files mask="RTX_Config.c"/>
      </source>
      <source relative_path="RTX/Config" type="c_include">
        <files mask="RTX_Config.h"/>
      </source>
      <include_paths>
        <include_path relative_path="RTX/Source" type="c_include"/>
        <include_path relative_path="RTX/Include" type="c_include"/>
        <include_path relative_path="RTX/Config" type="c_include"/>
      </include_paths>
    </component>
    <component id="CMSIS_RTOS2_NonSecure.MIMXRT595S" name="CMSIS_RTOS2_Keil_RTX5_NS" brief="CMSIS-RTOS2 RTX5 for Armv8-M Non-Secure Domain (Library)" version="5.5.1" full_name="CMSIS RTOS2 Keil RTX5 Non Secure" devices="MIMXRT595S" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/RTOS2/RTX/Library" project_base_path="CMSIS/RTOS2/RTX/Library">
      <dependencies>
        <component_dependency value="CMSIS_RTOS2_Common.MIMXRT595S"/>
      </dependencies>
      <source toolchain="armgcc mcuxpresso" relative_path="GCC" project_relative_path="./" type="lib" device_cores="cm33_MIMXRT595S">
        <files mask="libRTX_V8MMFN.a"/>
      </source>
    </component>
    <!--<component id="CMSIS_files.MIMXRT595S" name="CMSIS" brief="CMSIS (Cortex Microcontroller Software Interface Standard)" version="5.6.0" full_name="CMSIS" devices="MIMXRT595S" user_visible="false" type="container" package_base_path="core/CMSIS" project_base_path="CMSIS">
  <source relative_path="Driver/Include" type="c_include">
    <files mask="Driver_Storage.h"/>
    <files mask="Driver_USART.h"/>
    <files mask="Driver_USBD.h"/>
    <files mask="Driver_I2C.h"/>
    <files mask="Driver_SPI.h"/>
    <files mask="Driver_USB.h"/>
    <files mask="Driver_WiFi.h"/>
    <files mask="Driver_SAI.h"/>
    <files mask="Driver_Common.h"/>
    <files mask="Driver_NAND.h"/>
    <files mask="Driver_CAN.h"/>
    <files mask="Driver_MCI.h"/>
    <files mask="Driver_ETH_MAC.h"/>
    <files mask="Driver_Flash.h"/>
    <files mask="Driver_USBH.h"/>
    <files mask="Driver_ETH_PHY.h"/>
    <files mask="Driver_ETH.h"/>
    <files mask="Driver_GPIO.h"/>
  </source>
  <source relative_path="Driver/DriverTemplates" type="src">
    <files mask="Driver_SPI.c"/>
    <files mask="Driver_Flash.c"/>
    <files mask="Driver_USART.c"/>
    <files mask="Driver_SAI.c"/>
    <files mask="Driver_Storage.c"/>
    <files mask="Driver_I2C.c"/>
    <files mask="Driver_ETH_PHY.c"/>
    <files mask="Driver_ETH_MAC.c"/>
    <files mask="Driver_CAN.c"/>
    <files mask="Driver_MCI.c"/>
    <files mask="Driver_USBH.c"/>
    <files mask="Driver_USBD.c"/>
  </source>
  <source relative_path="./" type="other">
    <files mask="CMSIS.yml"/>
    <files mask="CMSIS_v2.yml"/>
  </source>
  <source relative_path="./" type="doc">
    <files mask="LICENSE.txt"/>
  </source>
  <source relative_path="DSP/Source/StatisticsFunctions" type="src">
    <files mask="arm_var_q15.c"/>
    <files mask="arm_min_q31.c"/>
    <files mask="arm_mean_f32.c"/>
    <files mask="arm_max_q7.c"/>
    <files mask="arm_max_f32.c"/>
    <files mask="arm_var_f32.c"/>
    <files mask="arm_power_q7.c"/>
    <files mask="arm_rms_f32.c"/>
    <files mask="arm_max_q31.c"/>
    <files mask="arm_max_q15.c"/>
    <files mask="arm_mean_q7.c"/>
    <files mask="arm_power_f32.c"/>
    <files mask="arm_min_q7.c"/>
    <files mask="arm_std_q15.c"/>
    <files mask="arm_min_f32.c"/>
    <files mask="arm_min_q15.c"/>
    <files mask="StatisticsFunctions.c"/>
    <files mask="arm_std_q31.c"/>
    <files mask="arm_rms_q31.c"/>
    <files mask="arm_mean_q15.c"/>
    <files mask="arm_std_f32.c"/>
    <files mask="arm_power_q15.c"/>
    <files mask="arm_mean_q31.c"/>
    <files mask="arm_rms_q15.c"/>
    <files mask="arm_power_q31.c"/>
    <files mask="arm_var_q31.c"/>
  </source>
  <source relative_path="DSP/Source/StatisticsFunctions" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source/FastMathFunctions" type="src">
    <files mask="arm_cos_q31.c"/>
    <files mask="FastMathFunctions.c"/>
    <files mask="arm_sin_q31.c"/>
    <files mask="arm_sqrt_q15.c"/>
    <files mask="arm_cos_q15.c"/>
    <files mask="arm_sin_f32.c"/>
    <files mask="arm_sin_q15.c"/>
    <files mask="arm_cos_f32.c"/>
    <files mask="arm_sqrt_q31.c"/>
  </source>
  <source relative_path="DSP/Source/FastMathFunctions" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source/TransformFunctions" type="src">
    <files mask="arm_cfft_radix2_f32.c"/>
    <files mask="arm_cfft_radix8_f32.c"/>
    <files mask="arm_cfft_radix2_q15.c"/>
    <files mask="arm_cfft_radix4_init_f32.c"/>
    <files mask="arm_cfft_radix4_init_q15.c"/>
    <files mask="arm_cfft_radix2_init_q15.c"/>
    <files mask="arm_rfft_init_f32.c"/>
    <files mask="arm_rfft_fast_f32.c"/>
    <files mask="arm_rfft_init_q31.c"/>
    <files mask="arm_dct4_q15.c"/>
    <files mask="arm_dct4_init_q31.c"/>
    <files mask="arm_cfft_radix2_init_f32.c"/>
    <files mask="arm_dct4_init_q15.c"/>
    <files mask="arm_dct4_q31.c"/>
    <files mask="arm_rfft_q15.c"/>
    <files mask="arm_cfft_radix4_q31.c"/>
    <files mask="arm_cfft_radix2_init_q31.c"/>
    <files mask="TransformFunctions.c"/>
    <files mask="arm_cfft_radix4_q15.c"/>
    <files mask="arm_bitreversal.c"/>
    <files mask="arm_rfft_init_q15.c"/>
    <files mask="arm_rfft_q31.c"/>
    <files mask="arm_bitreversal2.c"/>
    <files mask="arm_rfft_fast_init_f32.c"/>
    <files mask="arm_cfft_radix2_q31.c"/>
    <files mask="arm_dct4_f32.c"/>
    <files mask="arm_cfft_f32.c"/>
    <files mask="arm_rfft_f32.c"/>
    <files mask="arm_cfft_radix4_init_q31.c"/>
    <files mask="arm_cfft_q31.c"/>
    <files mask="arm_cfft_q15.c"/>
    <files mask="arm_cfft_radix4_f32.c"/>
    <files mask="arm_dct4_init_f32.c"/>
  </source>
  <source relative_path="DSP/Source/TransformFunctions" type="asm_include">
    <files mask="arm_bitreversal2.S"/>
  </source>
  <source relative_path="DSP/Source/TransformFunctions" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source/FilteringFunctions" type="src">
    <files mask="arm_iir_lattice_q15.c"/>
    <files mask="arm_iir_lattice_init_q15.c"/>
    <files mask="arm_fir_interpolate_q15.c"/>
    <files mask="arm_correlate_fast_q15.c"/>
    <files mask="arm_lms_norm_init_q15.c"/>
    <files mask="arm_fir_sparse_f32.c"/>
    <files mask="arm_fir_interpolate_f32.c"/>
    <files mask="arm_biquad_cascade_df1_fast_q15.c"/>
    <files mask="arm_iir_lattice_init_q31.c"/>
    <files mask="arm_fir_decimate_q31.c"/>
    <files mask="arm_fir_interpolate_q31.c"/>
    <files mask="arm_fir_decimate_init_f32.c"/>
    <files mask="arm_correlate_fast_opt_q15.c"/>
    <files mask="arm_lms_q31.c"/>
    <files mask="arm_lms_init_f32.c"/>
    <files mask="arm_fir_sparse_q7.c"/>
    <files mask="arm_conv_fast_opt_q15.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_init_f32.c"/>
    <files mask="arm_biquad_cascade_df1_init_q31.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f64.c"/>
    <files mask="arm_iir_lattice_f32.c"/>
    <files mask="arm_fir_lattice_f32.c"/>
    <files mask="arm_conv_partial_opt_q15.c"/>
    <files mask="arm_iir_lattice_q31.c"/>
    <files mask="arm_correlate_fast_q31.c"/>
    <files mask="arm_biquad_cascade_stereo_df2T_f32.c"/>
    <files mask="arm_conv_f32.c"/>
    <files mask="arm_fir_sparse_q15.c"/>
    <files mask="arm_fir_sparse_init_q7.c"/>
    <files mask="arm_biquad_cascade_df1_fast_q31.c"/>
    <files mask="arm_biquad_cascade_df1_init_f32.c"/>
    <files mask="arm_fir_sparse_init_q31.c"/>
    <files mask="arm_fir_sparse_init_q15.c"/>
    <files mask="arm_fir_interpolate_init_q15.c"/>
    <files mask="arm_fir_lattice_q15.c"/>
    <files mask="arm_fir_decimate_init_q15.c"/>
    <files mask="arm_conv_partial_fast_opt_q15.c"/>
    <files mask="arm_fir_q31.c"/>
    <files mask="arm_biquad_cascade_df2T_init_f32.c"/>
    <files mask="arm_conv_fast_q15.c"/>
    <files mask="arm_fir_fast_q15.c"/>
    <files mask="arm_conv_q7.c"/>
    <files mask="arm_fir_q15.c"/>
    <files mask="arm_correlate_q15.c"/>
    <files mask="arm_lms_init_q15.c"/>
    <files mask="arm_conv_q15.c"/>
    <files mask="arm_conv_partial_q7.c"/>
    <files mask="arm_lms_f32.c"/>
    <files mask="arm_lms_norm_q15.c"/>
    <files mask="arm_fir_sparse_init_f32.c"/>
    <files mask="arm_lms_norm_init_q31.c"/>
    <files mask="arm_biquad_cascade_df1_init_q15.c"/>
    <files mask="arm_conv_partial_fast_q15.c"/>
    <files mask="arm_fir_init_f32.c"/>
    <files mask="arm_fir_decimate_f32.c"/>
    <files mask="arm_fir_lattice_init_q15.c"/>
    <files mask="arm_correlate_opt_q15.c"/>
    <files mask="arm_fir_sparse_q31.c"/>
    <files mask="arm_biquad_cascade_df2T_f32.c"/>
    <files mask="arm_fir_init_q7.c"/>
    <files mask="arm_fir_init_q15.c"/>
    <files mask="arm_fir_interpolate_init_f32.c"/>
    <files mask="arm_conv_opt_q7.c"/>
    <files mask="arm_lms_init_q31.c"/>
    <files mask="arm_fir_fast_q31.c"/>
    <files mask="arm_conv_partial_f32.c"/>
    <files mask="arm_biquad_cascade_df1_q15.c"/>
    <files mask="arm_biquad_cascade_df1_32x64_init_q31.c"/>
    <files mask="arm_lms_norm_q31.c"/>
    <files mask="arm_conv_partial_q15.c"/>
    <files mask="arm_conv_opt_q15.c"/>
    <files mask="arm_fir_decimate_q15.c"/>
    <files mask="arm_iir_lattice_init_f32.c"/>
    <files mask="arm_fir_lattice_init_f32.c"/>
    <files mask="arm_fir_decimate_fast_q31.c"/>
    <files mask="arm_fir_f32.c"/>
    <files mask="arm_fir_decimate_init_q31.c"/>
    <files mask="arm_conv_q31.c"/>
    <files mask="arm_lms_norm_f32.c"/>
    <files mask="arm_conv_partial_fast_q31.c"/>
    <files mask="arm_fir_lattice_init_q31.c"/>
    <files mask="arm_fir_init_q31.c"/>
    <files mask="arm_lms_norm_init_f32.c"/>
    <files mask="arm_correlate_opt_q7.c"/>
    <files mask="arm_fir_lattice_q31.c"/>
    <files mask="arm_conv_partial_q31.c"/>
    <files mask="arm_biquad_cascade_df2T_f64.c"/>
    <files mask="arm_biquad_cascade_df1_f32.c"/>
    <files mask="arm_lms_q15.c"/>
    <files mask="arm_correlate_q31.c"/>
    <files mask="arm_correlate_q7.c"/>
    <files mask="arm_fir_q7.c"/>
    <files mask="arm_conv_fast_q31.c"/>
    <files mask="arm_conv_partial_opt_q7.c"/>
    <files mask="arm_fir_decimate_fast_q15.c"/>
    <files mask="arm_fir_interpolate_init_q31.c"/>
    <files mask="arm_biquad_cascade_df1_q31.c"/>
    <files mask="FilteringFunctions.c"/>
    <files mask="arm_correlate_f32.c"/>
    <files mask="arm_biquad_cascade_df1_32x64_q31.c"/>
  </source>
  <source relative_path="DSP/Source/FilteringFunctions" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source/ControllerFunctions" type="src">
    <files mask="arm_sin_cos_f32.c"/>
    <files mask="ControllerFunctions.c"/>
    <files mask="arm_pid_reset_q31.c"/>
    <files mask="arm_pid_init_q15.c"/>
    <files mask="arm_sin_cos_q31.c"/>
    <files mask="arm_pid_reset_f32.c"/>
    <files mask="arm_pid_reset_q15.c"/>
    <files mask="arm_pid_init_f32.c"/>
    <files mask="arm_pid_init_q31.c"/>
  </source>
  <source relative_path="DSP/Source/ControllerFunctions" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source/MatrixFunctions" type="src">
    <files mask="arm_mat_mult_f32.c"/>
    <files mask="arm_mat_mult_fast_q31.c"/>
    <files mask="arm_mat_init_q15.c"/>
    <files mask="arm_mat_mult_fast_q15.c"/>
    <files mask="arm_mat_trans_q15.c"/>
    <files mask="arm_mat_cmplx_mult_q31.c"/>
    <files mask="arm_mat_mult_q31.c"/>
    <files mask="arm_mat_init_f32.c"/>
    <files mask="arm_mat_inverse_f32.c"/>
    <files mask="arm_mat_scale_q31.c"/>
    <files mask="arm_mat_cmplx_mult_f32.c"/>
    <files mask="arm_mat_sub_q15.c"/>
    <files mask="arm_mat_scale_f32.c"/>
    <files mask="arm_mat_sub_f32.c"/>
    <files mask="arm_mat_add_q31.c"/>
    <files mask="arm_mat_add_f32.c"/>
    <files mask="MatrixFunctions.c"/>
    <files mask="arm_mat_mult_q15.c"/>
    <files mask="arm_mat_trans_q31.c"/>
    <files mask="arm_mat_scale_q15.c"/>
    <files mask="arm_mat_sub_q31.c"/>
    <files mask="arm_mat_inverse_f64.c"/>
    <files mask="arm_mat_init_q31.c"/>
    <files mask="arm_mat_trans_f32.c"/>
    <files mask="arm_mat_cmplx_mult_q15.c"/>
    <files mask="arm_mat_add_q15.c"/>
  </source>
  <source relative_path="DSP/Source/MatrixFunctions" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source/CommonTables" type="src">
    <files mask="CommonTables.c"/>
    <files mask="arm_common_tables.c"/>
    <files mask="arm_const_structs.c"/>
  </source>
  <source relative_path="DSP/Source/CommonTables" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source/SupportFunctions" type="src">
    <files mask="SupportFunctions.c"/>
    <files mask="arm_fill_q7.c"/>
    <files mask="arm_q15_to_q7.c"/>
    <files mask="arm_copy_q15.c"/>
    <files mask="arm_copy_f32.c"/>
    <files mask="arm_q7_to_q15.c"/>
    <files mask="arm_q31_to_q15.c"/>
    <files mask="arm_copy_q7.c"/>
    <files mask="arm_q15_to_float.c"/>
    <files mask="arm_q7_to_float.c"/>
    <files mask="arm_float_to_q15.c"/>
    <files mask="arm_q15_to_q31.c"/>
    <files mask="arm_fill_f32.c"/>
    <files mask="arm_float_to_q7.c"/>
    <files mask="arm_fill_q31.c"/>
    <files mask="arm_q7_to_q31.c"/>
    <files mask="arm_q31_to_float.c"/>
    <files mask="arm_copy_q31.c"/>
    <files mask="arm_fill_q15.c"/>
    <files mask="arm_q31_to_q7.c"/>
    <files mask="arm_float_to_q31.c"/>
  </source>
  <source relative_path="DSP/Source/SupportFunctions" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source/ComplexMathFunctions" type="src">
    <files mask="arm_cmplx_mag_squared_f32.c"/>
    <files mask="arm_cmplx_conj_f32.c"/>
    <files mask="arm_cmplx_mag_q31.c"/>
    <files mask="arm_cmplx_conj_q31.c"/>
    <files mask="arm_cmplx_dot_prod_f32.c"/>
    <files mask="arm_cmplx_mag_q15.c"/>
    <files mask="arm_cmplx_mag_f32.c"/>
    <files mask="arm_cmplx_dot_prod_q31.c"/>
    <files mask="arm_cmplx_dot_prod_q15.c"/>
    <files mask="arm_cmplx_mult_cmplx_q15.c"/>
    <files mask="arm_cmplx_mag_squared_q15.c"/>
    <files mask="arm_cmplx_conj_q15.c"/>
    <files mask="arm_cmplx_mult_real_q31.c"/>
    <files mask="arm_cmplx_mult_cmplx_f32.c"/>
    <files mask="ComplexMathFunctions.c"/>
    <files mask="arm_cmplx_mag_squared_q31.c"/>
    <files mask="arm_cmplx_mult_real_q15.c"/>
    <files mask="arm_cmplx_mult_cmplx_q31.c"/>
    <files mask="arm_cmplx_mult_real_f32.c"/>
  </source>
  <source relative_path="DSP/Source/ComplexMathFunctions" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
  <source relative_path="DSP/Source/BasicMathFunctions" type="src">
    <files mask="arm_mult_f32.c"/>
    <files mask="arm_dot_prod_q31.c"/>
    <files mask="arm_sub_f32.c"/>
    <files mask="arm_sub_q15.c"/>
    <files mask="arm_shift_q7.c"/>
    <files mask="arm_abs_q7.c"/>
    <files mask="arm_abs_q31.c"/>
    <files mask="arm_mult_q31.c"/>
    <files mask="arm_dot_prod_f32.c"/>
    <files mask="arm_offset_q31.c"/>
    <files mask="arm_shift_q15.c"/>
    <files mask="arm_shift_q31.c"/>
    <files mask="arm_negate_q7.c"/>
    <files mask="arm_add_q15.c"/>
    <files mask="arm_add_q7.c"/>
    <files mask="arm_offset_f32.c"/>
    <files mask="arm_dot_prod_q15.c"/>
    <files mask="arm_mult_q7.c"/>
    <files mask="arm_dot_prod_q7.c"/>
    <files mask="arm_abs_f32.c"/>
    <files mask="arm_negate_q15.c"/>
    <files mask="arm_scale_q15.c"/>
    <files mask="arm_mult_q15.c"/>
    <files mask="arm_add_q31.c"/>
    <files mask="arm_scale_q7.c"/>
    <files mask="arm_offset_q7.c"/>
    <files mask="BasicMathFunctions.c"/>
    <files mask="arm_sub_q31.c"/>
    <files mask="arm_sub_q7.c"/>
    <files mask="arm_negate_f32.c"/>
    <files mask="arm_abs_q15.c"/>
    <files mask="arm_scale_f32.c"/>
    <files mask="arm_add_f32.c"/>
    <files mask="arm_offset_q15.c"/>
    <files mask="arm_negate_q31.c"/>
    <files mask="arm_scale_q31.c"/>
  </source>
  <source relative_path="DSP/Source/BasicMathFunctions" type="doc">
    <files mask="CMakeLists.txt"/>
  </source>
</component>-->
    <component id="COPY_BSD_License.MIMXRT595S" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="MIMXRT595S" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.MIMXRT595S.MIMXRT595S" name="MIMXRT595S" brief="Devices_project_template MIMXRT595S" version="1.0.0" full_name="Devices_project_template MIMXRT595S" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MIMXRT595S/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm_usart.MIMXRT595S"/>
          <component_dependency value="component.usart_adapter.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_iopctl.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_gpio.MIMXRT595S"/>
          <component_dependency value="platform.drivers.cache_cache64.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexspi.MIMXRT595S"/>
          <component_dependency value="platform.drivers.reset.MIMXRT595S"/>
          <component_dependency value="device.MIMXRT595S_startup.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.clock.MIMXRT595S"/>
          <component_dependency value="platform.drivers.power.MIMXRT595S"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MIMXRT595S"/>
              <component_dependency value="component.serial_manager.MIMXRT595S"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MIMXRT595S"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.MIMXRT595S" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="MIMXRT595S" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MIMXRT595S/template" project_base_path="board">
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.MIMXRT595S" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="MIMXRT595S" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="xclang.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.MIMXRT595S" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.timer_manager.MIMXRT595S"/>
          <component_dependency value="component.lpc_gpio_adapter.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_adapters.MIMXRT595S" name="codec_adapters" brief="Component codec adapters for multi codec" version="2.2.0" full_name="Component codec_adapters" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.codec.MIMXRT595S"/>
          <any_of>
            <component_dependency value="component.wm8904_adapter.MIMXRT595S"/>
            <component_dependency value="component.cs42888_adapter.MIMXRT595S"/>
            <component_dependency value="component.tfa9896_adapter.MIMXRT595S"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="port" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./port" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_i2c.MIMXRT595S" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/codec/i2c" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <any_of>
            <component_dependency value="component.flexcomm_i2c_adapter.MIMXRT595S"/>
            <component_dependency value="component.i3c_adapter.MIMXRT595S"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_codec_i2c_MIMXRT595S_cm33.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.MIMXRT595S" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.osa.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.cs42888_adapter.MIMXRT595S" name="codec_cs42888_adapter" brief="Component cs42888 adapter for single codec" version="2.2.1" full_name="Component cs42888_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.MIMXRT595S"/>
          <component_dependency value="driver.codec.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="port/cs42888" type="src">
        <files mask="fsl_codec_cs42888_adapter.c"/>
      </source>
      <source relative_path="port/cs42888" type="c_include">
        <files mask="fsl_codec_cs42888_adapter.h"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_cs42888_adapter.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./port/cs42888" type="c_include"/>
        <include_path relative_path="./port/" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ctimer_adapter.MIMXRT595S" name="ctimer_adapter" brief="Component ctimer_adapter" version="1.0.0" full_name="Component ctimer_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.ctimer.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ctimer.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.flexcomm_i2c_adapter.MIMXRT595S" name="flexcomm_i2c_adapter" brief="Component flexcomm_i2c_adapter" version="1.0.0" full_name="Component flexcomm_i2c_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_flexcomm_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_flexcomm_i2c_adapter.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_adapter.MIMXRT595S" name="i3c_adapter" brief="Component i3c_adapter" version="1.0.0" full_name="Component i3c_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.i3c.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_i3c_adapter.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_bus.MIMXRT595S" name="i3c_bus" brief="Component i3c_bus" version="1.0.1" full_name="Component i3c_bus" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/i3c_bus" project_base_path="component/i3c_bus">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_i3c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_i3c.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i3c_bus_adapter.MIMXRT595S" name="i3c_bus_adapter" brief="Component i3c_bus_adapter" version="1.0.1" full_name="Component i3c_bus_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/i3c_bus" project_base_path="component/i3c_bus">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i3c.MIMXRT595S"/>
          <component_dependency value="component.i3c_bus.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_i3c_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_i3c_adapter.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.MIMXRT595S" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.timer_manager.MIMXRT595S"/>
          <component_dependency value="component.lpc_gpio_adapter.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.MIMXRT595S" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_lists.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.MIMXRT595S" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="utility.debug_console.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.MIMXRT595S" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.log.MIMXRT595S"/>
          <component_dependency value="utility.debug_console.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.MIMXRT595S" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.log.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpc_crc_adapter.MIMXRT595S" name="lpc_crc_adapter" brief="Component lpc_crc_adapter" version="1.0.0" full_name="Component lpc_crc_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_crc.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpc_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpc_gpio_adapter.MIMXRT595S" name="lpc_gpio_adapter" brief="Component lpc_gpio_adapter" version="1.0.0" full_name="Component lpc_gpio_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpc_gpio.MIMXRT595S"/>
          <component_dependency value="platform.drivers.inputmux.MIMXRT595S"/>
          <component_dependency value="platform.drivers.pint.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpc_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.MIMXRT595S" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.MIMXRT595S" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash.common.MIMXRT595S" name="mflash common" brief="mflash common" version="1.0.0" full_name="statically allocated file system for mflash" devices="MIMXRT595S" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <source relative_path="./" type="c_include">
        <files mask="mflash_common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash.rt595.MIMXRT595S" name="mflash rt595" brief="mflash rt595" version="1.0.0" full_name="mflash rt595" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/flash/mflash/mimxrt595" project_base_path="flash/mflash/mimxrt595">
      <dependencies>
        <all>
          <component_dependency value="component.mflash.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexspi.MIMXRT595S"/>
          <component_dependency value="platform.drivers.cache_cache64.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="mflash_drv.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="mflash_drv.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash_file.MIMXRT595S" name="mflash file" brief="mflash file" version="1.0.0" full_name="statically allocated file system for mflash" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <dependencies>
        <component_dependency value="component.mflash.rt595.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="mflash_file.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="mflash_file.c"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mrt_adapter.MIMXRT595S" name="mrt_adapter" brief="Component mrt_adapter" version="1.0.0" full_name="Component mrt_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.mrt.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_mrt.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.MIMXRT595S" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT595S" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT595S" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.MIMXRT595S" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source condition="middleware.freertos-kernel.MIMXRT595S" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_osa.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.MIMXRT595S" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_osa_bm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_free_rtos.MIMXRT595S" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_osa_free_rtos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_thread.MIMXRT595S" name="osa thread" brief="Component osa thread" version="1.0.0" full_name="Component osa thread" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
        <files mask="fsl_os_abstraction_threadx.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_threadx.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.MIMXRT595S" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="utility.debug_console.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_ctimer_adapter.MIMXRT595S" name="pwm_ctimer_adapter" brief="Component pwm_ctimer_adapter" version="1.0.0" full_name="Component pwm_ctimer_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.ctimer.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_ctimer.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.rt_gpio_adapter.MIMXRT595S" name="rt_gpio_adapter" brief="Component rt_gpio_adapter" version="1.0.0" full_name="Component rt_gpio_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <component_dependency value="platform.drivers.lpc_gpio.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_rt_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.MIMXRT595S" name="serial_manager" brief="Component serial_manager" version="1.0.1" full_name="Serial Manager" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MIMXRT595S"/>
            <component_dependency value="component.serial_manager_swo.MIMXRT595S"/>
            <component_dependency value="component.serial_manager_virtual.MIMXRT595S"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_serial_manager.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_swo.MIMXRT595S" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.serial_manager.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_swo.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_swo.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.MIMXRT595S" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.usart_adapter.MIMXRT595S"/>
          <component_dependency value="component.serial_manager.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_usart.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_serial_manager_uart.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.MIMXRT595S" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.MIMXRT595S" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.MIMXRT595S" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.tfa9896_adapter.MIMXRT595S" name="codec_tfa9896_adapter" brief="Component tfa9896 adapter for single codec" version="2.2.0" full_name="Component tfa9896_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.tfa9896.MIMXRT595S"/>
          <component_dependency value="driver.codec.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="port/tfa9896" type="src">
        <files mask="fsl_codec_tfa9896_adapter.c"/>
      </source>
      <source relative_path="port/tfa9896" type="c_include">
        <files mask="fsl_codec_tfa9896_adapter.h"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_tfa9896_adapter.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./port/tfa9896" type="c_include"/>
        <include_path relative_path="./port" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.MIMXRT595S" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
          <any_of>
            <component_dependency value="component.ctimer_adapter.MIMXRT595S"/>
            <component_dependency value="component.mrt_adapter.MIMXRT595S"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.trng_adapter.MIMXRT595S" name="trng_adapter" brief="Component trng_adapter" version="1.0.0" full_name="Component trng_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.trng.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_trng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.usart_adapter.MIMXRT595S" name="usart_adapter" brief="Component usart_adapter" version="1.0.0" full_name="usart_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_usart.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_usart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_usart_adapter.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.usart_dma_adapter.MIMXRT595S" name="usart_dma_adapter" brief="Component usart_dma_adapter" version="1.0.0" full_name="usart_dma_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <defines>
        <define name="HAL_UART_DMA_ENABLE" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.usart_adapter.MIMXRT595S"/>
          <component_dependency value="component.timer_manager.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_usart_dma.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_usart.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wm8904_adapter.MIMXRT595S" name="codec_wm8904_adapter" brief="Component wm8904 adapter for single codec" version="2.2.0" full_name="Component wm8904_adapter" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8904.MIMXRT595S"/>
          <component_dependency value="driver.codec.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="port/wm8904" type="src">
        <files mask="fsl_codec_wm8904_adapter.c"/>
      </source>
      <source relative_path="port/wm8904" type="c_include">
        <files mask="fsl_codec_wm8904_adapter.h"/>
      </source>
      <source relative_path="port" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="component_wm8904_adapter.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./port/wm8904" type="c_include"/>
        <include_path relative_path="./port" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MIMXRT595S_CMSIS.MIMXRT595S" name="MIMXRT595S_CMSIS" brief="Device MIMXRT595S_cmsis" version="1.0.0" full_name="Device MIMXRT595S_cmsis" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MIMXRT595S" project_base_path="device">
      <dependencies>
        <component_dependency value="CMSIS_Include_core_cm.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include" device_cores="cm33_MIMXRT595S">
        <files mask="fsl_device_registers.h"/>
        <files mask="MIMXRT595S_cm33.h"/>
        <files mask="MIMXRT595S_cm33_features.h"/>
        <files mask="system_MIMXRT595S_cm33.h"/>
      </source>
      <source relative_path="./" type="src" device_cores="cm33_MIMXRT595S">
        <files mask="system_MIMXRT595S_cm33.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="device_CMSIS.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include" device_cores="cm33_MIMXRT595S"/>
      </include_paths>
    </component>
    <component id="device.MIMXRT595S_DSP.MIMXRT595S" name="MIMXRT595S_DSP" brief="Device MIMXRT595S_dsp" version="1.0.0" full_name="Device MIMXRT595S_dsp" devices="MIMXRT595S" user_visible="true" type="other" package_base_path="core/devices/MIMXRT595S" project_base_path="device"/>
    <component id="platform.devices.MIMXRT595S_debugger.MIMXRT595S" name="MIMXRT595S_debugger" brief="Device MIMXRT595S_debugger" version="1.0.0" full_name="Device MIMXRT595S_debugger" devices="MIMXRT595S" user_visible="true" type="debugger" package_base_path="core/devices/MIMXRT595S" project_base_path="MIMXRT595S">
      <source relative_path="./" type="xml" device_cores="cm33_MIMXRT595S">
        <files mask="MIMXRT595S_cm33.xml"/>
      </source>
    </component>
    <component id="platform.devices.MIMXRT595S_linker.MIMXRT595S" name="MIMXRT595S_linker" brief="Device MIMXRT595S_linker" version="1.0.0" full_name="Device MIMXRT595S_linker" devices="MIMXRT595S" user_visible="true" type="linker" package_base_path="core/devices/MIMXRT595S" project_base_path="MIMXRT595S">
      <source toolchain="armgcc" relative_path="gcc" type="linker" device_cores="cm33_MIMXRT595S">
        <files mask="MIMXRT595Sxxxx_cm33_ram.ld"/>
        <files mask="MIMXRT595Sxxxx_cm33_flash.ld"/>
        <files mask="MIMXRT595Sxxxx_cm33_ram_s.ld"/>
        <files mask="MIMXRT595Sxxxx_cm33_flash_s.ld"/>
        <files mask="MIMXRT595Sxxxx_cm33_ram_ns.ld"/>
        <files mask="MIMXRT595Sxxxx_cm33_flash_ns.ld"/>
      </source>
    </component>
    <component id="device.MIMXRT595S_startup.MIMXRT595S" name="MIMXRT595S_startup" brief="Device MIMXRT595S_startup" version="1.0.0" full_name="Device MIMXRT595S_startup" devices="MIMXRT595S" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/MIMXRT595S" project_base_path="startup">
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include" device_cores="cm33_MIMXRT595S">
        <files mask="startup_MIMXRT595S_cm33.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c" device_cores="cm33_MIMXRT595S">
        <files mask="startup_mimxrt595s_cm33.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp" device_cores="cm33_MIMXRT595S">
        <files mask="startup_mimxrt595s_cm33.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="device_startup.cmake" hidden="true"/>
      </source>
    </component>
    <component id="docs.MIMXRT595S.MIMXRT595S" name="MIMXRT595S" brief="Docs mimxrt595s" version="1.0.0" full_name="Docs mimxrt595s" devices="MIMXRT595S" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for EVK-MIMXRT595.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for EVK-MIMXRT595.pdf"/>
        <files mask="Getting Started with Xplorer for EVK-MIMXRT595.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.acmp.MIMXRT595S" name="acmp" brief="ACMP Driver" version="2.0.6" full_name="ACMP Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/acmp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_acmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_acmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_acmp.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cache_cache64.MIMXRT595S" name="cache" brief="CACHE Driver" version="2.0.4" full_name="CACHE Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/cache/cache64" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_cache_cache64.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.casper.MIMXRT595S" name="casper" brief="CASPER Driver" version="2.2.3" full_name="CASPER Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/casper" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_casper.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_casper.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_casper.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.MIMXRT595S" name="clock" brief="Clock Driver" version="2.6.0" full_name="Clock Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT595S/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_clock.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.codec.MIMXRT595S" name="codec" brief="Driver codec" version="2.2.2" full_name="Driver codec" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <any_of>
            <component_dependency value="component.wm8904_adapter.MIMXRT595S"/>
            <component_dependency value="component.codec_adapters.MIMXRT595S"/>
            <component_dependency value="component.cs42888_adapter.MIMXRT595S"/>
            <component_dependency value="component.tfa9896_adapter.MIMXRT595S"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_codec.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.MIMXRT595S" name="common" brief="COMMON Driver" version="2.3.0" full_name="COMMON Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.reset.MIMXRT595S"/>
          <component_dependency value="platform.drivers.clock.MIMXRT595S"/>
          <component_dependency value="device.MIMXRT595S_CMSIS.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source relative_path="./" type="src" device_cores="cm33_MIMXRT595S">
        <files mask="fsl_common_arm.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm33_MIMXRT595S">
        <files mask="fsl_common_arm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_common.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.cs42888.MIMXRT595S" name="cs42888" brief="Driver cs42888" version="2.1.2" full_name="Driver cs42888" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/codec/cs42888" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.codec_i2c.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42888.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42888.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_cs42888.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ctimer.MIMXRT595S" name="ctimer" brief="CTimer Driver" version="2.2.1" full_name="CTimer Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/ctimer" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ctimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_ctimer.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-common.MIMXRT595S" name="display-common" brief="Driver display-common" version="1.0.0" full_name="Driver display-common" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display" project_base_path="video">
      <dependencies>
        <component_dependency value="driver.video-common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_display.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_display-common.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-mipi-dsi-cmd.MIMXRT595S" name="display-mipi-dsi-cmd" brief="Driver display-mipi-dsi-cmd" version="1.0.2" full_name="Driver display-mipi-dsi-cmd" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/video/display/mipi_dsi_cmd" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.mipi_dsi.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mipi_dsi_cmd.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mipi_dsi_cmd.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_display-mipi-dsi-cmd.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-rm68191.MIMXRT595S" name="display-rm68191" brief="Driver display-rm68191" version="1.1.0" full_name="Driver display-rm68191" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="board_component" package_base_path="core/components/video/display/rm68191" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.display-common.MIMXRT595S"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rm68191.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rm68191.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_display-rm68191.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-rm68200.MIMXRT595S" name="display-rm68200" brief="Driver display-rm68200" version="1.1.0" full_name="Driver display-rm68200" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="board_component" package_base_path="core/components/video/display/rm68200" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.display-common.MIMXRT595S"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rm68200.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rm68200.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_display-rm68200.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmic.MIMXRT595S" name="dmic" brief="DMIC Driver" version="2.3.0" full_name="DMIC Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/dmic" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dmic.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmic.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_dmic.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmic_dma.MIMXRT595S" name="dmic_dma" brief="DMIC DMA Driver" version="2.3.0" full_name="DMIC DMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/dmic" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dmic.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_dma.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dmic_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmic_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_dmic_dma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dsp.MIMXRT595S" name="dsp" brief="dsp Driver" version="1.0.0" full_name="dsp Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT595S/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.power.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dsp.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dsp.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flash_config.MIMXRT595S" name="flash_config" brief="flash config block" version="2.0.0" full_name="Flash config" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="board_component" package_base_path="core/boards/evkmimxrt595/flash_config" project_base_path="flash_config">
      <defines>
        <define name="BOOT_HEADER_ENABLE" value="1"/>
      </defines>
      <dependencies>
        <component_dependency value="platform.drivers.iap.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="flash_config.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="flash_config.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flash_config.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm.MIMXRT595S" name="flexcomm" brief="FLEXCOMM Driver" version="2.0.2" full_name="FLEXCOMM Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexcomm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexcomm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2c.MIMXRT595S" name="i2c" brief="I2C Driver" version="2.3.0" full_name="FLEXCOMM I2C Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_i2c.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2c_dma.MIMXRT595S" name="i2c_dma" brief="I2C Driver" version="2.3.0" full_name="FLEXCOMM I2C DMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_dma.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_i2c_dma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2c_freertos.MIMXRT595S" name="i2c_freertos" brief="I2C Driver" version="2.0.8" full_name="FLEXCOMM I2C FREERTOS Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.MIMXRT595S"/>
          <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_i2c_freertos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2s.MIMXRT595S" name="flexcomm_i2s" brief="I2S Driver" version="2.2.2" full_name="FLEXCOMM I2S Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2s.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2s.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_i2s.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2s_dma.MIMXRT595S" name="flexcomm_i2s_dma" brief="I2S Driver" version="2.2.2" full_name="FLEXCOMM I2S DMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm_i2s.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_dma.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2s_dma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2s_dma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_i2s_dma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_spi.MIMXRT595S" name="spi" brief="SPI Driver" version="2.2.1" full_name="FLEXCOMM SPI Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_spi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_spi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_spi_dma.MIMXRT595S" name="spi_dma" brief="SPI Driver" version="2.1.1" full_name="FLEXCOMM SPI DMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_spi.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_dma.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_spi_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_spi_dma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_spi_freertos.MIMXRT595S" name="spi_freertos" brief="SPI Driver" version="2.1.0" full_name="FLEXCOMM SPI FREERTOS Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_spi.MIMXRT595S"/>
          <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spi_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_spi_freertos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_usart.MIMXRT595S" name="usart" brief="USART Driver" version="2.6.0" full_name="FLEXCOMM USART Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_usart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_usart.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_usart_dma.MIMXRT595S" name="usart_dma" brief="USART Driver" version="2.6.0" full_name="FLEXCOMM USART DMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_usart.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_dma.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usart_dma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_usart_dma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_usart_dma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_usart_freertos.MIMXRT595S" name="usart_freertos" brief="USART Driver" version="2.6.0" full_name="FLEXCOMM USART FREERTOS Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexcomm_usart.MIMXRT595S"/>
          <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_usart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexcomm_usart_freertos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio.MIMXRT595S" name="flexio" brief="FLEXIO Driver" version="2.0.4" full_name="FLEXIO Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexio.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MIMXRT595S" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.4.0" full_name="FLEXIO I2C Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexio_i2c_master.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s.MIMXRT595S" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.2.0" full_name="FLEXIO I2S Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_mculcd.MIMXRT595S" name="flexio_mculcd" brief="FLEXIO MCULCD Driver" version="2.0.6" full_name="FLEXIO MCULCD Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_mculcd.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_mculcd.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_mculcd_smartdma.MIMXRT595S" name="flexio_mculcd_smartdma" brief="FLEXIO MCULCD SMARTDMA Driver" version="2.0.2" full_name="FLEXIO MCULCD SMARTDMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_mculcd.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_smartdma.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_mculcd_smartdma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_mculcd_smartdma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi.MIMXRT595S" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.2.0" full_name="FLEXIO SPI Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexio_spi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart.MIMXRT595S" name="flexio_uart" brief="FLEXIO UART Driver" version="2.4.0" full_name="FLEXIO UART Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexio_uart.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexspi.MIMXRT595S" name="flexspi" brief="FLEXSPI Driver" version="2.3.5" full_name="FLEXSPI Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexspi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexspi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexspi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexspi_dma.MIMXRT595S" name="flexspi_dma" brief="FLEXSPI DMA Driver" version="2.2.1" full_name="FLEXSPI DMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/flexspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexspi.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_dma.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexspi_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexspi_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_flexspi_dma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.fmeas.MIMXRT595S" name="fmeas" brief="FMEAS Driver" version="2.1.1" full_name="FMEAS Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/fmeas" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_fmeas.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_fmeas.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_fmeas.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.hashcrypt.MIMXRT595S" name="hashcrypt" brief="Hashcrypt Driver" version="2.2.2" full_name="Hashcrypt Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/hashcrypt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_hashcrypt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_hashcrypt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_hashcrypt.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i3c.MIMXRT595S" name="i3c" brief="I3C Driver" version="2.3.2" full_name="I3C Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/i3c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i3c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i3c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_i3c.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.iap.MIMXRT595S" name="iap" brief="ROMIAP Driver" version="2.1.2" full_name="IAP Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT595S/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iap.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_iap.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_iap.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.inputmux.MIMXRT595S" name="inputmux" brief="INPUTMUX Driver" version="2.0.4" full_name="INPUTMUX Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/inputmux" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.inputmux_connections.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_inputmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_inputmux.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.inputmux_connections.MIMXRT595S" name="inputmux_connections" brief="Inputmux_connections Driver" version="2.0.1" full_name="Inputmux_connections Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT595S/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux_connections.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_inputmux_connections.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lcdif.MIMXRT595S" name="lcdif" brief="LCDIF Driver" version="2.1.1" full_name="LCDIF Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/lcdif" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lcdif.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lcdif.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_lcdif.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpadc.MIMXRT595S" name="lpadc" brief="LPADC Driver" version="2.4.0" full_name="LPADC Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/lpadc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpadc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpadc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_lpadc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_crc.MIMXRT595S" name="lpc_crc" brief="CRC Driver" version="2.1.1" full_name="CRC Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/lpc_crc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_lpc_crc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_dma.MIMXRT595S" name="dma" brief="DMA Driver" version="2.4.2" full_name="DMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/lpc_dma" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_lpc_dma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_gpio.MIMXRT595S" name="gpio" brief="GPIO Driver" version="2.1.7" full_name="GPIO Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/lpc_gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_lpc_gpio.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_iopctl.MIMXRT595S" name="iopctl" brief="iopctl Driver" version="2.0.0" full_name="iopctl Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/lpc_iopctl" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iopctl.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_lpc_iopctl.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_rtc.MIMXRT595S" name="lpc_rtc" brief="RTC Driver" version="2.1.2" full_name="RTC Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/lpc_rtc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_lpc_rtc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_smartdma.MIMXRT595S" name="lpc_smartdma" brief="SMARTDMA Driver" version="2.6.2" full_name="SMARTDMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/smartdma" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smartdma.h"/>
        <files mask="fsl_smartdma_prv.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smartdma.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.memory.MIMXRT595S" name="memory" brief="MEMORY Driver" version="2.0.0" full_name="Memory Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT595S/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_memory.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mipi_dsi.MIMXRT595S" name="mipi_dsi" brief="MIPI DSI Driver" version="2.1.0" full_name="MIPI DSI Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/mipi_dsi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.soc_mipi_dsi.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_mipi_dsi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mipi_dsi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_mipi_dsi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mipi_dsi_smartdma.MIMXRT595S" name="mipi_dsi_smartdma" brief="MIPI DSI Driver" version="2.2.1" full_name="MIPI DSI SMARTDMA Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/mipi_dsi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.mipi_dsi.MIMXRT595S"/>
          <component_dependency value="platform.drivers.lpc_smartdma.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_mipi_dsi_smartdma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mipi_dsi_smartdma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mrt.MIMXRT595S" name="mrt" brief="MRT Driver" version="2.0.3" full_name="MRT Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/mrt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mrt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mrt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_mrt.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mu.MIMXRT595S" name="mu" brief="MU Driver" version="2.0.7" full_name="MU Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/mu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mu.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.nand_flash-common.MIMXRT595S" name="nand_flash-common" brief="Driver nand_flash-common" version="1.0.0" full_name="Driver nand_flash-common" devices="MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/flash/nand" project_base_path="nand_flash">
      <source relative_path="./" type="c_include">
        <files mask="fsl_nand_flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.nand_flash-controller-flexspi.MIMXRT595S" name="nand_flash-controller-flexspi" brief="Driver nand_flash-controller-flexspi" version="1.0.0" full_name="Driver nand_flash-controller-flexspi" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="abstraction_layer" package_base_path="core/components/flash/nand/flexspi" project_base_path="nand_flash">
      <dependencies>
        <all>
          <component_dependency value="driver.nand_flash-common.MIMXRT595S"/>
          <component_dependency value="platform.drivers.flexspi.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexspi_nand_flash.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexspi_nand_flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ostimer.MIMXRT595S" name="ostimer" brief="OSTimer Driver" version="2.1.2" full_name="OSTimer Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/ostimer" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ostimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ostimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_ostimer.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.otfad.MIMXRT595S" name="otfad" brief="OTFAD Driver" version="2.1.3" full_name="OTFAD Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/otfad" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_otfad.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_otfad.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_otfad.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.pca9420.MIMXRT595S" name="pca9420" brief="Driver pca9420" version="1.0.0" full_name="Driver pca9420" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="board_component" package_base_path="core/components/pca9420" project_base_path="pmic_driver">
      <dependencies>
        <component_dependency value="platform.drivers.power.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pca9420.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pca9420.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_pca9420.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pint.MIMXRT595S" name="pint" brief="PINT Driver" version="2.1.8" full_name="PINT Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/pint" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pint.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pint.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_pint.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.power.MIMXRT595S" name="power" brief="Power driver" version="2.3.2" full_name="Driver power" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT595S/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_power.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_power.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_power.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.powerquad.MIMXRT595S" name="powerquad" brief="POWERQUAD Driver" version="2.0.3" full_name="POWERQUAD Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/powerquad" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="CMSIS_DSP_Library.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_powerquad_data.h"/>
        <files mask="fsl_powerquad.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_powerquad_data.c"/>
        <files mask="fsl_powerquad_basic.c"/>
        <files mask="fsl_powerquad_math.c"/>
        <files mask="fsl_powerquad_matrix.c"/>
        <files mask="fsl_powerquad_filter.c"/>
        <files mask="fsl_powerquad_transform.c"/>
        <files mask="fsl_powerquad_cmsis.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_powerquad.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.puf.MIMXRT595S" name="PUF" brief="PUF Driver" version="2.1.5" full_name="PUF Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/puf" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_puf.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_puf.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_puf.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.reset.MIMXRT595S" name="reset" brief="Reset Driver" version="2.0.1" full_name="Reset Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT595S/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_reset.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_reset.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_reset.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sctimer.MIMXRT595S" name="sctimer" brief="SCT Driver" version="2.4.0" full_name="SCT Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/sctimer" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sctimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_sctimer.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sema42.MIMXRT595S" name="sema42" brief="SEMA42 Driver" version="2.0.2" full_name="SEMA42 Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/sema42" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sema42.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sema42.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.soc_mipi_dsi.MIMXRT595S" name="soc_mipi_dsi" brief="SOC MIPI DSI Driver" version="2.0.0" full_name="SOC MIPI DSI Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/devices/MIMXRT595S/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_soc_mipi_dsi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_soc_mipi_dsi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.tfa9896.MIMXRT595S" name="tfa9896" brief="Driver tfa9896" version="6.0.1" full_name="Driver tfa9896" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/codec/tfa9896" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.codec_i2c.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tfa9896_buffer.h"/>
        <files mask="fsl_tfa9896.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_hal_registers.c"/>
        <files mask="fsl_tfa9896.c"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="MIMXRT595595-EVK_TFA9896_SW.pdf"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_tfa9896.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.trng.MIMXRT595S" name="trng" brief="TRNG Driver" version="2.0.13" full_name="TRNG Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/trng" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_trng.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trng.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_trng.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.usdhc.MIMXRT595S" name="sdhc" brief="USDHC Driver" version="2.8.0" full_name="USDHC Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/usdhc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_usdhc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usdhc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_usdhc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.utick.MIMXRT595S" name="utick" brief="UTICK Driver" version="2.0.4" full_name="UTICK Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/utick" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.power.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_utick.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_utick.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_utick.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.video-common.MIMXRT595S" name="video-common" brief="Driver video-common" version="1.0.3" full_name="Driver video-common" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/video" project_base_path="video">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_video_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_video_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_video-common.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8904.MIMXRT595S" name="wm8904" brief="Driver wm8904" version="2.4.4" full_name="Driver wm8904" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="software_component" package_base_path="core/components/codec/wm8904" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
          <component_dependency value="component.codec_i2c.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8904.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8904.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_wm8904.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wwdt.MIMXRT595S" name="wwdt" brief="WWDT Driver" version="2.1.9" full_name="WWDT Driver" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="driver" package_base_path="core/drivers/wwdt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wwdt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wwdt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="driver_wwdt.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.MIMXRT595S" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="MIMXRT595S" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_baremetal.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.MIMXRT595S" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="202012.00.0" full_name="FreeRTOS kernel" devices="MIMXRT595S" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <defines>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.extension.MIMXRT595S"/>
          <component_dependency value="middleware.freertos-kernel.template.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="croutine.c"/>
        <files mask="event_groups.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="atomic.h"/>
        <files mask="croutine.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="StackMacros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_freertos-kernel_MIMXRT595S_cm33.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.armv8m.MIMXRT595S" name="FreeRTOS port ARMv8M" brief="FreeRTOS port ARMv8M" version="202012.00.0" full_name="FreeRTOS port ARMv8M" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
      </dependencies>
      <source relative_path="portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/context" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/heap" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/init" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/macros" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.cm33_nonsecure_port.MIMXRT595S" name="cm33 nonsecure port" brief="FreeRTOS cm33 nonsecure port" version="202012.00.0" full_name="FreeRTOS cm33 nonsecure port" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="true" type="middleware" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
          <component_dependency value="middleware.freertos-kernel.template.MIMXRT595S"/>
        </all>
      </dependencies>
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33_NTZ/non_secure" type="src" device_cores="cm33_MIMXRT595S">
        <files mask="port.c"/>
        <files mask="portasm.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33_NTZ/non_secure" type="c_include" device_cores="cm33_MIMXRT595S">
        <files mask="portasm.h"/>
        <files mask="portmacro.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_freertos-kernel_cm33_nonsecure_port.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/GCC/ARM_CM33_NTZ/non_secure" toolchain="armgcc mcuxpresso" type="c_include" device_cores="cm33_MIMXRT595S"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.cm33_secure_port.MIMXRT595S" name="cm33 secure port" brief="FreeRTOS cm33 secure port" version="202012.00.0" full_name="FreeRTOS cm33 secure port" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="middleware" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
          <component_dependency value="middleware.freertos-kernel.mpu_wrappers.MIMXRT595S"/>
        </all>
      </dependencies>
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33/non_secure" type="src" device_cores="cm33_MIMXRT595S">
        <files mask="port.c"/>
        <files mask="portasm.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33/non_secure" type="c_include" device_cores="cm33_MIMXRT595S">
        <files mask="portasm.h"/>
        <files mask="portmacro.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_freertos-kernel_cm33_secure_port.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/GCC/ARM_CM33/non_secure" toolchain="armgcc mcuxpresso" type="c_include" device_cores="cm33_MIMXRT595S"/>
        <include_path relative_path="portable/GCC/ARM_CM33/secure" toolchain="armgcc mcuxpresso" type="c_include" device_cores="cm33_MIMXRT595S"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.doc.MIMXRT595S" name="FreeRTOS doc" brief="FreeRTOS doc" version="202012.00.0" full_name="FreeRTOS doc" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos" project_base_path="freertos">
      <source relative_path="doc" type="doc">
        <files mask="AFQ Developer Guide - Board Qualification Errata.pdf"/>
        <files mask="Amazon FreeRTOS Qualification Developer Guide.pdf"/>
        <files mask="mainpage.txt"/>
      </source>
      <source relative_path="doc/config" type="other">
        <files mask="ble"/>
        <files mask="common"/>
        <files mask="https"/>
        <files mask="main"/>
        <files mask="ota"/>
        <files mask="platform"/>
        <files mask="posix"/>
        <files mask="secure_sockets"/>
        <files mask="wifi"/>
      </source>
      <source relative_path="doc/config/html" type="doc">
        <files mask="footer.html"/>
        <files mask="header.html"/>
        <files mask="style.css"/>
      </source>
      <source relative_path="doc/config" type="xml">
        <files mask="layout_library.xml"/>
        <files mask="layout_main.xml"/>
      </source>
      <source relative_path="doc/extra_files/https" type="doc">
        <files mask="gettysburg.txt"/>
      </source>
      <source relative_path="doc/freertos_port_qual" type="doc">
        <files mask="FreeRTOS_Porting_Guide.pdf"/>
        <files mask="FreeRTOS_Qualification_Guide.pdf"/>
      </source>
      <source relative_path="doc" type="script">
        <files mask="generate_doc.sh"/>
      </source>
      <source relative_path="doc" type="other">
        <files mask="guidance.md"/>
        <files mask="README.md"/>
      </source>
      <source relative_path="doc/guide" type="doc">
        <files mask="building.txt"/>
        <files mask="developer.txt"/>
        <files mask="style.txt"/>
      </source>
      <source relative_path="doc/lib" type="doc">
        <files mask="ble.txt"/>
        <files mask="https.txt"/>
        <files mask="platform.txt"/>
        <files mask="posix.txt"/>
        <files mask="secure_sockets.txt"/>
        <files mask="wifi.txt"/>
      </source>
      <source relative_path="doc/plantuml" type="other">
        <files mask="https_client_async_callback_order.pu"/>
        <files mask="RecyclableJobStatus.pu"/>
        <files mask="StaticJobStatus.pu"/>
        <files mask="taskpool_design_typicaloperation.pu"/>
      </source>
      <source relative_path="doc/plantuml" type="xml">
        <files mask="https_client_async_workflow.xml"/>
        <files mask="https_client_sync_workflow.xml"/>
      </source>
      <source relative_path="doc/plantuml/images" type="image">
        <files mask="BLE-architecture.png"/>
        <files mask="blediagram.png"/>
        <files mask="https_client_async_callback_order.png"/>
        <files mask="https_client_async_workflow.png"/>
        <files mask="https_client_sync_workflow.png"/>
        <files mask="mqtt_demo.png"/>
        <files mask="mqtt_design_typicaloperation.png"/>
        <files mask="RecyclableJobStatus.png"/>
        <files mask="shadow_demo.png"/>
        <files mask="StaticJobStatus.png"/>
        <files mask="taskpool_design_typicaloperation.png"/>
      </source>
      <source relative_path="doc/user_guide" type="doc">
        <files mask="global_config.txt"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.extension.MIMXRT595S" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="202012.00.0" full_name="FreeRTOS NXP extension" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_freertos-kernel_extension.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.MIMXRT595S" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="202012.00.0" full_name="FreeRTOS heap 1" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.MIMXRT595S" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="202012.00.0" full_name="FreeRTOS heap 2" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.MIMXRT595S" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="202012.00.0" full_name="FreeRTOS heap_3" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.MIMXRT595S" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="202012.00.0" full_name="FreeRTOS heap 4" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_freertos-kernel_heap_4.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.MIMXRT595S" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="202012.00.0" full_name="FreeRTOS heap 5" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.MIMXRT595S" name="FreeRTOS MPU wrappers" brief="FreeRTOS MPU wrappers" version="202012.00.0" full_name="FreeRTOS MPU wrappers" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_freertos-kernel_mpu_wrappers.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.secure_context.MIMXRT595S" name="secure context" brief="FreeRTOS Secure Context" version="202012.00.0" full_name="FreeRTOS Secure Context" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="true" type="middleware" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.template.MIMXRT595S"/>
      </dependencies>
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33/secure" type="src">
        <files mask="secure_context.c"/>
        <files mask="secure_context_port.c"/>
        <files mask="secure_heap.c"/>
        <files mask="secure_init.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33/secure" type="c_include">
        <files mask="secure_context.h"/>
        <files mask="secure_heap.h"/>
        <files mask="secure_init.h"/>
        <files mask="secure_port_macros.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_freertos-kernel_secure_context.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/GCC/ARM_CM33/secure" toolchain="armgcc mcuxpresso" type="c_include"/>
        <include_path relative_path="portable/GCC/ARM_CM33/non_secure" toolchain="armgcc mcuxpresso" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.template.MIMXRT595S" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="202012.00.0" full_name="FreeRTOS configuration template" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="project_template" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33_NTZ/non_secure" type="src" device_cores="cm33_MIMXRT595S">
        <files mask="port.c"/>
        <files mask="portasm.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" relative_path="portable/GCC/ARM_CM33_NTZ/non_secure" type="c_include" device_cores="cm33_MIMXRT595S">
        <files mask="portasm.h"/>
        <files mask="portmacro.h"/>
      </source>
      <source exclude="true" relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
      </source>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <include_paths>
        <include_path relative_path="template/ARM_CM33" type="c_include" device_cores="cm33_MIMXRT595S"/>
        <include_path relative_path="portable/GCC/ARM_CM33_NTZ/non_secure" toolchain="armgcc mcuxpresso" type="c_include" device_cores="cm33_MIMXRT595S"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.unused.MIMXRT595S" name="FreeRTOS unused" brief="FreeRTOS unused" version="202012.00.0" full_name="FreeRTOS unused" devices="MIMXRT595S" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="./" type="other">
        <files mask="GitHub-FreeRTOS-Kernel-Home.url"/>
        <files mask="LICENSE.md"/>
        <files mask="Quick_Start_Guide.url"/>
        <files mask="README.md"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="History.txt"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source relative_path="portable/ARMClang" type="doc">
        <files mask="Use-the-GCC-ports.txt"/>
      </source>
    </component>
    <component id="middleware.multicore.MIMXRT595S" name="multicore middleware" brief="Multicore SDK" version="2.10.0" full_name="Multicore Software Development Kit" devices="MIMXRT595S" user_visible="true" type="other" package_base_path="middleware/multicore" project_base_path="multicore">
      <source relative_path="./" type="doc">
        <files mask="readme.txt" hidden="true"/>
        <files mask="ChangeLogKSDK.txt" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.rpmsg_lite.MIMXRT595S" name="rpmsg_lite" brief="RPMsg-Lite" version="3.1.2" full_name="Remote Procedure Messaging Lite library" devices="MIMXRT595S" category="Multicore/RPMsg-Lite" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg_lite">
      <source relative_path="rpmsg_lite/lib/include" project_relative_path="./" type="c_include">
        <files mask="rpmsg_lite.h"/>
        <files mask="rpmsg_ns.h"/>
        <files mask="llist.h"/>
        <files mask="rpmsg_default_config.h"/>
        <files mask="virtio_ring.h"/>
        <files mask="virtqueue.h"/>
        <files mask="rpmsg_compiler.h"/>
        <files mask="rpmsg_env.h"/>
      </source>
      <source relative_path="rpmsg_lite/lib/common" project_relative_path="./" type="src">
        <files mask="llist.c"/>
      </source>
      <source relative_path="rpmsg_lite/lib/rpmsg_lite" project_relative_path="./" type="src">
        <files mask="rpmsg_lite.c"/>
        <files mask="rpmsg_ns.c"/>
      </source>
      <source relative_path="rpmsg_lite/lib/virtio" project_relative_path="./" type="src">
        <files mask="virtqueue.c"/>
      </source>
      <source relative_path="rpmsg_lite" project_relative_path="./" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
      <source relative_path="rpmsg_lite/doc" project_relative_path="doc" type="image">
        <files mask="arrowdown.png" hidden="true"/>
        <files mask="arrowright.png" hidden="true"/>
        <files mask="bc_s.png" hidden="true"/>
        <files mask="bdwn.png" hidden="true"/>
        <files mask="closed.png" hidden="true"/>
        <files mask="doc.png" hidden="true"/>
        <files mask="doxygen.png" hidden="true"/>
        <files mask="folderclosed.png" hidden="true"/>
        <files mask="folderopen.png" hidden="true"/>
        <files mask="nav_f.png" hidden="true"/>
        <files mask="nav_g.png" hidden="true"/>
        <files mask="nav_h.png" hidden="true"/>
        <files mask="nxp_logo_small.png" hidden="true"/>
        <files mask="open.png" hidden="true"/>
        <files mask="rpmsg_isoosi.png" hidden="true"/>
        <files mask="rpmsg_lite_arch.png" hidden="true"/>
        <files mask="rpmsg_lite_send_receive.png" hidden="true"/>
        <files mask="splitbar.png" hidden="true"/>
        <files mask="sync_off.png" hidden="true"/>
        <files mask="sync_on.png" hidden="true"/>
        <files mask="tab_a.png" hidden="true"/>
        <files mask="tab_b.png" hidden="true"/>
        <files mask="tab_h.png" hidden="true"/>
        <files mask="tab_s.png" hidden="true"/>
      </source>
      <source relative_path="rpmsg_lite/doc" project_relative_path="doc" type="doc">
        <files mask="customdoxygen.css" hidden="true"/>
        <files mask="dir_5a30104352ef4255dc24354b02eb2d20.html" hidden="true"/>
        <files mask="dir_97aefd0d527b934f1d99a682da8fe6a9.html" hidden="true"/>
        <files mask="doxygen.css" hidden="true"/>
        <files mask="group__config.html" hidden="true"/>
        <files mask="group__rpmsg__lite.html" hidden="true"/>
        <files mask="group__rpmsg__ns.html" hidden="true"/>
        <files mask="group__rpmsg__queue.html" hidden="true"/>
        <files mask="index.html" hidden="true"/>
        <files mask="modules.html" hidden="true"/>
        <files mask="navtree.css" hidden="true"/>
        <files mask="rpmsg__default__config_8h.html" hidden="true"/>
        <files mask="rpmsg__default__config_8h_source.html" hidden="true"/>
        <files mask="rpmsg__lite_8h_source.html" hidden="true"/>
        <files mask="rpmsg__ns_8h_source.html" hidden="true"/>
        <files mask="rpmsg__queue_8h_source.html" hidden="true"/>
        <files mask="tabs.css" hidden="true"/>
      </source>
      <source relative_path="rpmsg_lite/doc" project_relative_path="doc" type="script">
        <files mask="dynsections.js" hidden="true"/>
        <files mask="group__config.js" hidden="true"/>
        <files mask="group__rpmsg__lite.js" hidden="true"/>
        <files mask="group__rpmsg__ns.js" hidden="true"/>
        <files mask="group__rpmsg__queue.js" hidden="true"/>
        <files mask="jquery.js" hidden="true"/>
        <files mask="modules.js" hidden="true"/>
        <files mask="navtree.js" hidden="true"/>
        <files mask="navtreedata.js" hidden="true"/>
        <files mask="navtreeindex0.js" hidden="true"/>
        <files mask="resize.js" hidden="true"/>
      </source>
      <source relative_path="rpmsg_lite/doc/search" project_relative_path="doc" type="doc">
        <files mask="all_0.html" hidden="true"/>
        <files mask="all_1.html" hidden="true"/>
        <files mask="all_2.html" hidden="true"/>
        <files mask="all_3.html" hidden="true"/>
        <files mask="all_4.html" hidden="true"/>
        <files mask="all_5.html" hidden="true"/>
        <files mask="all_6.html" hidden="true"/>
        <files mask="all_7.html" hidden="true"/>
        <files mask="classes_0.html" hidden="true"/>
        <files mask="files_0.html" hidden="true"/>
        <files mask="functions_0.html" hidden="true"/>
        <files mask="groups_0.html" hidden="true"/>
        <files mask="nomatches.html" hidden="true"/>
        <files mask="pages_0.html" hidden="true"/>
        <files mask="search.css" hidden="true"/>
        <files mask="typedefs_0.html" hidden="true"/>
        <files mask="variables_0.html" hidden="true"/>
        <files mask="variables_1.html" hidden="true"/>
        <files mask="variables_2.html" hidden="true"/>
        <files mask="variables_3.html" hidden="true"/>
        <files mask="variables_4.html" hidden="true"/>
        <files mask="variables_5.html" hidden="true"/>
        <files mask="variables_6.html" hidden="true"/>
        <files mask="variables_7.html" hidden="true"/>
      </source>
      <source relative_path="rpmsg_lite/doc/search" project_relative_path="doc" type="script">
        <files mask="all_0.js" hidden="true"/>
        <files mask="all_1.js" hidden="true"/>
        <files mask="all_2.js" hidden="true"/>
        <files mask="all_3.js" hidden="true"/>
        <files mask="all_4.js" hidden="true"/>
        <files mask="all_5.js" hidden="true"/>
        <files mask="all_6.js" hidden="true"/>
        <files mask="all_7.js" hidden="true"/>
        <files mask="classes_0.js" hidden="true"/>
        <files mask="files_0.js" hidden="true"/>
        <files mask="functions_0.js" hidden="true"/>
        <files mask="groups_0.js" hidden="true"/>
        <files mask="pages_0.js" hidden="true"/>
        <files mask="search.js" hidden="true"/>
        <files mask="searchdata.js" hidden="true"/>
        <files mask="typedefs_0.js" hidden="true"/>
        <files mask="variables_0.js" hidden="true"/>
        <files mask="variables_1.js" hidden="true"/>
        <files mask="variables_2.js" hidden="true"/>
        <files mask="variables_3.js" hidden="true"/>
        <files mask="variables_4.js" hidden="true"/>
        <files mask="variables_5.js" hidden="true"/>
        <files mask="variables_6.js" hidden="true"/>
        <files mask="variables_7.js" hidden="true"/>
      </source>
      <source relative_path="rpmsg_lite/doc/search" project_relative_path="doc" type="image">
        <files mask="close.png" hidden="true"/>
        <files mask="mag_sel.png" hidden="true"/>
        <files mask="search_l.png" hidden="true"/>
        <files mask="search_m.png" hidden="true"/>
        <files mask="search_r.png" hidden="true"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT595S" relative_path="rpmsg_lite/lib/rpmsg_lite/porting/environment" project_relative_path="env/bm" type="src">
        <files mask="rpmsg_env_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.MIMXRT595S" relative_path="rpmsg_lite/lib/rpmsg_lite/porting/environment" project_relative_path="env/freertos" type="src">
        <files mask="rpmsg_env_freertos.c"/>
      </source>
      <source condition="middleware.freertos-kernel.MIMXRT595S" relative_path="rpmsg_lite/lib/include" project_relative_path="./" type="c_include">
        <files mask="rpmsg_queue.h"/>
      </source>
      <source condition="middleware.freertos-kernel.MIMXRT595S" relative_path="rpmsg_lite/lib/rpmsg_lite" project_relative_path="env/freertos" type="src">
        <files mask="rpmsg_queue.c"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg_lite/lib/include" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg_lite.evkmimxrt595_bm.MIMXRT595S" name="rpmsg_lite_evkmimxrt595_bm" brief="RPMsg-Lite for evkmimxrt595 baremetal application" version="3.1.2" full_name="Remote Procedure Messaging Lite porting layer for evkmimxrt595 board" devices="MIMXRT595S" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg_lite">
      <dependencies>
        <component_dependency value="middleware.multicore.rpmsg_lite.MIMXRT595S"/>
      </dependencies>
      <source relative_path="rpmsg_lite/lib/include/platform/imxrt500_m33" project_relative_path="porting" type="c_include">
        <files mask="rpmsg_platform.h"/>
      </source>
      <source relative_path="rpmsg_lite/lib/rpmsg_lite/porting/platform/imxrt500_m33" project_relative_path="porting" type="src">
        <files mask="rpmsg_platform.c"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg_lite/lib/include/platform/imxrt500_m33" project_relative_path="porting" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg_lite.evkmimxrt595_freertos.MIMXRT595S" name="rpmsg_lite_evkmimxrt595_freertos" brief="RPMsg-Lite for evkmimxrt595 FreeRTOS application" version="3.1.2" full_name="Remote Procedure Messaging Lite porting layer for evkmimxrt595 board" devices="MIMXRT595S" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg_lite">
      <dependencies>
        <all>
          <component_dependency value="middleware.multicore.rpmsg_lite.MIMXRT595S"/>
          <component_dependency value="middleware.freertos-kernel.MIMXRT595S"/>
          <component_dependency value="middleware.freertos-kernel.heap_4.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="rpmsg_lite/lib/include/platform/imxrt500_m33" project_relative_path="porting" type="c_include">
        <files mask="rpmsg_platform.h"/>
      </source>
      <source relative_path="rpmsg_lite/lib/rpmsg_lite/porting/platform/imxrt500_m33" project_relative_path="porting" type="src">
        <files mask="rpmsg_platform.c"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg_lite/lib/include/platform/imxrt500_m33" project_relative_path="porting" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.multicore.rpmsg_lite.evkmimxrt595_fusionf1_bm.MIMXRT595S" name="rpmsg_lite_evkmimxrt595_fusionf1_bm" brief="RPMsg-Lite for evkmimxrt595 baremetal application" version="3.1.2" full_name="Remote Procedure Messaging Lite porting layer for evkmimxrt595 board" devices="MIMXRT595S" user_visible="false" type="middleware" package_base_path="middleware/multicore" project_base_path="rpmsg_lite">
      <dependencies>
        <component_dependency value="middleware.multicore.rpmsg_lite.MIMXRT595S"/>
      </dependencies>
      <source relative_path="rpmsg_lite/lib/include/platform/imxrt500_fusionf1" project_relative_path="porting" type="c_include">
        <files mask="rpmsg_platform.h"/>
      </source>
      <source relative_path="rpmsg_lite/lib/rpmsg_lite/porting/platform/imxrt500_fusionf1" project_relative_path="porting" type="src">
        <files mask="rpmsg_platform.c"/>
      </source>
      <include_paths>
        <include_path relative_path="rpmsg_lite/lib/include/platform/imxrt500_fusionf1" project_relative_path="porting" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.common.MIMXRT595S" name="sdmmc_common" brief="Middleware sdmmc common" version="2.3.0" full_name="SDMMC common stack" devices="MIMXRT595S" category="Memories/SDMMC Stack" user_visible="false" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <source relative_path="common" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdmmc_spec.h"/>
        <files mask="fsl_sdmmc_common.h"/>
      </source>
      <source relative_path="common" project_relative_path="src" type="src">
        <files mask="fsl_sdmmc_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_common.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="common" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.usdhc.MIMXRT595S" name="sdmmc_host_usdhc" brief="Middleware sdmmc host usdhc" version="2.6.0" full_name="Middleware sdmmc host usdhc" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <any_of>
          <component_dependency value="middleware.sdmmc.host.usdhc.interrupt.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.host.usdhc.polling.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.host.usdhc.freertos.MIMXRT595S"/>
        </any_of>
      </dependencies>
      <source relative_path="host/usdhc" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/usdhc" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_host_usdhc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/usdhc" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.usdhc.freertos.MIMXRT595S" name="sdmmc_host_usdhc_freertos" brief="Middleware sdmmc host usdhc freertos" version="2.6.0" full_name="Middleware sdmmc host usdhc freertos" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.osa.freertos.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.usdhc.template.MIMXRT595S"/>
          <component_dependency value="platform.drivers.usdhc.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="host/usdhc/non_blocking" project_relative_path="host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source relative_path="host/usdhc" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/usdhc" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_host_usdhc_freertos_MIMXRT595S_cm33.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/usdhc" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.usdhc.interrupt.MIMXRT595S" name="sdmmc_host_usdhc_interrupt" brief="Middleware sdmmc host usdhc interrupt" version="2.6.0" full_name="Middleware sdmmc host usdhc interrupt" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.osa.bm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.usdhc.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.usdhc.template.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="host/usdhc/non_blocking" project_relative_path="host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source relative_path="host/usdhc" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/usdhc" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_host_usdhc_interrupt_MIMXRT595S_cm33.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/usdhc" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.usdhc.polling.MIMXRT595S" name="sdmmc_host_usdhc_polling" brief="Middleware sdmmc host usdhc polling" version="2.6.0" full_name="Middleware sdmmc host usdhc polling" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.osa.bm.MIMXRT595S"/>
          <component_dependency value="platform.drivers.usdhc.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.usdhc.template.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="host/usdhc/blocking" project_relative_path="host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source relative_path="host/usdhc" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/usdhc" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_host_usdhc_polling_MIMXRT595S_cm33.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/usdhc" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.mmc.MIMXRT595S" name="mmc" brief="Middleware sdmmc mmc" version="2.5.0" full_name="SDMMC mmc stack" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.host.usdhc.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="mmc" project_relative_path="src" type="src">
        <files mask="fsl_mmc.c"/>
      </source>
      <source relative_path="mmc" project_relative_path="inc" type="c_include">
        <files mask="fsl_mmc.h"/>
      </source>
      <source relative_path="mmc" project_relative_path="./mmc" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_mmc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="mmc" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.osa.bm.MIMXRT595S" name="sdmmc_osa_bm" brief="Middleware sdmmc osa_bm" version="2.3.0" full_name="SDMMC common stack" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <component_dependency value="component.osa_bm.MIMXRT595S"/>
      </dependencies>
      <source relative_path="osa" type="c_include">
        <files mask="fsl_sdmmc_osa.h"/>
      </source>
      <source relative_path="osa" type="src">
        <files mask="fsl_sdmmc_osa.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_osa_bm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="osa" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.osa.freertos.MIMXRT595S" name="sdmmc_osa_freertos" brief="Middleware sdmmc osa_freertos" version="2.3.0" full_name="SDMMC common stack" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <component_dependency value="component.osa_free_rtos.MIMXRT595S"/>
      </dependencies>
      <source relative_path="osa" type="c_include">
        <files mask="fsl_sdmmc_osa.h"/>
      </source>
      <source relative_path="osa" type="src">
        <files mask="fsl_sdmmc_osa.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_osa_freertos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="osa" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sd.MIMXRT595S" name="sd" brief="Middleware sdmmc sd" version="2.4.0" full_name="SDMMC sd stack" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.host.usdhc.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="sd" project_relative_path="src" type="src">
        <files mask="fsl_sd.c"/>
      </source>
      <source relative_path="sd" project_relative_path="inc" type="c_include">
        <files mask="fsl_sd.h"/>
      </source>
      <source relative_path="sd" project_relative_path="./sd" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_sd.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="sd" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sdhc.template.MIMXRT595S" name="SDMMC configuration template" brief="Template configuration file to be edited by user." version="1.0.0" full_name="SDMMC configuration template" devices="MIMXRT595S" category="Memories/SDMMC Stack" user_visible="false" type="project_template" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <source relative_path="template/sdhc" type="src">
        <files mask="sdmmc_config.c"/>
      </source>
      <source relative_path="template/sdhc" type="c_include">
        <files mask="sdmmc_config.h"/>
      </source>
      <include_paths>
        <include_path relative_path="template/sdhc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sdif.template.MIMXRT595S" name="SDMMC configuration template" brief="Template configuration file to be edited by user." version="1.0.0" full_name="SDMMC configuration template" devices="MIMXRT595S" category="Memories/SDMMC Stack" user_visible="false" type="project_template" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <source relative_path="template/sdif" type="src">
        <files mask="sdmmc_config.c"/>
      </source>
      <source relative_path="template/sdif" type="c_include">
        <files mask="sdmmc_config.h"/>
      </source>
      <include_paths>
        <include_path relative_path="template/sdif" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sdio.MIMXRT595S" name="sdio" brief="Middleware sdmmc sdio" version="2.4.0" full_name="SDMMC sdio stack" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MIMXRT595S"/>
          <component_dependency value="middleware.sdmmc.host.usdhc.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="sdio" project_relative_path="src" type="src">
        <files mask="fsl_sdio.c"/>
      </source>
      <source relative_path="sdio" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdio.h"/>
      </source>
      <source relative_path="sdio" project_relative_path="./sdio" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="middleware_sdmmc_sdio.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="sdio" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.usdhc.template.MIMXRT595S" name="SDMMC configuration template" brief="Template configuration file to be edited by user." version="1.0.0" full_name="SDMMC configuration template" devices="MIMXRT595S" category="Memories/SDMMC Stack" user_visible="false" type="project_template" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <source relative_path="template/usdhc" type="src">
        <files mask="sdmmc_config.c"/>
      </source>
      <source relative_path="template/usdhc" type="c_include">
        <files mask="sdmmc_config.h"/>
      </source>
      <include_paths>
        <include_path relative_path="template/usdhc" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.MIMXRT595S" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="utilities_misc_utilities.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MIMXRT595S" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="utility_assert.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.MIMXRT595S" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.MIMXRT595S"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="utility_assert_lite.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.MIMXRT595S" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="utility_debug_console.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.MIMXRT595S" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.usart_adapter.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="utility_debug_console_lite.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.MIMXRT595S" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="MIMXRT595S" device_cores="cm33_MIMXRT595S" user_visible="true" type="utilities" package_base_path="core/devices/MIMXRT595S/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MIMXRT595S"/>
          <component_dependency value="component.lists.MIMXRT595S"/>
          <component_dependency value="platform.drivers.common.MIMXRT595S"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm33_MIMXRT595S">
        <files mask="utility_shell.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
