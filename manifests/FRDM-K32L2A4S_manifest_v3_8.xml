<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_SUPER" name="SDKVersion 2.9.0 SuperSet" brief="This is SDK version 2.9.0 manifest file." format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-04-02 04:49:05.008370-->
  <!--This manifest is generated based on sdk repo commit: b1eede1d406d3392a45a06abc2494c2b87a1853b-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="frdmk32l2a4s" name="FRDM-K32L2A4S" href="https://www.nxp.com/pip/FRDM-K32L2A4S" version="1.0.0" package="K32L2A41VLL1A">
      <description>Freedom Development Platform for K32 L2A MCUs</description>
      <image path="core/boards/frdmk32l2a4s" type="image">
        <files mask="frdmk32l2a4s.png"/>
      </image>
      <examples>
        <example id="frdmk32l2a4s_adc16_continuous_edma" name="adc16_continuous_edma" brief="The ADC16 continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. EDMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. EDMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/frdmk32l2a4s/driver_examples/adc16/continuous_edma">
          <external path="examples/frdmk32l2a4s/driver_examples/adc16/continuous_edma" type="xml">
            <files mask="adc16_continuous_edma_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/frdmk32l2a4s/driver_examples/adc16/interrupt">
          <external path="examples/frdmk32l2a4s/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_adc16_low_power" name="adc16_low_power" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/adc16_low_power">
          <external path="examples/frdmk32l2a4s/demo_apps/adc16_low_power" type="xml">
            <files mask="adc16_low_power_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/frdmk32l2a4s/driver_examples/adc16/polling">
          <external path="examples/frdmk32l2a4s/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_bubble" name="bubble" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/bubble">
          <external path="examples/frdmk32l2a4s/demo_apps/bubble" type="xml">
            <files mask="bubble_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_bubble_peripheral" name="bubble_peripheral" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/bubble_peripheral">
          <external path="examples/frdmk32l2a4s/demo_apps/bubble_peripheral" type="xml">
            <files mask="bubble_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/cmp" path="examples/frdmk32l2a4s/driver_examples/cmp/interrupt">
          <external path="examples/frdmk32l2a4s/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/cmp" path="examples/frdmk32l2a4s/driver_examples/cmp/polling">
          <external path="examples/frdmk32l2a4s/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2a4s/driver_examples/crc">
          <external path="examples/frdmk32l2a4s/driver_examples/crc" type="xml">
            <files mask="crc_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_dac_adc" name="dac_adc" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/dac_adc">
          <external path="examples/frdmk32l2a4s/demo_apps/dac_adc" type="xml">
            <files mask="dac_adc_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l2a4s/driver_examples/dac/basic">
          <external path="examples/frdmk32l2a4s/driver_examples/dac/basic" type="xml">
            <files mask="dac_basic_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l2a4s/driver_examples/dac/buffer_interrupt">
          <external path="examples/frdmk32l2a4s/driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_dac_continuous_lptmr_edma" name="dac_continuous_lptmr_edma" brief="The demo shows how to use the LPTMR to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. LPTMR is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by LPTMR and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.While read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l2a4s/driver_examples/dac/continuous_lptmr_edma">
          <external path="examples/frdmk32l2a4s/driver_examples/dac/continuous_lptmr_edma" type="xml">
            <files mask="dac_continuous_lptmr_edma_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_ecompass" name="ecompass" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/ecompass">
          <external path="examples/frdmk32l2a4s/demo_apps/ecompass" type="xml">
            <files mask="ecompass_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_edma_channel_link" name="edma_channel_link" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l2a4s/driver_examples/edma/channel_link">
          <external path="examples/frdmk32l2a4s/driver_examples/edma/channel_link" type="xml">
            <files mask="edma_channel_link_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_edma_interleave_transfer" name="edma_interleave_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l2a4s/driver_examples/edma/interleave_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/edma/interleave_transfer" type="xml">
            <files mask="edma_interleave_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l2a4s/driver_examples/edma/memory_to_memory">
          <external path="examples/frdmk32l2a4s/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_edma_ping_pong_transfer" name="edma_ping_pong_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l2a4s/driver_examples/edma/ping_pong_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/edma/ping_pong_transfer" type="xml">
            <files mask="edma_ping_pong_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l2a4s/driver_examples/edma/scatter_gather">
          <external path="examples/frdmk32l2a4s/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_edma_wrap_transfer" name="edma_wrap_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l2a4s/driver_examples/edma/wrap_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/edma/wrap_transfer" type="xml">
            <files mask="edma_wrap_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_i2c_interrupt_lpi2c_transfer" name="flexio_i2c_interrupt_lpi2c_transfer" brief="The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/i2c/interrupt_lpi2c_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/i2c/interrupt_lpi2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_lpi2c_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/pwm">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_spi_edma_lpspi_transfer_master" name="flexio_spi_edma_lpspi_transfer_master" brief="The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/spi/edma_lpspi_transfer/master">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/spi/edma_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_spi_edma_lpspi_transfer_slave" name="flexio_spi_edma_lpspi_transfer_slave" brief="The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/spi/edma_lpspi_transfer/slave">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/spi/edma_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_spi_int_lpspi_transfer_master" name="flexio_spi_int_lpspi_transfer_master" brief="The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/spi/int_lpspi_transfer/master">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/spi/int_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_spi_int_lpspi_transfer_slave" name="flexio_spi_int_lpspi_transfer_slave" brief="The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/spi/int_lpspi_transfer/slave">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/spi/int_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_uart_edma_transfer" name="flexio_uart_edma_transfer" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/uart/edma_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/uart/edma_transfer" type="xml">
            <files mask="flexio_uart_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/uart/int_rb_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/uart/interrupt_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2a4s/driver_examples/flexio/uart/polling_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk32l2a4s/driver_examples/gpio/input_interrupt">
          <external path="examples/frdmk32l2a4s/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk32l2a4s/driver_examples/gpio/led_output">
          <external path="examples/frdmk32l2a4s/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/hello_world">
          <external path="examples/frdmk32l2a4s/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/led_blinky">
          <external path="examples/frdmk32l2a4s/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpi2c_edma_b2b_transfer_master" name="lpi2c_edma_b2b_transfer_master" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l2a4s/driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="examples/frdmk32l2a4s/driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpi2c_edma_b2b_transfer_slave" name="lpi2c_edma_b2b_transfer_slave" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l2a4s/driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="examples/frdmk32l2a4s/driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpi2c_interrupt" name="lpi2c_interrupt" brief="The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l2a4s/driver_examples/lpi2c/interrupt">
          <external path="examples/frdmk32l2a4s/driver_examples/lpi2c/interrupt" type="xml">
            <files mask="lpi2c_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpi2c_interrupt_b2b_transfer_master" name="lpi2c_interrupt_b2b_transfer_master" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l2a4s/driver_examples/lpi2c/interrupt_b2b_transfer/master">
          <external path="examples/frdmk32l2a4s/driver_examples/lpi2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpi2c_interrupt_b2b_transfer_slave" name="lpi2c_interrupt_b2b_transfer_slave" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l2a4s/driver_examples/lpi2c/interrupt_b2b_transfer/slave">
          <external path="examples/frdmk32l2a4s/driver_examples/lpi2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpi2c_polling_b2b_master" name="lpi2c_polling_b2b_master" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l2a4s/driver_examples/lpi2c/polling_b2b/master">
          <external path="examples/frdmk32l2a4s/driver_examples/lpi2c/polling_b2b/master" type="xml">
            <files mask="lpi2c_polling_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpi2c_polling_b2b_slave" name="lpi2c_polling_b2b_slave" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l2a4s/driver_examples/lpi2c/polling_b2b/slave">
          <external path="examples/frdmk32l2a4s/driver_examples/lpi2c/polling_b2b/slave" type="xml">
            <files mask="lpi2c_polling_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpi2c_read_accel_value_transfer" name="lpi2c_read_accel_value_transfer" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l2a4s/driver_examples/lpi2c/read_accel_value_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/lpi2c/read_accel_value_transfer" type="xml">
            <files mask="lpi2c_read_accel_value_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpit_chained_channel" name="lpit_chained_channel" brief="The LPIT chained channel project is a simple example of the SDK LPIT driver. It sets up the LPIT hardware block to trigger a periodic interrupt after every 1 second in the channel No.0, the channel No.1 chained with channel No.0, if LPIT contain more than two channels, the channel No.2 chained with channel No.1....the channel No.N chained with Channel No.N-1. When the LPIT interrupt is triggered." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/frdmk32l2a4s/driver_examples/lpit/chained_channel">
          <external path="examples/frdmk32l2a4s/driver_examples/lpit/chained_channel" type="xml">
            <files mask="lpit_chained_channel_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpit_single_channel" name="lpit_single_channel" brief="The LPIT single channel project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/frdmk32l2a4s/driver_examples/lpit/single_channel">
          <external path="examples/frdmk32l2a4s/driver_examples/lpit/single_channel" type="xml">
            <files mask="lpit_single_channel_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpspi_edma_b2b_transfer_master" name="lpspi_edma_b2b_transfer_master" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l2a4s/driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="examples/frdmk32l2a4s/driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpspi_edma_b2b_transfer_slave" name="lpspi_edma_b2b_transfer_slave" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l2a4s/driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="examples/frdmk32l2a4s/driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpspi_interrupt" name="lpspi_interrupt" brief="The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt">
          <external path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt" type="xml">
            <files mask="lpspi_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpspi_interrupt_b2b_master" name="lpspi_interrupt_b2b_master" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt_b2b/master">
          <external path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt_b2b/master" type="xml">
            <files mask="lpspi_interrupt_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpspi_interrupt_b2b_slave" name="lpspi_interrupt_b2b_slave" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt_b2b/slave">
          <external path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt_b2b/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpspi_interrupt_b2b_transfer_master" name="lpspi_interrupt_b2b_transfer_master" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt_b2b_transfer/master">
          <external path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpspi_interrupt_b2b_transfer_slave" name="lpspi_interrupt_b2b_transfer_slave" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt_b2b_transfer/slave">
          <external path="examples/frdmk32l2a4s/driver_examples/lpspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpspi_polling_b2b_transfer_master" name="lpspi_polling_b2b_transfer_master" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l2a4s/driver_examples/lpspi/polling_b2b_transfer/master">
          <external path="examples/frdmk32l2a4s/driver_examples/lpspi/polling_b2b_transfer/master" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpspi_polling_b2b_transfer_slave" name="lpspi_polling_b2b_transfer_slave" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l2a4s/driver_examples/lpspi/polling_b2b_transfer/slave">
          <external path="examples/frdmk32l2a4s/driver_examples/lpspi/polling_b2b_transfer/slave" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2a4s/driver_examples/lptmr">
          <external path="examples/frdmk32l2a4s/driver_examples/lptmr" type="xml">
            <files mask="lptmr_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpuart_edma_rb_transfer" name="lpuart_edma_rb_transfer" brief="The lpuart_edma Ring Buffer Example project is to demonstrate usage of the KSDK lpuart driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2a4s/driver_examples/lpuart/edma_rb_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/lpuart/edma_rb_transfer" type="xml">
            <files mask="lpuart_edma_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2a4s/driver_examples/lpuart/edma_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2a4s/driver_examples/lpuart/interrupt">
          <external path="examples/frdmk32l2a4s/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2a4s/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2a4s/driver_examples/lpuart/interrupt_transfer">
          <external path="examples/frdmk32l2a4s/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2a4s/driver_examples/lpuart/polling">
          <external path="examples/frdmk32l2a4s/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_mmcau" name="mmcau" brief="Memory-Mapped Cryptographic Acceleration Unit (MMCAU)This project is a demonstration program that uses the KSDK software for encryption/decryption sampledata using AES-CBC, DES3-CBC and Hash algorithms MD5, SHA1 and SHA256." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="mmcau_examples" path="examples/frdmk32l2a4s/mmcau_examples/mmcau_api">
          <external path="examples/frdmk32l2a4s/mmcau_examples/mmcau_api" type="xml">
            <files mask="mmcau_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_mmdvsq" name="mmdvsq" brief="The MMDVSQ Example project is a demonstration program that uses the KSDK software to Calculation square root and QuotientMMDVSQ Peripheral Driver ExampleStart MMDVSQ ExampleCalculation square root, please enter radicandSquare root of 9 is 3Calculation division to get remainder and quotientEnter dividend and divisorRemainder of 10 and 5 is 0Quotient of 10 and 5 is 2" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2a4s/driver_examples/mmdvsq">
          <external path="examples/frdmk32l2a4s/driver_examples/mmdvsq" type="xml">
            <files mask="mmdvsq_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="examples/frdmk32l2a4s/driver_examples/flash/pflash">
          <external path="examples/frdmk32l2a4s/driver_examples/flash/pflash" type="xml">
            <files mask="pflash_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/power_manager">
          <external path="examples/frdmk32l2a4s/demo_apps/power_manager" type="xml">
            <files mask="power_manager_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/power_mode_switch">
          <external path="examples/frdmk32l2a4s/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2a4s/driver_examples/rtc">
          <external path="examples/frdmk32l2a4s/driver_examples/rtc" type="xml">
            <files mask="rtc_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/rtc_func">
          <external path="examples/frdmk32l2a4s/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_scg" name="scg" brief="The SCG example shows how to use SCG driver: 1. How to setup the SCG clock source. 2. How to use SCG clock while power mode switch. 3. How to use SCG APIs to get clock frequency.This example prints the clock frequency through the terminal using the SDK driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2a4s/driver_examples/scg">
          <external path="examples/frdmk32l2a4s/driver_examples/scg" type="xml">
            <files mask="scg_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2a4s/demo_apps/shell">
          <external path="examples/frdmk32l2a4s/demo_apps/shell" type="xml">
            <files mask="shell_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tpm_combine_pwm" name="tpm_combine_pwm" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2a4s/driver_examples/tpm/combine_pwm">
          <external path="examples/frdmk32l2a4s/driver_examples/tpm/combine_pwm" type="xml">
            <files mask="tpm_combine_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tpm_dual_edge_capture" name="tpm_dual_edge_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2a4s/driver_examples/tpm/dual_edge_capture">
          <external path="examples/frdmk32l2a4s/driver_examples/tpm/dual_edge_capture" type="xml">
            <files mask="tpm_dual_edge_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2a4s/driver_examples/tpm/input_capture">
          <external path="examples/frdmk32l2a4s/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2a4s/driver_examples/tpm/output_compare">
          <external path="examples/frdmk32l2a4s/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2a4s/driver_examples/tpm/pwm_twochannel">
          <external path="examples/frdmk32l2a4s/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2a4s/driver_examples/tpm/simple_pwm">
          <external path="examples/frdmk32l2a4s/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2a4s/driver_examples/tpm/timer">
          <external path="examples/frdmk32l2a4s/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_trng_random" name="trng_random" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/trng" path="examples/frdmk32l2a4s/driver_examples/trng/random">
          <external path="examples/frdmk32l2a4s/driver_examples/trng/random" type="xml">
            <files mask="trng_random_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tsi_v4_low_power_mode" name="tsi_v4_low_power_mode" brief="The tsi_v4_low_power example shows how to use TSI_V4 driver in low power modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Hardware-Trigger scan using interrupt method to wakeup from low power   modes through pad touch;3. Note: you can select which low power mode you want to enter into." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tsi_v4" path="examples/frdmk32l2a4s/driver_examples/tsi_v4/low_power">
          <external path="examples/frdmk32l2a4s/driver_examples/tsi_v4/low_power" type="xml">
            <files mask="tsi_v4_low_power_mode_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tsi_v4_normal_mode" name="tsi_v4_normal_mode" brief="The tsi_v4_normal example shows how to use TSI_V4 driver in normal modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Software-Trigger scan using polling method and interrupt method;3. Then, we start the Hardware-Trigger scan using interrupt method." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tsi_v4" path="examples/frdmk32l2a4s/driver_examples/tsi_v4/normal">
          <external path="examples/frdmk32l2a4s/driver_examples/tsi_v4/normal" type="xml">
            <files mask="tsi_v4_normal_mode_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_tstmr" name="tstmr" brief="The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2a4s/driver_examples/tstmr">
          <external path="examples/frdmk32l2a4s/driver_examples/tstmr" type="xml">
            <files mask="tstmr_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2a4s_wdog32" name="wdog32" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2a4s/driver_examples/wdog32">
          <external path="examples/frdmk32l2a4s/driver_examples/wdog32" type="xml">
            <files mask="wdog32_v3_8.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="K32L2A41xxxxA" name="K32L2A41A" version="1.0.0" full_name="K32L2A41xxxxA" family="K32L2A41A" platform="Kinetis">
      <description>Ultra-Low-Power, Highly Integrated MCU</description>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="vendor" value="NXP"/>
        <metadata key="server.APLimit" value="2"/>
        <metadata key="mtb.sram.base.address" value="0x1FFF8000"/>
      </metadataSet>
      <core id="core0_K32L2A41xxxxA" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_K32L2A41xxxxA" name="PROGRAM_FLASH" addr="00000000" size="00080000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_K32L2A41xxxxA" name="SRAM" addr="1fff8000" size="00020000" type="RAM" access="RW"/>
        <memoryBlock id="USB_RAM_K32L2A41xxxxA" name="USB_RAM" addr="40100000" size="00000800" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="512" ram_size_kb="128"/>
      <package id="K32L2A41VLL1A" name="K32L2A41VLL1A"/>
      <package id="K32L2A41VLH1A" name="K32L2A41VLH1A"/>
      <evaluation_boards>
        <evaluation_board name="frdmk32l2a4s"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.K32L2A41xxxxA" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.K32L2A41xxxxA" name="internal.has_swo" value="false"/>
            <params id="internal.connect.script.debug.mcuxpresso.K32L2A41xxxxA" name="internal.connect.script" value="kinetisconnect.scp"/>
            <params id="internal.Resethandling.debug.K32L2A41xxxxA" name="internal.resethandling" value="VECTRESET"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_K32L2A41xxxxA">
              <driverBinary path="core/devices/K32L2A41A/mcuxpresso" type="binary">
                <files mask="K32L2A.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmk32l2a4s.K32L2A41A" name="frdmk32l2a4s" brief="Board_project_template frdmk32l2a4s" version="1.0.0" full_name="Board_project_template frdmk32l2a4s" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/frdmk32l2a4s/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.K32L2A41A"/>
          <component_dependency value="component.lpuart_adapter.K32L2A41A"/>
          <component_dependency value="platform.drivers.port.K32L2A41A"/>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.gpio.K32L2A41A"/>
          <component_dependency value="platform.drivers.smc.K32L2A41A"/>
          <component_dependency value="platform.drivers.clock.K32L2A41A"/>
          <component_dependency value="device.K32L2A41A_startup.K32L2A41A"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.K32L2A41A"/>
              <component_dependency value="component.serial_manager.K32L2A41A"/>
            </all>
            <component_dependency value="utility.debug_console_lite.K32L2A41A"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.K32L2A41A" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="K32L2A41xxxxA" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.K32L2A41A"/>
          <component_dependency value="platform.Include_dsp.K32L2A41A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.K32L2A41A" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L2A41A" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.K32L2A41A" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.K32L2A41A" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.K32L2A41A" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.K32L2A41A" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.K32L2A41A" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.K32L2A41A" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.K32L2A41A" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.K32L2A41A" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.K32L2A41A" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.K32L2A41A" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L2A41A" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.K32L2A41A" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.K32L2A41A" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.K32L2A41A" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="K32L2A41xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.K32L2A41A" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="K32L2A41xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_common_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm0plus.K32L2A41A" name="CMSIS_Include_core_cm0plus" brief="Cmsis_include_core_cm0plus" version="5.3.0" full_name="Cmsis_include_core_cm0plus" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.K32L2A41A"/>
          <component_dependency value="platform.Include_dsp.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_core_cm0plus_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.K32L2A41A" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="K32L2A41xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_dsp_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.K32L2A41A" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="K32L2A41xxxxA" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.K32L2A41A.K32L2A41A" name="K32L2A41A" brief="Devices_project_template K32L2A41A" version="1.0.0" full_name="Devices_project_template K32L2A41A" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/K32L2A41A/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.K32L2A41A"/>
          <component_dependency value="component.lpuart_adapter.K32L2A41A"/>
          <component_dependency value="platform.drivers.port.K32L2A41A"/>
          <component_dependency value="platform.drivers.gpio.K32L2A41A"/>
          <component_dependency value="platform.drivers.smc.K32L2A41A"/>
          <component_dependency value="platform.drivers.flash.K32L2A41A"/>
          <component_dependency value="device.K32L2A41A_startup.K32L2A41A"/>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.clock.K32L2A41A"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.K32L2A41A"/>
              <component_dependency value="component.serial_manager.K32L2A41A"/>
            </all>
            <component_dependency value="utility.debug_console_lite.K32L2A41A"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.K32L2A41A" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/K32L2A41A/template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L2A41A"/>
          <component_dependency value="platform.drivers.dmamux.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.K32L2A41A" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="K32L2A41xxxxA" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.K32L2A41A" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.timer_manager.K32L2A41A"/>
          <component_dependency value="component.gpio_adapter.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.K32L2A41A" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.osa.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.crc_adapter.K32L2A41A" name="crc_adapter" brief="Component crc_adapter" version="1.0.0" full_name="Component crc_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.crc.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.flash_adapter.K32L2A41A" name="flash_adapter" brief="Component flash_adapter" version="1.0.0" full_name="Component flash_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/internal_flash" project_base_path="component/internal_flash">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.flash.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_flash.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpio_adapter.K32L2A41A" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.0" full_name="Component gpio_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.K32L2A41A"/>
          <component_dependency value="platform.drivers.port.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.K32L2A41A" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.timer_manager.K32L2A41A"/>
          <component_dependency value="component.gpio_adapter.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.K32L2A41A" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lists_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.K32L2A41A" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="utility.debug_console.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.K32L2A41A" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.log.K32L2A41A"/>
          <component_dependency value="utility.debug_console.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.K32L2A41A" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.log.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpi2c_adapter.K32L2A41A" name="lpi2c_adapter" brief="Component lpi2c_adapter" version="1.0.0" full_name="Component lpi2c_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.lpi2c.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpi2c.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpit_adapter.K32L2A41A" name="lpit_adapter" brief="Component lpit_adapter" version="1.0.0" full_name="Component lpit_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.lpit.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpit.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpit_time_stamp_adapter.K32L2A41A" name="lpit time stamp adapter" brief="Component lpit time stamp adapter" version="1.0.0" full_name="component lpit time stamp adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/time_stamp" project_base_path="component/time_stamp">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.lpit.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_time_stamp.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpit_time_stamp.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_adapter.K32L2A41A" name="lptmr_adapter" brief="Component lptmr_adapter" version="1.0.0" full_name="Component lptmr_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.lptmr.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_time_stamp_adapter.K32L2A41A" name="lptmr time stamp adapter" brief="Component lptmr time stamp adapter" version="1.0.0" full_name="component lptmr time stamp adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/time_stamp" project_base_path="component/time_stamp">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.lptmr.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_time_stamp.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr_time_stamp.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_adapter.K32L2A41A" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.lpuart.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lpuart_adapter_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.K32L2A41A" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.lists.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.K32L2A41A" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.lists.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.messaging.K32L2A41A" name="messaging" brief="Component messaging" version="1.0.0" full_name="Component messaging" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" category="Device/SDK Drivers" user_visible="true" type="other" package_base_path="core/components/messaging" project_base_path="component/messaging">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.lists.K32L2A41A"/>
          <component_dependency value="component.mem_manager.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_messaging.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_messaging.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.K32L2A41A" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.lists.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.K32L2A41A" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.K32L2A41A" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_osa_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.K32L2A41A" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.lists.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.K32L2A41A" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="utility.debug_console.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_tpm_adapter.K32L2A41A" name="pwm_tpm_adapter" brief="Component pwm_tpm_adapter" version="1.0.0" full_name="Component pwm_tpm_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.tpm.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.K32L2A41A" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.lists.K32L2A41A"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.K32L2A41A"/>
            <component_dependency value="component.serial_manager_virtual.K32L2A41A"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.K32L2A41A" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.K32L2A41A"/>
          <component_dependency value="component.serial_manager.K32L2A41A"/>
          <component_dependency value="platform.drivers.lpuart.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_uart_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.K32L2A41A" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.K32L2A41A"/>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.K32L2A41A" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.K32L2A41A" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.K32L2A41A" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="component.lists.K32L2A41A"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.K32L2A41A"/>
            <component_dependency value="component.lptmr_adapter.K32L2A41A"/>
            <component_dependency value="component.lpit_adapter.K32L2A41A"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.tpm_adapter.K32L2A41A" name="tpm_adapter" brief="Component tpm_adapter" version="1.0.0" full_name="Component tpm_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.tpm.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.trng_adapter.K32L2A41A" name="trng_adapter" brief="Component trng_adapter" version="1.0.0" full_name="Component trng_adapter" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.trng.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_trng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.K32L2A41A_CMSIS.K32L2A41A" name="K32L2A41A_CMSIS" brief="Device K32L2A41A_cmsis" version="1.0.0" full_name="Device K32L2A41A_cmsis" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/K32L2A41A" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.Include_core_cm0plus.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="K32L2A41A.h"/>
        <files mask="K32L2A41A_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_K32L2A41A_CMSIS_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.K32L2A41A_debugger.K32L2A41A" name="K32L2A41A_debugger" brief="Device K32L2A41A_debugger" version="1.0.0" full_name="Device K32L2A41A_debugger" devices="K32L2A41xxxxA" user_visible="true" type="debugger" package_base_path="core/devices/K32L2A41A" project_base_path="K32L2A41A">
      <source relative_path="./" type="xml">
        <files mask="K32L2A41A.xml"/>
      </source>
    </component>
    <component id="platform.devices.K32L2A41A_linker.K32L2A41A" name="K32L2A41A_linker" brief="Device K32L2A41A_linker" version="1.0.0" full_name="Device K32L2A41A_linker" devices="K32L2A41xxxxA" user_visible="true" type="linker" package_base_path="core/devices/K32L2A41A" project_base_path="K32L2A41A">
      <source toolchain="armgcc" relative_path="gcc" type="linker">
        <files mask="K32L2A41xxxxA_flash.ld"/>
        <files mask="K32L2A41xxxxA_ram.ld"/>
      </source>
    </component>
    <component id="device.K32L2A41A_startup.K32L2A41A" name="K32L2A41A_startup" brief="Device K32L2A41A_startup" version="1.1.0" full_name="Device K32L2A41A_startup" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/K32L2A41A" project_base_path="startup">
      <dependencies>
        <component_dependency value="device.K32L2A41A_system.K32L2A41A"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include">
        <files mask="startup_K32L2A41A.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c">
        <files mask="startup_k32l2a41a.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp">
        <files mask="startup_k32l2a41a.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_K32L2A41A_startup_K32L2A41A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="device.K32L2A41A_system.K32L2A41A" name="K32L2A41A_system" brief="Device K32L2A41A_system" version="1.0.0" full_name="Device K32L2A41A_system" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/K32L2A41A" project_base_path="device">
      <dependencies>
        <component_dependency value="device.K32L2A41A_CMSIS.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_K32L2A41A.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_K32L2A41A.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_K32L2A41A_system_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.K32L2A41A.K32L2A41A" name="K32L2A41A" brief="Docs k32l2a41a" version="1.0.0" full_name="Docs k32l2a41a" devices="K32L2A41xxxxA" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for FRDM-K32L2A4S.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for FRDM-K32L2A4S.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.K32L2A41A" name="adc" brief="ADC16 Driver" version="2.2.0" full_name="ADC16 Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/adc16" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_adc16_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.K32L2A41A" name="clock" brief="Clock Driver" version="2.3.1" full_name="Clock Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/devices/K32L2A41A/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_clock_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cmp.K32L2A41A" name="cmp" brief="CMP Driver" version="2.0.2" full_name="CMP Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/cmp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_cmp_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.K32L2A41A" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.K32L2A41A"/>
          <component_dependency value="device.K32L2A41A_CMSIS.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_common_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.crc.K32L2A41A" name="crc" brief="CRC Driver" version="2.0.3" full_name="CRC Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/crc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_crc_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dac.K32L2A41A" name="dac" brief="DAC Driver" version="2.0.2" full_name="DAC Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/dac" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dac_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmamux.K32L2A41A" name="dmamux" brief="DMAMUX Driver" version="2.0.5" full_name="DMAMUX Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/dmamux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dmamux_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.edma.K32L2A41A" name="edma" brief="EDMA Driver" version="2.4.1" full_name="EDMA Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/edma" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
          <component_dependency value="platform.drivers.dmamux.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_edma_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flash.K32L2A41A" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flash" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flash_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio.K32L2A41A" name="flexio" brief="FLEXIO Driver" version="2.0.4" full_name="FLEXIO Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_camera.K32L2A41A" name="flexio_camera" brief="FLEXIO Driver" version="2.1.3" full_name="FLEXIO CAMERA Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_camera.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_camera.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_camera_edma.K32L2A41A" name="flexio_camera_edma" brief="FLEXIO CAMERA EDMA Driver" version="2.1.3" full_name="FLEXIO CAMERA EDMA Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_camera.K32L2A41A"/>
          <component_dependency value="platform.drivers.edma.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_camera_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_camera_edma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2c_master.K32L2A41A" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.4.0" full_name="FLEXIO I2C Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_i2c_master_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s.K32L2A41A" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.2.0" full_name="FLEXIO I2S Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s_edma.K32L2A41A" name="flexio_i2s_edma" brief="FLEXIO I2S EDMA Driver" version="2.1.7" full_name="FLEXIO I2S EDMA Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L2A41A"/>
          <component_dependency value="platform.drivers.flexio_i2s.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s_edma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_mculcd.K32L2A41A" name="flexio_mculcd" brief="FLEXIO MCULCD Driver" version="2.0.5" full_name="FLEXIO MCULCD Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_mculcd.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_mculcd.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_mculcd_edma.K32L2A41A" name="flexio_mculcd_edma" brief="FLEXIO MCULCD EDMA Driver" version="2.0.4" full_name="FLEXIO MCULCD EDMA Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_mculcd.K32L2A41A"/>
          <component_dependency value="platform.drivers.edma.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_mculcd_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_mculcd_edma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi.K32L2A41A" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.2.0" full_name="FLEXIO SPI Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_spi_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi_edma.K32L2A41A" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.2.0" full_name="FLEXIO SPI EDMA Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L2A41A"/>
          <component_dependency value="platform.drivers.flexio_spi.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_spi_edma_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart.K32L2A41A" name="flexio_uart" brief="FLEXIO UART Driver" version="2.3.0" full_name="FLEXIO UART Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_uart_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart_edma.K32L2A41A" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.3.0" full_name="FLEXIO UART EDMA Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_uart.K32L2A41A"/>
          <component_dependency value="platform.drivers.edma.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_uart_edma_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.fxos8700cq.K32L2A41A" name="fxos8700cq" brief="Driver fxos8700cq" version="1.0.0" full_name="Driver fxos8700cq" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="board_component" package_base_path="core/components/fxos8700cq" project_base_path="accel">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_fxos8700cq_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpio.K32L2A41A" name="gpio" brief="GPIO Driver" version="2.5.1" full_name="GPIO Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_gpio_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.intmux.K32L2A41A" name="intmux" brief="INTMUX Driver" version="2.0.4" full_name="INTMUX Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/intmux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_intmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_intmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_intmux_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.llwu.K32L2A41A" name="llwu" brief="LLWU Driver" version="2.0.5" full_name="LLWU Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/llwu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_llwu_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c.K32L2A41A" name="i2c" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpi2c_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_edma.K32L2A41A" name="i2c_edma" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Edma Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L2A41A"/>
          <component_dependency value="platform.drivers.lpi2c.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpi2c_edma_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpit.K32L2A41A" name="lpit" brief="LPIT Driver" version="2.0.2" full_name="LPIT Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpit" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpit.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpit.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpit_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi.K32L2A41A" name="lpspi" brief="LPSPI Driver" version="2.1.0" full_name="LPSPI Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpspi_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_edma.K32L2A41A" name="lpspi_edma" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Edma Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L2A41A"/>
          <component_dependency value="platform.drivers.lpspi.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpspi_edma_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lptmr.K32L2A41A" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lptmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lptmr_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart.K32L2A41A" name="lpuart" brief="LPUART Driver" version="2.4.1" full_name="LPUART Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_edma.K32L2A41A" name="lpuart_edma" brief="LPUART Driver" version="2.4.0" full_name="LPUART Edma Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L2A41A"/>
          <component_dependency value="platform.drivers.lpuart.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_edma_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mmdvsq.K32L2A41A" name="mmdvsq" brief="MMDVSQ Driver" version="2.0.3" full_name="MMDVSQ Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/mmdvsq" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mmdvsq.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mmdvsq.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mmdvsq_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pmc.K32L2A41A" name="pmc" brief="PMC Driver" version="2.0.3" full_name="PMC Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/pmc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pmc_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.port.K32L2A41A" name="port" brief="PORT Driver" version="2.1.1" full_name="PORT Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/port" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_port_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rcm.K32L2A41A" name="rcm" brief="RCM Driver" version="2.0.4" full_name="RCM Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/rcm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rcm_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rtc.K32L2A41A" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/rtc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rtc_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sim.K32L2A41A" name="sim" brief="SIM Driver" version="2.1.2" full_name="SIM Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/sim" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sim_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.smartcard_emvsim.K32L2A41A" name="smartcard_emvsim" brief="SMARTCARD EMVSIM Driver" version="2.2.2" full_name="SMARTCARD EMVSIM Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/smartcard" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smartcard.h"/>
        <files mask="fsl_smartcard_emvsim.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smartcard_emvsim.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.smartcard_phy_emvsim.K32L2A41A" name="smartcard_phy_emvsim" brief="SMARTCARD PHY EMVSIM, use only one SMARTCARD PHY in the project" version="2.2.2" full_name="SMARTCARD PHY EMVSIM" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/smartcard" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.smartcard_emvsim.K32L2A41A"/>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smartcard_phy.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smartcard_phy_emvsim.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.smc.K32L2A41A" name="smc" brief="SMC Driver" version="2.0.7" full_name="SMC Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/smc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_smc_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tpm.K32L2A41A" name="tpm" brief="TPM Driver" version="2.0.7" full_name="TPM Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/tpm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_tpm_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.trgmux.K32L2A41A" name="trgmux" brief="TRGMUX Driver" version="2.0.1" full_name="TRGMUX Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/trgmux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trgmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_trgmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_trgmux_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.trng.K32L2A41A" name="trng" brief="TRNG Driver" version="2.0.12" full_name="TRNG Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/trng" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_trng.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trng.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_trng_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tsi_v4.K32L2A41A" name="tsi_v4" brief="TSI Driver" version="2.1.3" full_name="TSI Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/tsi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tsi_v4.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_tsi_v4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_tsi_v4_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tstmr.K32L2A41A" name="tstmr" brief="TSTMR Driver" version="2.0.0" full_name="TSTMR Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/tstmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tstmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_tstmr_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.vref.K32L2A41A" name="vref" brief="VREF Driver" version="2.1.2" full_name="VREF Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/vref" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_vref.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wdog32.K32L2A41A" name="wdog" brief="WDOG32 Driver" version="2.0.4" full_name="WDOG32 Driver" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/wdog32" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wdog32.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wdog32.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wdog32_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.K32L2A41A" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="K32L2A41xxxxA" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_baremetal_K32L2A41A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.mmcau.cm0p.K32L2A41A" name="mmcau_cm0p" brief="MMCAU library for ARM Cortex M0+ core" version="2.0.1" full_name="Kinetis MMCAU security function library for Arm Cortex-M0+" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" category="Security/MMCAU library" user_visible="true" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <dependencies>
        <all>
          <component_dependency value="middleware.mmcau.common_files.K32L2A41A"/>
          <component_dependency value="platform.drivers.clock.K32L2A41A"/>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
        </all>
      </dependencies>
      <source toolchain="armgcc mcuxpresso" relative_path="asm-cm0p" type="lib">
        <files mask="lib_mmcau-cm0p.a"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_mmcau_cm0p_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mmcau.common_files.K32L2A41A" name="mmcau" brief="MMCAU common library source files" version="2.0.1" full_name="Kinetis MMCAU common source files" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" category="Security/MMCAU library" user_visible="true" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="cau_api.h"/>
        <files mask="fsl_mmcau.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mmcau.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_mmcau_common_files_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mmcau.mmcau_files.K32L2A41A" name="mmcau" brief="MMCAU security function library source files" version="2.0.1" full_name="Kinetis MMCAU security function library source files" devices="K32L2A41xxxxA" category="Security/MMCAU library" user_visible="false" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <source relative_path="./" type="doc">
        <files mask="README.txt"/>
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source relative_path="asm-cm0p/src" type="other" device_cores="core0_K32L2A41xxxxA">
        <files mask="cau2_defines.hdr"/>
      </source>
      <source relative_path="asm-cm0p/src" type="asm_include" device_cores="core0_K32L2A41xxxxA">
        <files mask="mmcau_sha1_functions.s"/>
        <files mask="mmcau_md5_functions.s"/>
        <files mask="mmcau_sha256_functions.s"/>
        <files mask="mmcau_aes_functions.s"/>
        <files mask="mmcau_des_functions.s"/>
      </source>
    </component>
    <component id="middleware.mmcau.unused_files.K32L2A41A" name="unused_files" brief="MMCAU files unused by projects" version="2.0.1" full_name="MMCAU library unused files" devices="K32L2A41xxxxA" user_visible="false" type="other" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <source exclude="true" relative_path="doxygen" type="other">
        <files mask="fsl_mmcau.dox" hidden="true"/>
      </source>
    </component>
    <component id="middleware.usb.common_header.K32L2A41A" name="USB Common Header" brief="Middleware usb common_header" version="2.7.0" full_name="USB Common Header" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" category="USB/USB Common Header" user_visible="true" type="middleware" package_base_path="core/middleware/usb" project_base_path="usb">
      <dependencies>
        <component_dependency value="component.osa.K32L2A41A"/>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_usb_common_header_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.common_header.K32L2A41A" name="USB Device Common Header" brief="Middleware usb device common_header" version="2.7.0" full_name="USB Device Common Header" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="core/middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.K32L2A41A"/>
          <component_dependency value="middleware.usb.common_header.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="device" project_relative_path="device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source relative_path="device" project_relative_path="device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_usb_device_common_header_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="device" project_relative_path="device/include" type="c_include"/>
        <include_path relative_path="device" project_relative_path="device/source" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.K32L2A41A" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utilities_misc_utilities_K32L2A41A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.K32L2A41A" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_K32L2A41A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.K32L2A41A" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_lite_K32L2A41A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.K32L2A41A" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.K32L2A41A"/>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.K32L2A41A" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.K32L2A41A"/>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_lite_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.notifier.K32L2A41A" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/devices/K32L2A41A/utilities" project_base_path="utilities/utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2A41A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_notifier_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.K32L2A41A" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="K32L2A41xxxxA" device_cores="core0_K32L2A41xxxxA" user_visible="true" type="utilities" package_base_path="core/devices/K32L2A41A/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.K32L2A41A"/>
          <component_dependency value="component.lists.K32L2A41A"/>
          <component_dependency value="platform.drivers.common.K32L2A41A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_shell_K32L2A41A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
