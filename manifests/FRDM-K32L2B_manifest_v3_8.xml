<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_SUPER" name="SDKVersion 2.9.0 SuperSet" brief="This is SDK version 2.9.0 manifest file." format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-05-13 07:17:36.789167-->
  <!--This manifest is generated based on sdk repo commit: 242d157ba29afc4bbd1dac95f382a1491bc2daf5-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="frdmk32l2b" name="FRDM-K32L2B" href="https://www.nxp.com/pip/FRDM-K32L2B3" version="1.0.0" package="K32L2B31VLH0A">
      <description>Freedom Development Platform for K32 L2B MCUs</description>
      <image path="core/boards/frdmk32l2b" type="image">
        <files mask="frdmk32l2b.png"/>
      </image>
      <examples>
        <example id="frdmk32l2b_adc16_continuous_dma" name="adc16_continuous_dma" brief="The ADC16 continuous DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. DMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. DMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/frdmk32l2b/driver_examples/adc16/continuous_dma">
          <external path="examples/frdmk32l2b/driver_examples/adc16/continuous_dma" type="xml">
            <files mask="adc16_continuous_dma_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/frdmk32l2b/driver_examples/adc16/interrupt">
          <external path="examples/frdmk32l2b/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_adc16_low_power" name="adc16_low_power" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/adc16_low_power">
          <external path="examples/frdmk32l2b/demo_apps/adc16_low_power" type="xml">
            <files mask="adc16_low_power_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_adc16_low_power_async_dma" name="adc16_low_power_async_dma" brief="The ADC Low Power Async DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 100 ms, low power timer trigger the ADC module convertvalue on ADC channel. After 16 times(1,6s) the DMA transfer finish interrupt wake up the CPU to process sampled data, print result touser and toggle LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/adc16_low_power_async_dma">
          <external path="examples/frdmk32l2b/demo_apps/adc16_low_power_async_dma" type="xml">
            <files mask="adc16_low_power_async_dma_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/frdmk32l2b/driver_examples/adc16/polling">
          <external path="examples/frdmk32l2b/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_bubble" name="bubble" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/bubble">
          <external path="examples/frdmk32l2b/demo_apps/bubble" type="xml">
            <files mask="bubble_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_bubble_peripheral" name="bubble_peripheral" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/bubble_peripheral">
          <external path="examples/frdmk32l2b/demo_apps/bubble_peripheral" type="xml">
            <files mask="bubble_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/cmp" path="examples/frdmk32l2b/driver_examples/cmp/interrupt">
          <external path="examples/frdmk32l2b/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/cmp" path="examples/frdmk32l2b/driver_examples/cmp/polling">
          <external path="examples/frdmk32l2b/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_cop" name="cop" brief="The COP Example project is to demonstrate usage of the KSDK cop driver.In this example, after 10 times of refreshing, a timeout reset is generated.Please notice that because COP control registers are write-once only, so the COP_Init function and the COP_Disable function can be called only once after reset.In SystemInit() function which is called in startup code, there is an operation to disable the watchdog if macro DISABLE_WDOG is defined as 0, and by default if the DISABLE_WDOG is not defined, the DISABLE_WDOG is defined as 1. So this example has a special project setting that defines the DISABLE_WDOG macro to 0 so the startup code will skip the disable COP WDOG operation." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2b/driver_examples/cop">
          <external path="examples/frdmk32l2b/driver_examples/cop" type="xml">
            <files mask="cop_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_dac_adc" name="dac_adc" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/dac_adc">
          <external path="examples/frdmk32l2b/demo_apps/dac_adc" type="xml">
            <files mask="dac_adc_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l2b/driver_examples/dac/basic">
          <external path="examples/frdmk32l2b/driver_examples/dac/basic" type="xml">
            <files mask="dac_basic_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l2b/driver_examples/dac/buffer_interrupt">
          <external path="examples/frdmk32l2b/driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_dac_continuous_pit_dma" name="dac_continuous_pit_dma" brief="The demo shows how to use the PIT to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. PIT is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by PIT and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.While read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l2b/driver_examples/dac/continuous_pit_dma">
          <external path="examples/frdmk32l2b/driver_examples/dac/continuous_pit_dma" type="xml">
            <files mask="dac_continuous_pit_dma_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_dma_channel_link" name="dma_channel_link" brief="The DMA wrap transfer example is a simple demonstration program that uses the SDK software.It executes wrap transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/frdmk32l2b/driver_examples/dma/channel_link">
          <external path="examples/frdmk32l2b/driver_examples/dma/channel_link" type="xml">
            <files mask="dma_channel_link_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_dma_memory_to_memory" name="dma_memory_to_memory" brief="The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/frdmk32l2b/driver_examples/dma/memory_to_memory">
          <external path="examples/frdmk32l2b/driver_examples/dma/memory_to_memory" type="xml">
            <files mask="dma_memory_to_memory_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_dma_ring_buffer" name="dma_ring_buffer" brief="The DMA ring buffer example is a simple demonstration program that uses the SDK software.It demostrates how to implement ring buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/frdmk32l2b/driver_examples/dma/ring_buffer">
          <external path="examples/frdmk32l2b/driver_examples/dma/ring_buffer" type="xml">
            <files mask="dma_ring_buffer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_dma_wrap_transfer" name="dma_wrap_transfer" brief="The DMA wrap transfer example is a simple demonstration program that uses the SDK software.It executes wrap transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/frdmk32l2b/driver_examples/dma/wrap_transfer">
          <external path="examples/frdmk32l2b/driver_examples/dma/wrap_transfer" type="xml">
            <files mask="dma_wrap_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_i2c_interrupt_i2c_transfer" name="flexio_i2c_interrupt_i2c_transfer" brief="The flexio_i2c_interrupt example shows how to use flexio i2c master driver in interrupt way:In this example, a flexio simulated i2c master connect to an I2C slave." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/i2c/interrupt_i2c_transfer">
          <external path="examples/frdmk32l2b/driver_examples/flexio/i2c/interrupt_i2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_i2c_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/pwm">
          <external path="examples/frdmk32l2b/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_spi_dma_spi_transfer_master" name="flexio_spi_dma_spi_transfer_master" brief="The flexio_spi_master_dma_spi_slave example shows how to use flexio spi master driver in dma way:In this example, a flexio simulated master connect to a spi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/spi/dma_spi_transfer/master">
          <external path="examples/frdmk32l2b/driver_examples/flexio/spi/dma_spi_transfer/master" type="xml">
            <files mask="flexio_spi_dma_spi_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_spi_dma_spi_transfer_slave" name="flexio_spi_dma_spi_transfer_slave" brief="The flexio_spi_slave_dma_spi_master example shows how to use flexio spi slave driver in dma way:In this example, a flexio simulated slave connect to a spi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/spi/dma_spi_transfer/slave">
          <external path="examples/frdmk32l2b/driver_examples/flexio/spi/dma_spi_transfer/slave" type="xml">
            <files mask="flexio_spi_dma_spi_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_spi_int_spi_transfer_master" name="flexio_spi_int_spi_transfer_master" brief="The flexio_spi_master_interrupt_spi_slave example shows how to use flexio spi master driver in interrupt way:In this example, a flexio simulated master connect to a spi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/spi/int_spi_transfer/master">
          <external path="examples/frdmk32l2b/driver_examples/flexio/spi/int_spi_transfer/master" type="xml">
            <files mask="flexio_spi_int_spi_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_spi_int_spi_transfer_slave" name="flexio_spi_int_spi_transfer_slave" brief="The flexio_spi_slave_interrupt_spi_master example shows how to use flexio spi slave driver in interrupt way:In this example, a flexio simulated slave connect to a spi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/spi/int_spi_transfer/slave">
          <external path="examples/frdmk32l2b/driver_examples/flexio/spi/int_spi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_spi_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_uart_dma_transfer" name="flexio_uart_dma_transfer" brief="The flexio_uart_dma example shows how to use flexio uart driver in dma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/uart/dma_transfer">
          <external path="examples/frdmk32l2b/driver_examples/flexio/uart/dma_transfer" type="xml">
            <files mask="flexio_uart_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/uart/int_rb_transfer">
          <external path="examples/frdmk32l2b/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/uart/interrupt_transfer">
          <external path="examples/frdmk32l2b/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l2b/driver_examples/flexio/uart/polling_transfer">
          <external path="examples/frdmk32l2b/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_event">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_generic">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_hello">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_i2c" name="freertos_i2c" brief="The freertos_i2c example shows an application using RTOS tasks with I2C driver:The example supports 2 different connections:On board connection and board to board connection.With one board connection, 2 I2C instances of the same board are used. One i2c instance used as I2C master and another I2C instance used as I2C slave .    Default settings in freertos_i2c.c (in folder boards/&lt;board&gt;/rtos_examples/freertos_i2c) is applied.    Two tasks are created. One task is associated with an I2C master operation and another task deals with I2C slave operation.    1. I2C master task sends data to I2C slave task.    2. I2C master task reads data sent back from I2C slave task.    The transmit data and the receive data of both I2C master task and I2C slave task are printed out on terminal.With board to board connection, one I2C instance on one board is used as I2C master and the I2C instance on other board is used as I2C slave. Tasks are created to run on each board to handle I2C communication.    File freertos_i2c.c should have following definitions:    #define EXAMPLE_CONNECT_I2C BOARD_TO_BOARD    For board used as I2C master:        #define I2C_MASTER_SLAVE isMASTER    For board used as I2C slave:        #define I2C_MASTER_SLAVE isSLAVE" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_i2c">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_i2c" type="xml">
            <files mask="freertos_i2c_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_lpuart" name="freertos_lpuart" brief="The LPUART example for FreeRTOS demonstrates the possibility to use the LPUART driver in the RTOS.The example uses single instance of LPUART IP and writes string into, then reads back chars.After every 4B received, these are sent back on LPUART." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_lpuart">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_lpuart" type="xml">
            <files mask="freertos_lpuart_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_mutex">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_queue">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_segger_sysview" name="freertos_segger_sysview" brief="Segger Sysview demo shows the basic capabilities of Segger System Viewer tool.Required software:    - J-Link Software and Documentation Pack    - SystemView - Real-time analysis and visualization    - J-Link OpenSDA - Board-Specific Firmwarescan be downloaded from https://www.segger.com/downloads/jlinkDemo requires JLink connected. The JLink can be external probe or on board SDA debugger.In case of SDA debugger you have to change firmware to J-Link OpenSDA by holding board RESET button while power up board. The board is then detected as USB mass storage device and it's required to copy the .bin firmware to the device. When it's done you have to reset the board once more." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples/visualization" path="examples/frdmk32l2b/rtos_examples/visualization/freertos_segger_sysview">
          <external path="examples/frdmk32l2b/rtos_examples/visualization/freertos_segger_sysview" type="xml">
            <files mask="freertos_segger_sysview_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_sem">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_sem_static" name="freertos_sem_static" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_sem_static">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_sem_static" type="xml">
            <files mask="freertos_sem_static_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_spi" name="freertos_spi" brief="The freertos_spi example shows how to use SPI driver in FreeRTOS:In this example , one spi instance is used as SPI master with blocking and another spi instance is used as SPI slave.1. SPI master sends/receives data using task blocking calls to/from SPI slave. (SPI Slave uses interrupt to receive/sendthe data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_spi">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_spi" type="xml">
            <files mask="freertos_spi_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_swtimer">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using GPT module." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_tickless">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_freertos_uart" name="freertos_uart" brief="The UART example for FreeRTOS demonstrates the possibility to use the UART driver in the RTOS.The example uses single instance of UART IP and writes string into, then reads back chars.After every 4B received, these are sent back on UART." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk32l2b/rtos_examples/freertos_uart">
          <external path="examples/frdmk32l2b/rtos_examples/freertos_uart" type="xml">
            <files mask="freertos_uart_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk32l2b/driver_examples/gpio/input_interrupt">
          <external path="examples/frdmk32l2b/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk32l2b/driver_examples/gpio/led_output">
          <external path="examples/frdmk32l2b/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/hello_world">
          <external path="examples/frdmk32l2b/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_i2c_dma_b2b_transfer_master" name="i2c_dma_b2b_transfer_master" brief="The i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk32l2b/driver_examples/i2c/dma_b2b_transfer/master">
          <external path="examples/frdmk32l2b/driver_examples/i2c/dma_b2b_transfer/master" type="xml">
            <files mask="i2c_dma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_i2c_dma_b2b_transfer_slave" name="i2c_dma_b2b_transfer_slave" brief="The i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk32l2b/driver_examples/i2c/dma_b2b_transfer/slave">
          <external path="examples/frdmk32l2b/driver_examples/i2c/dma_b2b_transfer/slave" type="xml">
            <files mask="i2c_dma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_i2c_interrupt" name="i2c_interrupt" brief="The i2c_functional_interrupt example shows how to use I2C functional driver to build a interrupt based application:In this example , one i2c instance used as I2C master and another i2c instance used as I2C slave .1. I2C master send data to I2C slave in interrupt . (I2C Slave using interrupt to receive the data)2. I2C master read data from I2C slave in interrupt . (I2C Slave using interrupt to send the data)3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk32l2b/driver_examples/i2c/interrupt">
          <external path="examples/frdmk32l2b/driver_examples/i2c/interrupt" type="xml">
            <files mask="i2c_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk32l2b/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="examples/frdmk32l2b/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk32l2b/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="examples/frdmk32l2b/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_i2c_polling_b2b_transfer_master" name="i2c_polling_b2b_transfer_master" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk32l2b/driver_examples/i2c/polling_b2b_transfer/master">
          <external path="examples/frdmk32l2b/driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="i2c_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_i2c_polling_b2b_transfer_slave" name="i2c_polling_b2b_transfer_slave" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk32l2b/driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="examples/frdmk32l2b/driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="i2c_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_i2c_read_accel_value_transfer" name="i2c_read_accel_value_transfer" brief="The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk32l2b/driver_examples/i2c/read_accel_value_transfer">
          <external path="examples/frdmk32l2b/driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="i2c_read_accel_value_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/led_blinky">
          <external path="examples/frdmk32l2b/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2b/driver_examples/lptmr">
          <external path="examples/frdmk32l2b/driver_examples/lptmr" type="xml">
            <files mask="lptmr_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_lpuart_dma_rb_transfer" name="lpuart_dma_rb_transfer" brief="The lpuart_dma ring buffer example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2b/driver_examples/lpuart/dma_rb_transfer">
          <external path="examples/frdmk32l2b/driver_examples/lpuart/dma_rb_transfer" type="xml">
            <files mask="lpuart_dma_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_lpuart_dma_transfer" name="lpuart_dma_transfer" brief="The lpuart_dma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2b/driver_examples/lpuart/dma_transfer">
          <external path="examples/frdmk32l2b/driver_examples/lpuart/dma_transfer" type="xml">
            <files mask="lpuart_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2b/driver_examples/lpuart/interrupt">
          <external path="examples/frdmk32l2b/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2b/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="examples/frdmk32l2b/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2b/driver_examples/lpuart/interrupt_transfer">
          <external path="examples/frdmk32l2b/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l2b/driver_examples/lpuart/polling">
          <external path="examples/frdmk32l2b/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_mcglite" name="mcglite" brief="The MCG_Lite example shows how to use MCG_Lite driver: 1. How to use the mode functions for MCG_Lite mode switch. 2. How to use the frequency functions to get current MCG_Lite frequency. 3. Work flow  Reset mode --&gt; LIRC8M    LIRC8M --&gt; HIRC    HIRC   --&gt; LIRC2M    LIRC2M --&gt; EXT    EXT    --&gt; HIRC    HIRC   --&gt; LIRC8M    LIRC8M --&gt; EXT    EXT    --&gt; LIRC2M    LIRC2M --&gt; HIRC    HIRC   --&gt; EXT    EXT    --&gt; LIRC8M    LIRC8M --&gt; LIRC2M    LIRC2M --&gt; LIRC8MIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2b/driver_examples/mcglite">
          <external path="examples/frdmk32l2b/driver_examples/mcglite" type="xml">
            <files mask="mcglite_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="examples/frdmk32l2b/driver_examples/flash/pflash">
          <external path="examples/frdmk32l2b/driver_examples/flash/pflash" type="xml">
            <files mask="pflash_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_pit" name="pit" brief="The PIT project is a simple demonstration program of the SDK PIT driver. It sets up the PIThardware block to trigger a periodic interrupt after every 1 second. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2b/driver_examples/pit">
          <external path="examples/frdmk32l2b/driver_examples/pit" type="xml">
            <files mask="pit_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/power_manager">
          <external path="examples/frdmk32l2b/demo_apps/power_manager" type="xml">
            <files mask="power_manager_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/power_mode_switch">
          <external path="examples/frdmk32l2b/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2b/driver_examples/rtc">
          <external path="examples/frdmk32l2b/driver_examples/rtc" type="xml">
            <files mask="rtc_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/rtc_func">
          <external path="examples/frdmk32l2b/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l2b/demo_apps/shell">
          <external path="examples/frdmk32l2b/demo_apps/shell" type="xml">
            <files mask="shell_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_slcd" name="slcd" brief="The SLCD example shows how to use SLCD driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l2b/driver_examples/slcd">
          <external path="examples/frdmk32l2b/driver_examples/slcd" type="xml">
            <files mask="slcd_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_spi_dma_b2b_transfer_master" name="spi_dma_b2b_transfer_master" brief="The spi_dma_board2board_master example shows how to use spi driver as master to do board to board transfer with DMA:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/frdmk32l2b/driver_examples/spi/dma_b2b_transfer/master">
          <external path="examples/frdmk32l2b/driver_examples/spi/dma_b2b_transfer/master" type="xml">
            <files mask="spi_dma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_spi_dma_b2b_transfer_slave" name="spi_dma_b2b_transfer_slave" brief="The spi_dma_board2board_slave example shows how to use spi driver as slave to do board to board transfer with DMA:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/frdmk32l2b/driver_examples/spi/dma_b2b_transfer/slave">
          <external path="examples/frdmk32l2b/driver_examples/spi/dma_b2b_transfer/slave" type="xml">
            <files mask="spi_dma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_spi_interrupt" name="spi_interrupt" brief="The spi_interrupt example shows how to use spi functional API to do interrupt transfer:In this example, one spi instance as master and another spi instance as slave. Master sends a piece of data to slave,and check if the data slave received is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/frdmk32l2b/driver_examples/spi/interrupt">
          <external path="examples/frdmk32l2b/driver_examples/spi/interrupt" type="xml">
            <files mask="spi_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_spi_interrupt_b2b_master" name="spi_interrupt_b2b_master" brief="The spi_interrupt_b2b_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and checkif the data master received is correct. This example needs to work with spi_interrupt_b2b_slave example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/frdmk32l2b/driver_examples/spi/interrupt_b2b/master">
          <external path="examples/frdmk32l2b/driver_examples/spi/interrupt_b2b/master" type="xml">
            <files mask="spi_interrupt_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_spi_interrupt_b2b_slave" name="spi_interrupt_b2b_slave" brief="The spi_interrupt_b2b_slave example shows how to use spi functional API to do interrupt transfer as a slave:In this example, the spi instance as slave. Slave receives data froma master and send a peiece of data to master,and check if the data slave received is correct. This example needs to work with spi_interrupt_b2b_master example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/frdmk32l2b/driver_examples/spi/interrupt_b2b/slave">
          <external path="examples/frdmk32l2b/driver_examples/spi/interrupt_b2b/slave" type="xml">
            <files mask="spi_interrupt_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_spi_interrupt_b2b_transfer_master" name="spi_interrupt_b2b_transfer_master" brief="The spi_interrupt_board2board_master example shows how to use spi driver as master to do board to board transfer withinterrupt:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/frdmk32l2b/driver_examples/spi/interrupt_b2b_transfer/master">
          <external path="examples/frdmk32l2b/driver_examples/spi/interrupt_b2b_transfer/master" type="xml">
            <files mask="spi_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_spi_interrupt_b2b_transfer_slave" name="spi_interrupt_b2b_transfer_slave" brief="The spi_interrupt_board2board_slave example shows how to use spi driver as slave to do board to board transfer with interrupt:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/frdmk32l2b/driver_examples/spi/interrupt_b2b_transfer/slave">
          <external path="examples/frdmk32l2b/driver_examples/spi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="spi_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_spi_polling_b2b_transfer_master" name="spi_polling_b2b_transfer_master" brief="The spi_polling_board2board_master example shows how to use spi driver as master to do board to board transfer with polling:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/frdmk32l2b/driver_examples/spi/polling_b2b_transfer/master">
          <external path="examples/frdmk32l2b/driver_examples/spi/polling_b2b_transfer/master" type="xml">
            <files mask="spi_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_spi_polling_b2b_transfer_slave" name="spi_polling_b2b_transfer_slave" brief="The spi_polling_board2board_slave example shows how to use spi driver as slave to do board to board transfer withpolling:Notice: The SPI slave of this example uses interrupt mode, as there is no polling mode for SPI slave.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/frdmk32l2b/driver_examples/spi/polling_b2b_transfer/slave">
          <external path="examples/frdmk32l2b/driver_examples/spi/polling_b2b_transfer/slave" type="xml">
            <files mask="spi_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2b/driver_examples/tpm/input_capture">
          <external path="examples/frdmk32l2b/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2b/driver_examples/tpm/output_compare">
          <external path="examples/frdmk32l2b/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2b/driver_examples/tpm/pwm_twochannel">
          <external path="examples/frdmk32l2b/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2b/driver_examples/tpm/simple_pwm">
          <external path="examples/frdmk32l2b/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l2b/driver_examples/tpm/timer">
          <external path="examples/frdmk32l2b/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_uart_dma_rb_transfer" name="uart_dma_rb_transfer" brief="The uart_dma example shows how to use uart driver with DMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk32l2b/driver_examples/uart/dma_rb_transfer">
          <external path="examples/frdmk32l2b/driver_examples/uart/dma_rb_transfer" type="xml">
            <files mask="uart_dma_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_uart_dma_transfer" name="uart_dma_transfer" brief="The uart_dma example shows how to use uart driver with DMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk32l2b/driver_examples/uart/dma_transfer">
          <external path="examples/frdmk32l2b/driver_examples/uart/dma_transfer" type="xml">
            <files mask="uart_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_uart_interrupt" name="uart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk32l2b/driver_examples/uart/interrupt">
          <external path="examples/frdmk32l2b/driver_examples/uart/interrupt" type="xml">
            <files mask="uart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_uart_interrupt_rb_transfer" name="uart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk32l2b/driver_examples/uart/interrupt_rb_transfer">
          <external path="examples/frdmk32l2b/driver_examples/uart/interrupt_rb_transfer" type="xml">
            <files mask="uart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_uart_interrupt_transfer" name="uart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk32l2b/driver_examples/uart/interrupt_transfer">
          <external path="examples/frdmk32l2b/driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="uart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l2b_uart_polling" name="uart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk32l2b/driver_examples/uart/polling">
          <external path="examples/frdmk32l2b/driver_examples/uart/polling" type="xml">
            <files mask="uart_polling_v3_8.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="K32L2B31xxxxA" name="K32L2B31A" version="1.0.0" full_name="K32L2B31xxxxA" family="K32L2B31A" platform="Kinetis">
      <description>Ultra-Low-Power, Highly Integrated MCU</description>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_K32L2B31xxxxA" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_K32L2B31xxxxA" name="PROGRAM_FLASH" addr="00000000" size="00040000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_K32L2B31xxxxA" name="SRAM" addr="1fffe000" size="00008000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="256" ram_size_kb="32"/>
      <package id="K32L2B31VMP0A" name="K32L2B31VMP0A"/>
      <package id="K32L2B31VLH0A" name="K32L2B31VLH0A"/>
      <package id="K32L2B31VFT0A" name="K32L2B31VFT0A"/>
      <package id="K32L2B31VFM0A" name="K32L2B31VFM0A"/>
      <evaluation_boards>
        <evaluation_board name="frdmk32l2b"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.K32L2B31xxxxA" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.K32L2B31xxxxA" name="internal.has_swo" value="false"/>
            <params id="internal.connect.script.debug.mcuxpresso.K32L2B31xxxxA" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_K32L2B31xxxxA">
              <driverBinary path="core/devices/K32L2B31A/mcuxpresso" type="binary">
                <files mask="K32L2B.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmk32l2b.K32L2B31A" name="frdmk32l2b" brief="Board_project_template frdmk32l2b" version="1.0.0" full_name="Board_project_template frdmk32l2b" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/frdmk32l2b/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.K32L2B31A"/>
          <component_dependency value="component.lpuart_adapter.K32L2B31A"/>
          <component_dependency value="platform.drivers.port.K32L2B31A"/>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="platform.drivers.gpio.K32L2B31A"/>
          <component_dependency value="platform.drivers.smc.K32L2B31A"/>
          <component_dependency value="device.K32L2B31A_startup.K32L2B31A"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.K32L2B31A"/>
              <component_dependency value="component.serial_manager.K32L2B31A"/>
            </all>
            <component_dependency value="utility.debug_console_lite.K32L2B31A"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.K32L2B31A" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="K32L2B31xxxxA" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.K32L2B31A"/>
          <component_dependency value="platform.Include_dsp.K32L2B31A"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.K32L2B31A" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L2B31A" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.K32L2B31A" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.K32L2B31A" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.K32L2B31A" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.K32L2B31A" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.K32L2B31A" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.K32L2B31A" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.K32L2B31A" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.K32L2B31A" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.K32L2B31A" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.K32L2B31A" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L2B31A" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.K32L2B31A" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.K32L2B31A" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.K32L2B31A" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="K32L2B31xxxxA" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.K32L2B31A" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="K32L2B31xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_common_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm0plus.K32L2B31A" name="CMSIS_Include_core_cm0plus" brief="Cmsis_include_core_cm0plus" version="5.3.0" full_name="Cmsis_include_core_cm0plus" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.K32L2B31A"/>
          <component_dependency value="platform.Include_dsp.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_core_cm0plus_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.K32L2B31A" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="K32L2B31xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_dsp_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.K32L2B31A" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="K32L2B31xxxxA" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.K32L2B31A.K32L2B31A" name="K32L2B31A" brief="Devices_project_template K32L2B31A" version="1.0.0" full_name="Devices_project_template K32L2B31A" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/K32L2B31A/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.K32L2B31A"/>
          <component_dependency value="component.lpuart_adapter.K32L2B31A"/>
          <component_dependency value="platform.drivers.port.K32L2B31A"/>
          <component_dependency value="platform.drivers.gpio.K32L2B31A"/>
          <component_dependency value="platform.drivers.smc.K32L2B31A"/>
          <component_dependency value="device.K32L2B31A_startup.K32L2B31A"/>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="platform.drivers.clock.K32L2B31A"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.K32L2B31A"/>
              <component_dependency value="component.serial_manager.K32L2B31A"/>
            </all>
            <component_dependency value="utility.debug_console_lite.K32L2B31A"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.K32L2B31A" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/K32L2B31A/template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma.K32L2B31A"/>
          <component_dependency value="platform.drivers.dmamux.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.K32L2B31A" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="K32L2B31xxxxA" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.K32L2B31A" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.timer_manager.K32L2B31A"/>
          <component_dependency value="component.gpio_adapter.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.K32L2B31A" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.osa.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.flash_adapter.K32L2B31A" name="flash_adapter" brief="Component flash_adapter" version="1.0.0" full_name="Component flash_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/internal_flash" project_base_path="component/internal_flash">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="platform.drivers.flash.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_flash.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpio_adapter.K32L2B31A" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.0" full_name="Component gpio_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.K32L2B31A"/>
          <component_dependency value="platform.drivers.port.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.K32L2B31A" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.timer_manager.K32L2B31A"/>
          <component_dependency value="component.gpio_adapter.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.K32L2B31A" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lists_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.K32L2B31A" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="utility.debug_console.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.K32L2B31A" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.log.K32L2B31A"/>
          <component_dependency value="utility.debug_console.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.K32L2B31A" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.log.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_adapter.K32L2B31A" name="lptmr_adapter" brief="Component lptmr_adapter" version="1.0.0" full_name="Component lptmr_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="platform.drivers.lptmr.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_adapter.K32L2B31A" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="platform.drivers.lpuart.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lpuart_adapter_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.K32L2B31A" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.lists.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.K32L2B31A" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.lists.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.K32L2B31A" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.lists.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.K32L2B31A" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.K32L2B31A" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.K32L2B31A" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source condition="middleware.freertos-kernel.K32L2B31A" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_osa_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.K32L2B31A" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.lists.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_free_rtos.K32L2B31A" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.lists.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.K32L2B31A" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="utility.debug_console.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pit_adapter.K32L2B31A" name="pit_adapter" brief="Component pit_adapter" version="1.0.0" full_name="Component pit_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="platform.drivers.pit.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pit.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_tpm_adapter.K32L2B31A" name="pwm_tpm_adapter" brief="Component pwm_tpm_adapter" version="1.0.0" full_name="Component pwm_tpm_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="platform.drivers.tpm.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.K32L2B31A" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.lists.K32L2B31A"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.K32L2B31A"/>
            <component_dependency value="component.serial_manager_virtual.K32L2B31A"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.K32L2B31A" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.K32L2B31A"/>
          <component_dependency value="component.serial_manager.K32L2B31A"/>
          <any_of>
            <component_dependency value="platform.drivers.uart.K32L2B31A"/>
            <component_dependency value="platform.drivers.lpuart.K32L2B31A"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_uart_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.K32L2B31A" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.K32L2B31A"/>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.K32L2B31A" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.K32L2B31A" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.K32L2B31A" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="component.lists.K32L2B31A"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.K32L2B31A"/>
            <component_dependency value="component.pit_adapter.K32L2B31A"/>
            <component_dependency value="component.lptmr_adapter.K32L2B31A"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.tpm_adapter.K32L2B31A" name="tpm_adapter" brief="Component tpm_adapter" version="1.0.0" full_name="Component tpm_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="platform.drivers.tpm.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.uart_adapter.K32L2B31A" name="uart_adapter" brief="Component uart_adapter" version="1.0.0" full_name="uart_adapter" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
          <component_dependency value="platform.drivers.uart.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_uart.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.K32L2B31A_CMSIS.K32L2B31A" name="K32L2B31A_CMSIS" brief="Device K32L2B31A_cmsis" version="1.0.0" full_name="Device K32L2B31A_cmsis" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/K32L2B31A" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.Include_core_cm0plus.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="K32L2B31A.h"/>
        <files mask="K32L2B31A_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_K32L2B31A_CMSIS_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.K32L2B31A_debugger.K32L2B31A" name="K32L2B31A_debugger" brief="Device K32L2B31A_debugger" version="1.0.0" full_name="Device K32L2B31A_debugger" devices="K32L2B31xxxxA" user_visible="true" type="debugger" package_base_path="core/devices/K32L2B31A" project_base_path="K32L2B31A">
      <source relative_path="./" type="xml">
        <files mask="K32L2B31A.xml"/>
      </source>
    </component>
    <component id="platform.devices.K32L2B31A_linker.K32L2B31A" name="K32L2B31A_linker" brief="Device K32L2B31A_linker" version="1.0.0" full_name="Device K32L2B31A_linker" devices="K32L2B31xxxxA" user_visible="true" type="linker" package_base_path="core/devices/K32L2B31A" project_base_path="K32L2B31A">
      <source toolchain="armgcc" relative_path="gcc" type="linker">
        <files mask="K32L2B31xxxxA_flash.ld"/>
        <files mask="K32L2B31xxxxA_ram.ld"/>
      </source>
    </component>
    <component id="device.K32L2B31A_startup.K32L2B31A" name="K32L2B31A_startup" brief="Device K32L2B31A_startup" version="1.1.0" full_name="Device K32L2B31A_startup" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/K32L2B31A" project_base_path="startup">
      <dependencies>
        <component_dependency value="device.K32L2B31A_system.K32L2B31A"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include">
        <files mask="startup_K32L2B31A.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c">
        <files mask="startup_k32l2b31a.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp">
        <files mask="startup_k32l2b31a.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_K32L2B31A_startup_K32L2B31A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="device.K32L2B31A_system.K32L2B31A" name="K32L2B31A_system" brief="Device K32L2B31A_system" version="1.0.0" full_name="Device K32L2B31A_system" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/K32L2B31A" project_base_path="device">
      <dependencies>
        <component_dependency value="device.K32L2B31A_CMSIS.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_K32L2B31A.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_K32L2B31A.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_K32L2B31A_system_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.K32L2B31A.K32L2B31A" name="K32L2B31A" brief="Docs k32l2b31a" version="1.0.0" full_name="Docs k32l2b31a" devices="K32L2B31xxxxA" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for FRDM-K32L2B.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.K32L2B31A" name="adc" brief="ADC16 Driver" version="2.2.0" full_name="ADC16 Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/adc16" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_adc16_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.K32L2B31A" name="clock" brief="Clock Driver" version="2.1.0" full_name="Clock Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/devices/K32L2B31A/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_clock_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cmp.K32L2B31A" name="cmp" brief="CMP Driver" version="2.0.2" full_name="CMP Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/cmp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_cmp_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.K32L2B31A" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.K32L2B31A"/>
          <component_dependency value="device.K32L2B31A_CMSIS.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_common_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cop.K32L2B31A" name="cop" brief="COP Driver" version="2.0.1" full_name="COP Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/cop" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cop.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cop.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_cop_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dac.K32L2B31A" name="dac" brief="DAC Driver" version="2.0.2" full_name="DAC Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/dac" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dac_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dma.K32L2B31A" name="dma" brief="DMA Driver" version="2.1.0" full_name="DMA Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/dma" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dmamux.K32L2B31A"/>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dma_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmamux.K32L2B31A" name="dmamux" brief="DMAMUX Driver" version="2.0.5" full_name="DMAMUX Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/dmamux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dmamux_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flash.K32L2B31A" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flash" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flash_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio.K32L2B31A" name="flexio" brief="FLEXIO Driver" version="2.0.4" full_name="FLEXIO Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2c_master.K32L2B31A" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.4.0" full_name="FLEXIO I2C Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_i2c_master_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s.K32L2B31A" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.2.0" full_name="FLEXIO I2S Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s_dma.K32L2B31A" name="flexio_i2s_dma" brief="FLEXIO I2S DMA Driver" version="2.1.7" full_name="FLEXIO I2S DMA Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_i2s.K32L2B31A"/>
          <component_dependency value="platform.drivers.dma.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s_dma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi.K32L2B31A" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.2.0" full_name="FLEXIO SPI Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_spi_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi_dma.K32L2B31A" name="flexio_spi_dma" brief="FLEXIO SPI DMA Driver" version="2.2.0" full_name="FLEXIO SPI DMA Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma.K32L2B31A"/>
          <component_dependency value="platform.drivers.flexio_spi.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_spi_dma_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart.K32L2B31A" name="flexio_uart" brief="FLEXIO UART Driver" version="2.3.0" full_name="FLEXIO UART Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_uart_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart_dma.K32L2B31A" name="flexio_uart_dma" brief="FLEXIO UART DMA Driver" version="2.3.0" full_name="FLEXIO UART DMA Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma.K32L2B31A"/>
          <component_dependency value="platform.drivers.flexio_uart.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_uart_dma_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.fxos8700cq.K32L2B31A" name="fxos8700cq" brief="Driver fxos8700cq" version="1.0.0" full_name="Driver fxos8700cq" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="board_component" package_base_path="core/components/fxos8700cq" project_base_path="accel">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_fxos8700cq_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpio.K32L2B31A" name="gpio" brief="GPIO Driver" version="2.5.1" full_name="GPIO Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_gpio_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i2c.K32L2B31A" name="i2c" brief="I2C Driver" version="2.0.9" full_name="I2C Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/i2c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_i2c_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i2c_dma.K32L2B31A" name="i2c_dma" brief="I2C Driver" version="2.0.9" full_name="I2C DMA Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/i2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c.K32L2B31A"/>
          <component_dependency value="platform.drivers.dma.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_i2c_dma_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i2c_freertos.K32L2B31A" name="i2c_freertos" brief="I2C Driver" version="2.0.9" full_name="I2C FREERTOS Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/i2c" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c.K32L2B31A"/>
          <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_i2c_freertos_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.llwu.K32L2B31A" name="llwu" brief="LLWU Driver" version="2.0.5" full_name="LLWU Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/llwu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_llwu_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lptmr.K32L2B31A" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lptmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lptmr_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart.K32L2B31A" name="lpuart" brief="LPUART Driver" version="2.4.1" full_name="LPUART Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_dma.K32L2B31A" name="lpuart_dma" brief="LPUART Driver" version="2.4.0" full_name="LPUART DMA Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.K32L2B31A"/>
          <component_dependency value="platform.drivers.dma.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_dma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_dma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_dma_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_freertos.K32L2B31A" name="lpuart_freertos" brief="LPUART Driver" version="2.4.0" full_name="LPUART Freertos Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.K32L2B31A"/>
          <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_freertos_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pit.K32L2B31A" name="pit" brief="PIT Driver" version="2.0.4" full_name="PIT Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/pit" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_pit.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pit.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pit_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pmc.K32L2B31A" name="pmc" brief="PMC Driver" version="2.0.3" full_name="PMC Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/pmc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pmc_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.port.K32L2B31A" name="port" brief="PORT Driver" version="2.1.1" full_name="PORT Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/port" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_port_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rcm.K32L2B31A" name="rcm" brief="RCM Driver" version="2.0.4" full_name="RCM Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/rcm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rcm_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rtc.K32L2B31A" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/rtc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rtc_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sim.K32L2B31A" name="sim" brief="SIM Driver" version="2.1.2" full_name="SIM Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/sim" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sim_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.slcd.K32L2B31A" name="slcd" brief="SLCD Driver" version="2.0.2" full_name="SLCD Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/slcd" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_slcd.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_slcd.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_slcd_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.slcd_engine.K32L2B31A" name="slcd_engine" brief="Driver slcd_engine" version="1.0.2" full_name="Driver slcd_engine" devices="K32L2B31xxxxA" user_visible="true" type="software_component" package_base_path="core/components/slcd_engine" project_base_path="slcd">
      <dependencies>
        <component_dependency value="driver.slcd_lcd_s401m16kr.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="slcd_engine.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="slcd_engine.h"/>
        <files mask="slcd_panel.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_slcd_engine_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.slcd_lcd_s401m16kr.K32L2B31A" name="slcd_lcd_s401m16kr" brief="Driver slcd_lcd_s401m16kr" version="1.0.2" full_name="Driver slcd_lcd_s401m16kr" devices="K32L2B31xxxxA" user_visible="true" type="board_component" package_base_path="core/components/slcd_engine/LCD-S401M16KR" project_base_path="slcd">
      <defines>
        <define name="SLCD_PANEL_LCD_S401M16KR_H" value=""/>
      </defines>
      <source relative_path="./" type="src">
        <files mask="LCD-S401M16KR.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="LCD-S401M16KR.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_slcd_lcd_s401m16kr_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.smc.K32L2B31A" name="smc" brief="SMC Driver" version="2.0.7" full_name="SMC Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/smc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_smc_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.spi.K32L2B31A" name="spi" brief="SPI Driver" version="2.1.1" full_name="SPI Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/spi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_spi_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.spi_dma.K32L2B31A" name="spi_dma" brief="SPI Driver" version="2.1.1" full_name="SPI DMA Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/spi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.spi.K32L2B31A"/>
          <component_dependency value="platform.drivers.dma.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi_dma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spi_dma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_spi_dma_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.spi_freertos.K32L2B31A" name="spi_freertos" brief="SPI Driver" version="2.1.1" full_name="SPI FREERTOS Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/spi" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.spi.K32L2B31A"/>
          <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spi_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_spi_freertos_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tpm.K32L2B31A" name="tpm" brief="TPM Driver" version="2.0.7" full_name="TPM Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/tpm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_tpm_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.uart.K32L2B31A" name="uart" brief="UART Driver" version="2.4.0" full_name="UART Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/uart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_uart_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.uart_dma.K32L2B31A" name="uart_dma" brief="UART Driver" version="2.4.0" full_name="UART DMA Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/uart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.K32L2B31A"/>
          <component_dependency value="platform.drivers.dma.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart_dma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart_dma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_uart_dma_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.uart_freertos.K32L2B31A" name="uart_freertos" brief="UART Driver" version="2.4.0" full_name="UART FREERTOS Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/uart" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.K32L2B31A"/>
          <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_uart_freertos_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.vref.K32L2B31A" name="vref" brief="VREF Driver" version="2.1.2" full_name="VREF Driver" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="driver" package_base_path="core/drivers/vref" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_vref.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.K32L2B31A" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="K32L2B31xxxxA" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_baremetal_K32L2B31A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.K32L2B31A" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="202007.00.0" full_name="FreeRTOS kernel" devices="K32L2B31xxxxA" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.extension.K32L2B31A"/>
          <component_dependency value="middleware.freertos-kernel.template.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="event_groups.c"/>
        <files mask="croutine.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="croutine.h"/>
        <files mask="StackMacros.h"/>
        <files mask="atomic.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM0" type="src" device_cores="core0_K32L2B31xxxxA">
        <files mask="port.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM0" type="c_include" device_cores="core0_K32L2B31xxxxA">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="portable/GCC/ARM_CM0" toolchain="armgcc mcuxpresso" type="c_include" device_cores="core0_K32L2B31xxxxA"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.armv8m.K32L2B31A" name="FreeRTOS port ARMv8M" brief="FreeRTOS port ARMv8M" version="202007.00.0" full_name="FreeRTOS port ARMv8M" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
      </dependencies>
      <source relative_path="portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/context" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/heap" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/init" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/macros" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.extension.K32L2B31A" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="202007.00.0" full_name="FreeRTOS NXP extension" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_extension_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.K32L2B31A" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="202007.00.0" full_name="FreeRTOS heap 1" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.K32L2B31A" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="202007.00.0" full_name="FreeRTOS heap 2" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.K32L2B31A" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="202007.00.0" full_name="FreeRTOS heap_3" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.K32L2B31A" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="202007.00.0" full_name="FreeRTOS heap 4" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_heap_4_K32L2B31A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.K32L2B31A" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="202007.00.0" full_name="FreeRTOS heap 5" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_newlib.K32L2B31A" name="FreeRTOS heap newlib" brief="FreeRTOS heap newlib" version="202007.00.0" full_name="FreeRTOS heap newlib" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_useNewlib.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.K32L2B31A" name="FreeRTOS MPU wrappers" brief="FreeRTOS MPU wrappers" version="202007.00.0" full_name="FreeRTOS MPU wrappers" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.K32L2B31A"/>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.template.K32L2B31A" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="202007.00.0" full_name="FreeRTOS configuration template" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel" user_visible="false" type="project_template" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="template/ARM_CM0" type="c_include" device_cores="core0_K32L2B31xxxxA">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source exclude="true" relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
        <files mask="heap_useNewlib.c"/>
      </source>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <include_paths>
        <include_path relative_path="template/ARM_CM0" type="c_include" device_cores="core0_K32L2B31xxxxA"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.unused.K32L2B31A" name="FreeRTOS unused" brief="FreeRTOS unused" version="202007.00.0" full_name="FreeRTOS unused" devices="K32L2B31xxxxA" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="./" type="doc">
        <files mask="History.txt"/>
        <files mask="readme.txt"/>
      </source>
      <source relative_path="./" type="other">
        <files mask="Quick_Start_Guide.url"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source relative_path="License" type="doc">
        <files mask="license.txt"/>
      </source>
      <source relative_path="portable/ARMClang" type="doc">
        <files mask="Use-the-GCC-ports.txt"/>
      </source>
    </component>
    <component id="middleware.sdmmc.common.K32L2B31A" name="sdmmc_common" brief="Middleware sdmmc common" version="2.3.0" full_name="SDMMC common stack" devices="K32L2B31xxxxA" category="Memories/SDMMC Stack" user_visible="false" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <source relative_path="common" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdmmc_spec.h"/>
        <files mask="fsl_sdmmc_common.h"/>
      </source>
      <source relative_path="common" project_relative_path="src" type="src">
        <files mask="fsl_sdmmc_common.c"/>
      </source>
      <include_paths>
        <include_path relative_path="common" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sdspi.K32L2B31A" name="sdspi" brief="Middleware sdmmc sdspi" version="2.2.1" full_name="SDMMC sdspi stack" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <component_dependency value="platform.drivers.spi.K32L2B31A"/>
      </dependencies>
      <source relative_path="sdspi" project_relative_path="src" type="src">
        <files mask="fsl_sdspi.c"/>
      </source>
      <source relative_path="sdspi" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdspi.h"/>
      </source>
      <source relative_path="common" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdmmc_spec.h"/>
      </source>
      <source relative_path="sdspi" project_relative_path="./" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="sdspi" project_relative_path="inc" type="c_include"/>
        <include_path relative_path="common" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.common_header.K32L2B31A" name="USB Common Header" brief="Middleware usb common_header" version="2.7.0" full_name="USB Common Header" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" category="USB/USB Common Header" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <component_dependency value="component.osa.K32L2B31A"/>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_usb_common_header_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.common_header.K32L2B31A" name="USB Device Common Header" brief="Middleware usb device common_header" version="2.7.0" full_name="USB Device Common Header" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.K32L2B31A"/>
          <component_dependency value="middleware.usb.common_header.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="device" project_relative_path="device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source relative_path="device" project_relative_path="device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_usb_device_common_header_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="device" project_relative_path="device/include" type="c_include"/>
        <include_path relative_path="device" project_relative_path="device/source" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.K32L2B31A" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utilities_misc_utilities_K32L2B31A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.K32L2B31A" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_K32L2B31A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.K32L2B31A" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_lite_K32L2B31A.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.K32L2B31A" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.K32L2B31A"/>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.K32L2B31A" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.K32L2B31A"/>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_lite_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.notifier.K32L2B31A" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/devices/K32L2B31A/utilities" project_base_path="utilities/utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L2B31A"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_notifier_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.K32L2B31A" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="K32L2B31xxxxA" device_cores="core0_K32L2B31xxxxA" user_visible="true" type="utilities" package_base_path="core/devices/K32L2B31A/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.K32L2B31A"/>
          <component_dependency value="component.lists.K32L2B31A"/>
          <component_dependency value="platform.drivers.common.K32L2B31A"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_shell_K32L2B31A.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
