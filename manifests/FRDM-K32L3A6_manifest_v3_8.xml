<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_SUPER" name="SDKVersion 2.9.0 SuperSet" brief="This is SDK version 2.9.0 manifest file." format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-03-09 13:42:35.644337-->
  <!--This manifest is generated based on sdk repo commit: b1eede1d406d3392a45a06abc2494c2b87a1853b-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <core_slave_roles_definitions>
    <slave_role id="M0SLAVE" name="Cortex-M0 acts as slave by default"/>
  </core_slave_roles_definitions>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="frdmk32l3a6" name="FRDM-K32L3A6" href="https://www.nxp.com/pip/FRDM-K32L3A6" version="1.0.0" package="K32L3A60VPJ1A">
      <description>Freedom Development Platform for K32 L3 MCUs</description>
      <image path="core/boards/frdmk32l3a6" type="image">
        <files mask="frdmk32l3a6.png"/>
      </image>
      <examples>
        <example id="frdmk32l3a6_cau3_cm0plus" name="cau3_cm0plus" brief="The CAU3 Example project is a demonstration program that uses the KSDK software implementseveral cryptography algorithms using the CAU3 software driver." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/cau3/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/cau3/cm0plus" type="xml">
            <files mask="cau3_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_crc_cm0plus" name="crc_cm0plus" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/crc/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/crc/cm0plus" type="xml">
            <files mask="crc_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_dac_1_basic_cm0plus" name="dac_1_basic_cm0plus" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l3a6/driver_examples/dac/dac_basic/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/dac/dac_basic/cm0plus" type="xml">
            <files mask="dac_1_basic_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_dac_1_buffer_interrupt_cm0plus" name="dac_1_buffer_interrupt_cm0plus" brief="The dac_buffer_interrupt example shows how to use DAC FIFO interrupt.When the DAC FIFO empty interrupt is enabled firstly, the application would enter the DAC ISR immediately, since the FIFO is actually empty. Then the FIFO would be feed inside the ISR. Then the DAC interrupt could be restrained. Once the DAC FIFO is triggered in while loop, the data in FIFO is read out, then it becomes empty, so the FIFO would be feed again in DAC ISR. With this example, user can define the DAC output array to generate the different wave output. Also the software trigger can be called in some timer ISR so that the DAC would output the analog signal in indicated period. Or even use the hardware trigger to release the CPU." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l3a6/driver_examples/dac/dac_buffer_interrupt/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/dac/dac_buffer_interrupt/cm0plus" type="xml">
            <files mask="dac_1_buffer_interrupt_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_channel_link_cm0plus" name="edma_channel_link_cm0plus" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/channel_link/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/edma/channel_link/cm0plus" type="xml">
            <files mask="edma_channel_link_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_interleave_transfer_cm0plus" name="edma_interleave_transfer_cm0plus" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/interleave_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/edma/interleave_transfer/cm0plus" type="xml">
            <files mask="edma_interleave_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_memory_to_memory_cm0plus" name="edma_memory_to_memory_cm0plus" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/memory_to_memory/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/edma/memory_to_memory/cm0plus" type="xml">
            <files mask="edma_memory_to_memory_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_ping_pong_transfer_cm0plus" name="edma_ping_pong_transfer_cm0plus" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/ping_pong_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/edma/ping_pong_transfer/cm0plus" type="xml">
            <files mask="edma_ping_pong_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_scatter_gather_cm0plus" name="edma_scatter_gather_cm0plus" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/scatter_gather/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/edma/scatter_gather/cm0plus" type="xml">
            <files mask="edma_scatter_gather_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_wrap_transfer_cm0plus" name="edma_wrap_transfer_cm0plus" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/wrap_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/edma/wrap_transfer/cm0plus" type="xml">
            <files mask="edma_wrap_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_ewm_cm0plus" name="ewm_cm0plus" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/ewm/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/ewm/cm0plus" type="xml">
            <files mask="ewm_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_i2c_interrupt_lpi2c_transfer_cm0plus" name="flexio_i2c_interrupt_lpi2c_transfer_cm0plus" brief="The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/i2c/interrupt_lpi2c_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/i2c/interrupt_lpi2c_transfer/cm0plus" type="xml">
            <files mask="flexio_i2c_interrupt_lpi2c_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_i2c_read_accel_value_transfer_cm0plus" name="flexio_i2c_read_accel_value_transfer_cm0plus" brief="The flexio_i2c_read_accel_value example shows how to use FLEXIO I2C  Master driver to communicate with an i2c device: 1. How to use the flexio i2c master driver to read a i2c device who_am_I register. 2. How to use the flexio i2c master driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/i2c/read_accel_value_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/i2c/read_accel_value_transfer/cm0plus" type="xml">
            <files mask="flexio_i2c_read_accel_value_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_pwm_cm0plus" name="flexio_pwm_cm0plus" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/pwm/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/pwm/cm0plus" type="xml">
            <files mask="flexio_pwm_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_spi_edma_lpspi_transfer_master_cm0plus" name="flexio_spi_edma_lpspi_transfer_master_cm0plus" brief="The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/spi/edma_lpspi_transfer/master/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/spi/edma_lpspi_transfer/master/cm0plus" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_master_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_spi_edma_lpspi_transfer_slave_cm0plus" name="flexio_spi_edma_lpspi_transfer_slave_cm0plus" brief="The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/spi/edma_lpspi_transfer/slave/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/spi/edma_lpspi_transfer/slave/cm0plus" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_slave_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_spi_int_lpspi_transfer_master_cm0plus" name="flexio_spi_int_lpspi_transfer_master_cm0plus" brief="The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/spi/int_lpspi_transfer/master/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/spi/int_lpspi_transfer/master/cm0plus" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_master_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_spi_int_lpspi_transfer_slave_cm0plus" name="flexio_spi_int_lpspi_transfer_slave_cm0plus" brief="The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/spi/int_lpspi_transfer/slave/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/spi/int_lpspi_transfer/slave/cm0plus" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_slave_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_uart_edma_transfer_cm0plus" name="flexio_uart_edma_transfer_cm0plus" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/uart/edma_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/uart/edma_transfer/cm0plus" type="xml">
            <files mask="flexio_uart_edma_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_uart_int_rb_transfer_cm0plus" name="flexio_uart_int_rb_transfer_cm0plus" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/uart/int_rb_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/uart/int_rb_transfer/cm0plus" type="xml">
            <files mask="flexio_uart_int_rb_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_uart_interrupt_transfer_cm0plus" name="flexio_uart_interrupt_transfer_cm0plus" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/uart/interrupt_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/uart/interrupt_transfer/cm0plus" type="xml">
            <files mask="flexio_uart_interrupt_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_uart_polling_transfer_cm0plus" name="flexio_uart_polling_transfer_cm0plus" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/uart/polling_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/uart/polling_transfer/cm0plus" type="xml">
            <files mask="flexio_uart_polling_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_gpio_input_interrupt_cm0plus" name="gpio_input_interrupt_cm0plus" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk32l3a6/driver_examples/gpio/input_interrupt/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/gpio/input_interrupt/cm0plus" type="xml">
            <files mask="gpio_input_interrupt_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_gpio_led_output_cm0plus" name="gpio_led_output_cm0plus" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk32l3a6/driver_examples/gpio/led_output/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/gpio/led_output/cm0plus" type="xml">
            <files mask="gpio_led_output_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_hello_world_demo_cm0plus" name="hello_world_demo_cm0plus" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l3a6/demo_apps/hello_world/cm0plus">
          <external path="examples/frdmk32l3a6/demo_apps/hello_world/cm0plus" type="xml">
            <files mask="hello_world_demo_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpadc_interrupt_cm0plus" name="lpadc_interrupt_cm0plus" brief="The lpadc_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/frdmk32l3a6/driver_examples/lpadc/interrupt/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpadc/interrupt/cm0plus" type="xml">
            <files mask="lpadc_interrupt_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpadc_polling_cm0plus" name="lpadc_polling_cm0plus" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/frdmk32l3a6/driver_examples/lpadc/polling/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpadc/polling/cm0plus" type="xml">
            <files mask="lpadc_polling_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpcmp_interrupt_cm0plus" name="lpcmp_interrupt_cm0plus" brief="The LPCMP interrupt Example shows how to use interrupt with LPCMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any LPCMP interrupt happens, the LPCMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpcmp" path="examples/frdmk32l3a6/driver_examples/lpcmp/interrupt/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpcmp/interrupt/cm0plus" type="xml">
            <files mask="lpcmp_interrupt_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpcmp_polling_cm0plus" name="lpcmp_polling_cm0plus" brief="The LPCMP polling Example shows the simplest way to use LPCMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpcmp" path="examples/frdmk32l3a6/driver_examples/lpcmp/polling/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpcmp/polling/cm0plus" type="xml">
            <files mask="lpcmp_polling_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_edma_b2b_transfer_master_cm0plus" name="lpi2c_edma_b2b_transfer_master_cm0plus" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/edma_b2b_transfer/master/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/edma_b2b_transfer/master/cm0plus" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_edma_b2b_transfer_slave_cm0plus" name="lpi2c_edma_b2b_transfer_slave_cm0plus" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/edma_b2b_transfer/slave/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/edma_b2b_transfer/slave/cm0plus" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_interrupt_cm0plus" name="lpi2c_interrupt_cm0plus" brief="The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt/cm0plus" type="xml">
            <files mask="lpi2c_interrupt_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_interrupt_b2b_transfer_master_cm0plus" name="lpi2c_interrupt_b2b_transfer_master_cm0plus" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm0plus" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_interrupt_b2b_transfer_slave_cm0plus" name="lpi2c_interrupt_b2b_transfer_slave_cm0plus" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm0plus" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_polling_b2b_master_cm0plus" name="lpi2c_polling_b2b_master_cm0plus" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/polling_b2b/master/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/polling_b2b/master/cm0plus" type="xml">
            <files mask="lpi2c_polling_b2b_master_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_polling_b2b_slave_cm0plus" name="lpi2c_polling_b2b_slave_cm0plus" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/polling_b2b/slave/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/polling_b2b/slave/cm0plus" type="xml">
            <files mask="lpi2c_polling_b2b_slave_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_read_accel_value_transfer_cm0plus" name="lpi2c_read_accel_value_transfer_cm0plus" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/read_accel_value_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/read_accel_value_transfer/cm0plus" type="xml">
            <files mask="lpi2c_read_accel_value_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpit_chained_channel_cm0plus" name="lpit_chained_channel_cm0plus" brief="The LPIT chained channel project is a simple example of the SDK LPIT driver. It sets up the LPIT hardware block to trigger a periodic interrupt after every 1 second in the channel No.0, the channel No.1 chained with channel No.0, if LPIT contain more than two channels, the channel No.2 chained with channel No.1....the channel No.N chained with Channel No.N-1. When the LPIT interrupt is triggered." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/frdmk32l3a6/driver_examples/lpit/chained_channel/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpit/chained_channel/cm0plus" type="xml">
            <files mask="lpit_chained_channel_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpit_single_channel_cm0plus" name="lpit_single_channel_cm0plus" brief="The LPIT single channel project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/frdmk32l3a6/driver_examples/lpit/single_channel/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpit/single_channel/cm0plus" type="xml">
            <files mask="lpit_single_channel_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_edma_b2b_transfer_master_cm0plus" name="lpspi_edma_b2b_transfer_master_cm0plus" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/edma_b2b_transfer/master/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/edma_b2b_transfer/master/cm0plus" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_edma_b2b_transfer_slave_cm0plus" name="lpspi_edma_b2b_transfer_slave_cm0plus" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/edma_b2b_transfer/slave/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/edma_b2b_transfer/slave/cm0plus" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_cm0plus" name="lpspi_interrupt_cm0plus" brief="The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt/cm0plus" type="xml">
            <files mask="lpspi_interrupt_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_b2b_master_cm0plus" name="lpspi_interrupt_b2b_master_cm0plus" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b/master/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b/master/cm0plus" type="xml">
            <files mask="lpspi_interrupt_b2b_master_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_b2b_slave_cm0plus" name="lpspi_interrupt_b2b_slave_cm0plus" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b/slave/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b/slave/cm0plus" type="xml">
            <files mask="lpspi_interrupt_b2b_slave_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_b2b_transfer_master_cm0plus" name="lpspi_interrupt_b2b_transfer_master_cm0plus" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b_transfer/master/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b_transfer/master/cm0plus" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_b2b_transfer_slave_cm0plus" name="lpspi_interrupt_b2b_transfer_slave_cm0plus" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm0plus" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_polling_b2b_transfer_master_cm0plus" name="lpspi_polling_b2b_transfer_master_cm0plus" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/polling_b2b_transfer/master/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/polling_b2b_transfer/master/cm0plus" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_polling_b2b_transfer_slave_cm0plus" name="lpspi_polling_b2b_transfer_slave_cm0plus" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/polling_b2b_transfer/slave/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/polling_b2b_transfer/slave/cm0plus" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lptmr_cm0plus" name="lptmr_cm0plus" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/lptmr/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lptmr/cm0plus" type="xml">
            <files mask="lptmr_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_interrupt_cm0plus" name="lpuart_interrupt_cm0plus" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt/cm0plus" type="xml">
            <files mask="lpuart_interrupt_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_interrupt_rb_transfer_cm0plus" name="lpuart_interrupt_rb_transfer_cm0plus" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_rb_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_rb_transfer/cm0plus" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_interrupt_transfer_cm0plus" name="lpuart_interrupt_transfer_cm0plus" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_transfer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_transfer/cm0plus" type="xml">
            <files mask="lpuart_interrupt_transfer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_interrupt_transfer_seven_bits_cm0plus" name="lpuart_interrupt_transfer_seven_bits_cm0plus" brief="The lpuart_interrupt_transfer_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_transfer_seven_bits/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_transfer_seven_bits/cm0plus" type="xml">
            <files mask="lpuart_interrupt_transfer_seven_bits_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_polling_cm0plus" name="lpuart_polling_cm0plus" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/polling/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/polling/cm0plus" type="xml">
            <files mask="lpuart_polling_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_polling_seven_bits_cm0plus" name="lpuart_polling_seven_bits_cm0plus" brief="The lpuart_polling_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console instantly.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/polling_seven_bits/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/polling_seven_bits/cm0plus" type="xml">
            <files mask="lpuart_polling_seven_bits_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_mmdvsq_cm0plus" name="mmdvsq_cm0plus" brief="The MMDVSQ Example project is a demonstration program that uses the KSDK software to Calculation square root and QuotientMMDVSQ Peripheral Driver ExampleStart MMDVSQ ExampleCalculation square root, please enter radicandSquare root of 9 is 3Calculation division to get remainder and quotientEnter dividend and divisorRemainder of 10 and 5 is 0Quotient of 10 and 5 is 2" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/mmdvsq/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/mmdvsq/cm0plus" type="xml">
            <files mask="mmdvsq_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_mu_interrupt_core1" name="mu_interrupt_core1" brief="The mu_interrupt example shows how to use MU driver in interrupt way:In this example:1. Core 0 send message to Core 1 in interrupt mode via MU module.2. Core 1 send message back to Core 0 in interrupt mode.3. Core 0 receive message sent from Core 1 in interrupt mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mu" path="examples/frdmk32l3a6/driver_examples/mu/interrupt/core1">
          <external path="examples/frdmk32l3a6/driver_examples/mu/interrupt/core1" type="xml">
            <files mask="mu_interrupt_core1_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_mu_polling_core1" name="mu_polling_core1" brief="The mu_polling example shows how to use MU driver in polling way:In this example:1. Core 0 send message to Core 1 in polling mode via MU module.2. Core 1 send message back to Core 0 in polling mode.3. Core 0 receive message sent from Core 1 in polling mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mu" path="examples/frdmk32l3a6/driver_examples/mu/polling/core1">
          <external path="examples/frdmk32l3a6/driver_examples/mu/polling/core1" type="xml">
            <files mask="mu_polling_core1_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_pflash_cm0plus" name="pflash_cm0plus" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flash" path="examples/frdmk32l3a6/driver_examples/flash/pflash/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/flash/pflash/cm0plus" type="xml">
            <files mask="pflash_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_rtc_cm0plus" name="rtc_cm0plus" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/rtc/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/rtc/cm0plus" type="xml">
            <files mask="rtc_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_sema42_dual_core_core1" name="sema42_dual_core_core1" brief="The sema42 example shows how to use SEMA42 driver to lock and unlock a sema gate:In this example:1. Firstly, Core 0 turn on LED  and lock a sema gate then boot up Core 1 wake up.2. Core 1 must be wait until Core 0 unlocks this sema gate to lock it.3. After user press any key in terminal window, the sema gate will be unlocked by core 0,then core 1 will lock it and turn off the LEDIf the board does not have LED to show the status, then core 1 will send a flagto core 0 when core 1 has locked the sema gate. Core 0 outputs the success logafter it received the flag." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sema42" path="examples/frdmk32l3a6/driver_examples/sema42/dual_core/core1">
          <external path="examples/frdmk32l3a6/driver_examples/sema42/dual_core/core1" type="xml">
            <files mask="sema42_dual_core_core1_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_combine_pwm_cm0plus" name="tpm_combine_pwm_cm0plus" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/combine_pwm/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/combine_pwm/cm0plus" type="xml">
            <files mask="tpm_combine_pwm_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_dual_edge_capture_cm0plus" name="tpm_dual_edge_capture_cm0plus" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/dual_edge_capture/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/dual_edge_capture/cm0plus" type="xml">
            <files mask="tpm_dual_edge_capture_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_input_capture_cm0plus" name="tpm_input_capture_cm0plus" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/input_capture/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/input_capture/cm0plus" type="xml">
            <files mask="tpm_input_capture_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_output_compare_cm0plus" name="tpm_output_compare_cm0plus" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/output_compare/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/output_compare/cm0plus" type="xml">
            <files mask="tpm_output_compare_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_pwm_twochannel_cm0plus" name="tpm_pwm_twochannel_cm0plus" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/pwm_twochannel/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/pwm_twochannel/cm0plus" type="xml">
            <files mask="tpm_pwm_twochannel_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_simple_pwm_cm0plus" name="tpm_simple_pwm_cm0plus" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/simple_pwm/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/simple_pwm/cm0plus" type="xml">
            <files mask="tpm_simple_pwm_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_timer_cm0plus" name="tpm_timer_cm0plus" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/timer/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/timer/cm0plus" type="xml">
            <files mask="tpm_timer_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_trng_random_cm0plus" name="trng_random_cm0plus" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/trng" path="examples/frdmk32l3a6/driver_examples/trng/random/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/trng/random/cm0plus" type="xml">
            <files mask="trng_random_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tstmr_cm0plus" name="tstmr_cm0plus" brief="The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/tstmr/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/tstmr/cm0plus" type="xml">
            <files mask="tstmr_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_xrdc_cm0plus" name="xrdc_cm0plus" brief="The xrdc example shows how to control the memory and peripheral accesspolicy using XRDC.In this example, one peripheral and a memory region are set to unaccessible, thenthe hardfault occurs." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/xrdc/cm0plus">
          <external path="examples/frdmk32l3a6/driver_examples/xrdc/cm0plus" type="xml">
            <files mask="xrdc_cm0plus_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_cau3_cm4" name="cau3_cm4" brief="The CAU3 Example project is a demonstration program that uses the KSDK software implementseveral cryptography algorithms using the CAU3 software driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/cau3/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/cau3/cm4" type="xml">
            <files mask="cau3_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_crc_cm4" name="crc_cm4" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/crc/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/crc/cm4" type="xml">
            <files mask="crc_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_dac_1_basic_cm4" name="dac_1_basic_cm4" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l3a6/driver_examples/dac/dac_basic/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/dac/dac_basic/cm4" type="xml">
            <files mask="dac_1_basic_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_dac_1_buffer_interrupt_cm4" name="dac_1_buffer_interrupt_cm4" brief="The dac_buffer_interrupt example shows how to use DAC FIFO interrupt.When the DAC FIFO empty interrupt is enabled firstly, the application would enter the DAC ISR immediately, since the FIFO is actually empty. Then the FIFO would be feed inside the ISR. Then the DAC interrupt could be restrained. Once the DAC FIFO is triggered in while loop, the data in FIFO is read out, then it becomes empty, so the FIFO would be feed again in DAC ISR. With this example, user can define the DAC output array to generate the different wave output. Also the software trigger can be called in some timer ISR so that the DAC would output the analog signal in indicated period. Or even use the hardware trigger to release the CPU." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk32l3a6/driver_examples/dac/dac_buffer_interrupt/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/dac/dac_buffer_interrupt/cm4" type="xml">
            <files mask="dac_1_buffer_interrupt_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_channel_link_cm4" name="edma_channel_link_cm4" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/channel_link/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/edma/channel_link/cm4" type="xml">
            <files mask="edma_channel_link_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_interleave_transfer_cm4" name="edma_interleave_transfer_cm4" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/interleave_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/edma/interleave_transfer/cm4" type="xml">
            <files mask="edma_interleave_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_memory_to_memory_cm4" name="edma_memory_to_memory_cm4" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/memory_to_memory/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/edma/memory_to_memory/cm4" type="xml">
            <files mask="edma_memory_to_memory_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_ping_pong_transfer_cm4" name="edma_ping_pong_transfer_cm4" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/ping_pong_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/edma/ping_pong_transfer/cm4" type="xml">
            <files mask="edma_ping_pong_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_scatter_gather_cm4" name="edma_scatter_gather_cm4" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/scatter_gather/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/edma/scatter_gather/cm4" type="xml">
            <files mask="edma_scatter_gather_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_edma_wrap_transfer_cm4" name="edma_wrap_transfer_cm4" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk32l3a6/driver_examples/edma/wrap_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/edma/wrap_transfer/cm4" type="xml">
            <files mask="edma_wrap_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_ewm_cm4" name="ewm_cm4" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/ewm/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/ewm/cm4" type="xml">
            <files mask="ewm_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_i2c_interrupt_lpi2c_transfer_cm4" name="flexio_i2c_interrupt_lpi2c_transfer_cm4" brief="The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/i2c/interrupt_lpi2c_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/i2c/interrupt_lpi2c_transfer/cm4" type="xml">
            <files mask="flexio_i2c_interrupt_lpi2c_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_i2c_read_accel_value_transfer_cm4" name="flexio_i2c_read_accel_value_transfer_cm4" brief="The flexio_i2c_read_accel_value example shows how to use FLEXIO I2C  Master driver to communicate with an i2c device: 1. How to use the flexio i2c master driver to read a i2c device who_am_I register. 2. How to use the flexio i2c master driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/i2c/read_accel_value_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/i2c/read_accel_value_transfer/cm4" type="xml">
            <files mask="flexio_i2c_read_accel_value_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_pwm_cm4" name="flexio_pwm_cm4" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/pwm/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/pwm/cm4" type="xml">
            <files mask="flexio_pwm_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_spi_edma_lpspi_transfer_master_cm4" name="flexio_spi_edma_lpspi_transfer_master_cm4" brief="The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/spi/edma_lpspi_transfer/master/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/spi/edma_lpspi_transfer/master/cm4" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_master_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_spi_edma_lpspi_transfer_slave_cm4" name="flexio_spi_edma_lpspi_transfer_slave_cm4" brief="The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/spi/edma_lpspi_transfer/slave/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/spi/edma_lpspi_transfer/slave/cm4" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_slave_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_spi_int_lpspi_transfer_master_cm4" name="flexio_spi_int_lpspi_transfer_master_cm4" brief="The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/spi/int_lpspi_transfer/master/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/spi/int_lpspi_transfer/master/cm4" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_master_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_spi_int_lpspi_transfer_slave_cm4" name="flexio_spi_int_lpspi_transfer_slave_cm4" brief="The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/spi/int_lpspi_transfer/slave/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/spi/int_lpspi_transfer/slave/cm4" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_slave_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_uart_edma_transfer_cm4" name="flexio_uart_edma_transfer_cm4" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/uart/edma_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/uart/edma_transfer/cm4" type="xml">
            <files mask="flexio_uart_edma_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_uart_int_rb_transfer_cm4" name="flexio_uart_int_rb_transfer_cm4" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/uart/int_rb_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/uart/int_rb_transfer/cm4" type="xml">
            <files mask="flexio_uart_int_rb_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_uart_interrupt_transfer_cm4" name="flexio_uart_interrupt_transfer_cm4" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/uart/interrupt_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/uart/interrupt_transfer/cm4" type="xml">
            <files mask="flexio_uart_interrupt_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_flexio_uart_polling_transfer_cm4" name="flexio_uart_polling_transfer_cm4" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmk32l3a6/driver_examples/flexio/uart/polling_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flexio/uart/polling_transfer/cm4" type="xml">
            <files mask="flexio_uart_polling_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_gpio_input_interrupt_cm4" name="gpio_input_interrupt_cm4" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk32l3a6/driver_examples/gpio/input_interrupt/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/gpio/input_interrupt/cm4" type="xml">
            <files mask="gpio_input_interrupt_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_gpio_led_output_cm4" name="gpio_led_output_cm4" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk32l3a6/driver_examples/gpio/led_output/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/gpio/led_output/cm4" type="xml">
            <files mask="gpio_led_output_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_hello_world_demo_cm4" name="hello_world_demo_cm4" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk32l3a6/demo_apps/hello_world/cm4">
          <external path="examples/frdmk32l3a6/demo_apps/hello_world/cm4" type="xml">
            <files mask="hello_world_demo_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpadc_interrupt_cm4" name="lpadc_interrupt_cm4" brief="The lpadc_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/frdmk32l3a6/driver_examples/lpadc/interrupt/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpadc/interrupt/cm4" type="xml">
            <files mask="lpadc_interrupt_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpadc_polling_cm4" name="lpadc_polling_cm4" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/frdmk32l3a6/driver_examples/lpadc/polling/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpadc/polling/cm4" type="xml">
            <files mask="lpadc_polling_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpcmp_interrupt_cm4" name="lpcmp_interrupt_cm4" brief="The LPCMP interrupt Example shows how to use interrupt with LPCMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any LPCMP interrupt happens, the LPCMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpcmp" path="examples/frdmk32l3a6/driver_examples/lpcmp/interrupt/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpcmp/interrupt/cm4" type="xml">
            <files mask="lpcmp_interrupt_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpcmp_polling_cm4" name="lpcmp_polling_cm4" brief="The LPCMP polling Example shows the simplest way to use LPCMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the LPCMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpcmp" path="examples/frdmk32l3a6/driver_examples/lpcmp/polling/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpcmp/polling/cm4" type="xml">
            <files mask="lpcmp_polling_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_edma_b2b_transfer_master_cm4" name="lpi2c_edma_b2b_transfer_master_cm4" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/edma_b2b_transfer/master/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/edma_b2b_transfer/master/cm4" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_edma_b2b_transfer_slave_cm4" name="lpi2c_edma_b2b_transfer_slave_cm4" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/edma_b2b_transfer/slave/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/edma_b2b_transfer/slave/cm4" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_interrupt_cm4" name="lpi2c_interrupt_cm4" brief="The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt/cm4" type="xml">
            <files mask="lpi2c_interrupt_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_interrupt_b2b_transfer_master_cm4" name="lpi2c_interrupt_b2b_transfer_master_cm4" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm4" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_interrupt_b2b_transfer_slave_cm4" name="lpi2c_interrupt_b2b_transfer_slave_cm4" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm4" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_polling_b2b_master_cm4" name="lpi2c_polling_b2b_master_cm4" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/polling_b2b/master/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/polling_b2b/master/cm4" type="xml">
            <files mask="lpi2c_polling_b2b_master_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_polling_b2b_slave_cm4" name="lpi2c_polling_b2b_slave_cm4" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/polling_b2b/slave/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/polling_b2b/slave/cm4" type="xml">
            <files mask="lpi2c_polling_b2b_slave_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpi2c_read_accel_value_transfer_cm4" name="lpi2c_read_accel_value_transfer_cm4" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmk32l3a6/driver_examples/lpi2c/read_accel_value_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpi2c/read_accel_value_transfer/cm4" type="xml">
            <files mask="lpi2c_read_accel_value_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpit_chained_channel_cm4" name="lpit_chained_channel_cm4" brief="The LPIT chained channel project is a simple example of the SDK LPIT driver. It sets up the LPIT hardware block to trigger a periodic interrupt after every 1 second in the channel No.0, the channel No.1 chained with channel No.0, if LPIT contain more than two channels, the channel No.2 chained with channel No.1....the channel No.N chained with Channel No.N-1. When the LPIT interrupt is triggered." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/frdmk32l3a6/driver_examples/lpit/chained_channel/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpit/chained_channel/cm4" type="xml">
            <files mask="lpit_chained_channel_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpit_single_channel_cm4" name="lpit_single_channel_cm4" brief="The LPIT single channel project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/frdmk32l3a6/driver_examples/lpit/single_channel/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpit/single_channel/cm4" type="xml">
            <files mask="lpit_single_channel_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_edma_b2b_transfer_master_cm4" name="lpspi_edma_b2b_transfer_master_cm4" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/edma_b2b_transfer/master/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/edma_b2b_transfer/master/cm4" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_edma_b2b_transfer_slave_cm4" name="lpspi_edma_b2b_transfer_slave_cm4" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/edma_b2b_transfer/slave/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/edma_b2b_transfer/slave/cm4" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_cm4" name="lpspi_interrupt_cm4" brief="The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt/cm4" type="xml">
            <files mask="lpspi_interrupt_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_b2b_master_cm4" name="lpspi_interrupt_b2b_master_cm4" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b/master/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b/master/cm4" type="xml">
            <files mask="lpspi_interrupt_b2b_master_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_b2b_slave_cm4" name="lpspi_interrupt_b2b_slave_cm4" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b/slave/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b/slave/cm4" type="xml">
            <files mask="lpspi_interrupt_b2b_slave_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_b2b_transfer_master_cm4" name="lpspi_interrupt_b2b_transfer_master_cm4" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b_transfer/master/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b_transfer/master/cm4" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_interrupt_b2b_transfer_slave_cm4" name="lpspi_interrupt_b2b_transfer_slave_cm4" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm4" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_polling_b2b_transfer_master_cm4" name="lpspi_polling_b2b_transfer_master_cm4" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/polling_b2b_transfer/master/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/polling_b2b_transfer/master/cm4" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpspi_polling_b2b_transfer_slave_cm4" name="lpspi_polling_b2b_transfer_slave_cm4" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmk32l3a6/driver_examples/lpspi/polling_b2b_transfer/slave/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpspi/polling_b2b_transfer/slave/cm4" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lptmr_cm4" name="lptmr_cm4" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/lptmr/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lptmr/cm4" type="xml">
            <files mask="lptmr_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_edma_transfer_cm4" name="lpuart_edma_transfer_cm4" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/edma_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/edma_transfer/cm4" type="xml">
            <files mask="lpuart_edma_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_interrupt_cm4" name="lpuart_interrupt_cm4" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt/cm4" type="xml">
            <files mask="lpuart_interrupt_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_interrupt_rb_transfer_cm4" name="lpuart_interrupt_rb_transfer_cm4" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_rb_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_rb_transfer/cm4" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_interrupt_transfer_cm4" name="lpuart_interrupt_transfer_cm4" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_transfer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_transfer/cm4" type="xml">
            <files mask="lpuart_interrupt_transfer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_interrupt_transfer_seven_bits_cm4" name="lpuart_interrupt_transfer_seven_bits_cm4" brief="The lpuart_interrupt_transfer_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_transfer_seven_bits/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/interrupt_transfer_seven_bits/cm4" type="xml">
            <files mask="lpuart_interrupt_transfer_seven_bits_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_polling_cm4" name="lpuart_polling_cm4" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/polling/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/polling/cm4" type="xml">
            <files mask="lpuart_polling_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_lpuart_polling_seven_bits_cm4" name="lpuart_polling_seven_bits_cm4" brief="The lpuart_polling_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console instantly.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk32l3a6/driver_examples/lpuart/polling_seven_bits/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/lpuart/polling_seven_bits/cm4" type="xml">
            <files mask="lpuart_polling_seven_bits_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_mu_interrupt_core0" name="mu_interrupt_core0" brief="The mu_interrupt example shows how to use MU driver in interrupt way:In this example:1. Core 0 send message to Core 1 in interrupt mode via MU module.2. Core 1 send message back to Core 0 in interrupt mode.3. Core 0 receive message sent from Core 1 in interrupt mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mu" linked_projects="frdmk32l3a6_mu_interrupt_core1" path="examples/frdmk32l3a6/driver_examples/mu/interrupt/core0">
          <external path="examples/frdmk32l3a6/driver_examples/mu/interrupt/core0" type="xml">
            <files mask="mu_interrupt_core0_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_mu_polling_core0" name="mu_polling_core0" brief="The mu_polling example shows how to use MU driver in polling way:In this example:1. Core 0 send message to Core 1 in polling mode via MU module.2. Core 1 send message back to Core 0 in polling mode.3. Core 0 receive message sent from Core 1 in polling mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mu" linked_projects="frdmk32l3a6_mu_polling_core1" path="examples/frdmk32l3a6/driver_examples/mu/polling/core0">
          <external path="examples/frdmk32l3a6/driver_examples/mu/polling/core0" type="xml">
            <files mask="mu_polling_core0_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_pflash_cm4" name="pflash_cm4" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="examples/frdmk32l3a6/driver_examples/flash/pflash/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/flash/pflash/cm4" type="xml">
            <files mask="pflash_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_rtc_cm4" name="rtc_cm4" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/rtc/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/rtc/cm4" type="xml">
            <files mask="rtc_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_sema42_dual_core_core0" name="sema42_dual_core_core0" brief="The sema42 example shows how to use SEMA42 driver to lock and unlock a sema gate:In this example:1. Firstly, Core 0 turn on LED  and lock a sema gate then boot up Core 1 wake up.2. Core 1 must be wait until Core 0 unlocks this sema gate to lock it.3. After user press any key in terminal window, the sema gate will be unlocked by core 0,then core 1 will lock it and turn off the LEDIf the board does not have LED to show the status, then core 1 will send a flagto core 0 when core 1 has locked the sema gate. Core 0 outputs the success logafter it received the flag." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sema42" linked_projects="frdmk32l3a6_sema42_dual_core_core1" path="examples/frdmk32l3a6/driver_examples/sema42/dual_core/core0">
          <external path="examples/frdmk32l3a6/driver_examples/sema42/dual_core/core0" type="xml">
            <files mask="sema42_dual_core_core0_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_combine_pwm_cm4" name="tpm_combine_pwm_cm4" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/combine_pwm/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/combine_pwm/cm4" type="xml">
            <files mask="tpm_combine_pwm_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_dual_edge_capture_cm4" name="tpm_dual_edge_capture_cm4" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/dual_edge_capture/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/dual_edge_capture/cm4" type="xml">
            <files mask="tpm_dual_edge_capture_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_input_capture_cm4" name="tpm_input_capture_cm4" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/input_capture/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/input_capture/cm4" type="xml">
            <files mask="tpm_input_capture_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_output_compare_cm4" name="tpm_output_compare_cm4" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/output_compare/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/output_compare/cm4" type="xml">
            <files mask="tpm_output_compare_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_pwm_twochannel_cm4" name="tpm_pwm_twochannel_cm4" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/pwm_twochannel/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/pwm_twochannel/cm4" type="xml">
            <files mask="tpm_pwm_twochannel_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_simple_pwm_cm4" name="tpm_simple_pwm_cm4" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/simple_pwm/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/simple_pwm/cm4" type="xml">
            <files mask="tpm_simple_pwm_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tpm_timer_cm4" name="tpm_timer_cm4" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk32l3a6/driver_examples/tpm/timer/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/tpm/timer/cm4" type="xml">
            <files mask="tpm_timer_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_trng_random_cm4" name="trng_random_cm4" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/trng" path="examples/frdmk32l3a6/driver_examples/trng/random/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/trng/random/cm4" type="xml">
            <files mask="trng_random_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_tstmr_cm4" name="tstmr_cm4" brief="The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/tstmr/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/tstmr/cm4" type="xml">
            <files mask="tstmr_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_wdog32_cm4" name="wdog32_cm4" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/wdog32/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/wdog32/cm4" type="xml">
            <files mask="wdog32_cm4_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk32l3a6_xrdc_cm4" name="xrdc_cm4" brief="The xrdc example shows how to control the memory and peripheral accesspolicy using XRDC.In this example, one peripheral and a memory region are set to unaccessible, thenthe hardfault occurs." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk32l3a6/driver_examples/xrdc/cm4">
          <external path="examples/frdmk32l3a6/driver_examples/xrdc/cm4" type="xml">
            <files mask="xrdc_cm4_v3_8.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="K32L3A60xxx" name="K32L3A60" version="1.0.0" full_name="K32L3A60xxx" family="K32L3A60" platform="Kinetis">
      <description>NXP’s Energy Efficient Cortex-M4 MCU with Cortex-M0+ and Advanced Security</description>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="cm0plus_K32L3A60xxx" name="cm0plus" fpu="false" type="cm0plus" slave_roles="M0SLAVE" boot_role="primary_secondary"/>
      <core id="cm4_K32L3A60xxx" name="cm4" fpu="true" type="cm4" boot_role="primary"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_cm4_K32L3A60xxx" name="PROGRAM_FLASH_cm4" addr="00000000" size="00100000" type="Flash" access="RO"/>
        <memoryBlock id="PROGRAM_FLASH_cm0plus_K32L3A60xxx" name="PROGRAM_FLASH_cm0plus" addr="01000000" size="00040000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_DTC_cm4_K32L3A60xxx" name="SRAM_DTC_cm4" addr="20000000" size="00030000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_TCM_cm0plus_K32L3A60xxx" name="SRAM_TCM_cm0plus" addr="09000000" size="00020000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_ITC_cm4_K32L3A60xxx" name="SRAM_ITC_cm4" addr="08000000" size="00010000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_RAM_K32L3A60xxx" name="FLEX_RAM" addr="48000000" size="00001000" type="RAM" access="RW"/>
        <memoryBlock id="USB_RAM_K32L3A60xxx" name="USB_RAM" addr="48010000" size="00000800" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="1280" ram_size_kb="384"/>
      <package id="K32L3A60VPJ1A" name="K32L3A60VPJ1A"/>
      <evaluation_boards>
        <evaluation_board name="frdmk32l3a6"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.attach.slave.release.K32L3A60xxx" name="internal.attach.slave" value="true"/>
            <params id="internal.multi.swd.release.K32L3A60xxx" name="internal.multi.swd" value="true"/>
            <params id="internal.wiretype.release.K32L3A60xxx" name="internal.wiretype" value="SWD*,JTAG"/>
            <params id="internal.has_swo.release.K32L3A60xxx" name="internal.has_swo" value="true"/>
            <params id="internal.connect.script.debug.mcuxpresso.K32L3A60xxx" name="internal.connect.script" value="K32L3Aconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_cm4_K32L3A60xxx">
              <driverBinary path="core/devices/K32L3A60/mcuxpresso" type="binary">
                <files mask="FTFE_4K_K32L3A_cm4.cfx"/>
              </driverBinary>
            </driver>
            <driver id_refs="PROGRAM_FLASH_cm0plus_K32L3A60xxx">
              <driverBinary path="core/devices/K32L3A60/mcuxpresso" type="binary">
                <files mask="FTFE_2K_K32L3A_cm0plus.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="bss_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="mtb_supported" value="false"/>
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="bss_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="mtb_supported" value="false"/>
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmk32l3a6.K32L3A60" name="frdmk32l3a6" brief="Board_project_template frdmk32l3a6" version="1.0.0" full_name="Board_project_template frdmk32l3a6" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/frdmk32l3a6/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.devices.K32L3A60_startup.K32L3A60"/>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.gpio.K32L3A60"/>
          <component_dependency value="platform.drivers.port.K32L3A60"/>
          <component_dependency value="platform.drivers.lpuart.K32L3A60"/>
          <component_dependency value="component.lpuart_adapter.K32L3A60"/>
          <component_dependency value="platform.drivers.msmc.K32L3A60"/>
          <component_dependency value="platform.drivers.lpi2c.K32L3A60"/>
          <any_of>
            <all>
              <component_dependency value="platform.utilities.assert.K32L3A60"/>
              <component_dependency value="utility.debug_console.K32L3A60"/>
              <component_dependency value="component.serial_manager.K32L3A60"/>
            </all>
            <all>
              <component_dependency value="platform.utilities.assert_lite.K32L3A60"/>
              <component_dependency value="utility.debug_console_lite.K32L3A60"/>
            </all>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
      </source>
      <source relative_path="cm4" project_relative_path="./" type="c_include" device_cores="cm4_K32L3A60xxx">
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="cm4" project_relative_path="./" type="src" device_cores="cm4_K32L3A60xxx">
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <source relative_path="cm0plus" project_relative_path="./" type="c_include" device_cores="cm0plus_K32L3A60xxx">
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="cm0plus" project_relative_path="./" type="src" device_cores="cm0plus_K32L3A60xxx">
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="cm4" project_relative_path="./" type="c_include" device_cores="cm4_K32L3A60xxx"/>
        <include_path relative_path="cm0plus" project_relative_path="./" type="c_include" device_cores="cm0plus_K32L3A60xxx"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.K32L3A60" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="K32L3A60xxx" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.K32L3A60"/>
          <component_dependency value="platform.Include_dsp.K32L3A60"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.K32L3A60" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L3A60" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.K32L3A60" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.K32L3A60" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.K32L3A60" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.K32L3A60" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.K32L3A60" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.K32L3A60" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.K32L3A60" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.K32L3A60" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.K32L3A60" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.K32L3A60" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L3A60" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.K32L3A60" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.K32L3A60" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.K32L3A60" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="K32L3A60xxx" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.K32L3A60" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="K32L3A60xxx" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="CMSIS_Include_common_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="CMSIS_Include_common_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm0plus.K32L3A60" name="CMSIS_Include_core_cm0plus" brief="Cmsis_include_core_cm0plus" version="5.3.0" full_name="Cmsis_include_core_cm0plus" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.K32L3A60"/>
          <component_dependency value="platform.Include_dsp.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="CMSIS_Include_core_cm0plus_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm4.K32L3A60" name="CMSIS_Include_core_cm4" brief="Cmsis_include_core_cm4" version="5.3.0" full_name="Cmsis_include_core_cm4" devices="K32L3A60xxx" device_cores="cm4_K32L3A60xxx" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.K32L3A60"/>
          <component_dependency value="platform.Include_dsp.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="CMSIS_Include_core_cm4_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.K32L3A60" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="K32L3A60xxx" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="CMSIS_Include_dsp_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="CMSIS_Include_dsp_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.K32L3A60" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="K32L3A60xxx" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.K32L3A60.K32L3A60" name="K32L3A60" brief="Devices_project_template K32L3A60" version="1.0.0" full_name="Devices_project_template K32L3A60" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/K32L3A60/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.devices.K32L3A60_startup.K32L3A60"/>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.clock.K32L3A60"/>
          <component_dependency value="platform.drivers.gpio.K32L3A60"/>
          <component_dependency value="platform.drivers.port.K32L3A60"/>
          <component_dependency value="platform.drivers.lpuart.K32L3A60"/>
          <component_dependency value="component.lpuart_adapter.K32L3A60"/>
          <component_dependency value="platform.drivers.msmc.K32L3A60"/>
          <component_dependency value="platform.drivers.lpi2c.K32L3A60"/>
          <any_of>
            <all>
              <component_dependency value="platform.utilities.assert.K32L3A60"/>
              <component_dependency value="utility.debug_console.K32L3A60"/>
              <component_dependency value="component.serial_manager.K32L3A60"/>
            </all>
            <all>
              <component_dependency value="platform.utilities.assert_lite.K32L3A60"/>
              <component_dependency value="utility.debug_console_lite.K32L3A60"/>
            </all>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.K32L3A60" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/K32L3A60/template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L3A60"/>
          <component_dependency value="platform.drivers.dmamux.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.K32L3A60" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="K32L3A60xxx" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.K32L3A60" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.timer_manager.K32L3A60"/>
          <component_dependency value="component.gpio_adapter.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.K32L3A60" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.osa.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.crc_adapter.K32L3A60" name="crc_adapter" brief="Component crc_adapter" version="1.0.0" full_name="Component crc_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.crc.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.flash_adapter.K32L3A60" name="flash_adapter" brief="Component flash_adapter" version="1.0.0" full_name="Component flash_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/internal_flash" project_base_path="component/internal_flash">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.flash.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_flash.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpio_adapter.K32L3A60" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.0" full_name="Component gpio_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.K32L3A60"/>
          <component_dependency value="platform.drivers.port.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.K32L3A60" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.timer_manager.K32L3A60"/>
          <component_dependency value="component.gpio_adapter.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.K32L3A60" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="component_lists_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="component_lists_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.K32L3A60" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="utility.debug_console.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.K32L3A60" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.log.K32L3A60"/>
          <component_dependency value="utility.debug_console.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.K32L3A60" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.log.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpit_adapter.K32L3A60" name="lpit_adapter" brief="Component lpit_adapter" version="1.0.0" full_name="Component lpit_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.lpit.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpit.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_adapter.K32L3A60" name="lptmr_adapter" brief="Component lptmr_adapter" version="1.0.0" full_name="Component lptmr_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.lptmr.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_adapter.K32L3A60" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.lpuart.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="component_lpuart_adapter_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="component_lpuart_adapter_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.K32L3A60" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.lists.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.K32L3A60" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.lists.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.K32L3A60" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.lists.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.K32L3A60" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.K32L3A60" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.K32L3A60" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.lists.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.K32L3A60" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="utility.debug_console.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_tpm_adapter.K32L3A60" name="pwm_tpm_adapter" brief="Component pwm_tpm_adapter" version="1.0.0" full_name="Component pwm_tpm_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.tpm.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.K32L3A60" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.lists.K32L3A60"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.K32L3A60"/>
            <component_dependency value="component.serial_manager_swo.K32L3A60"/>
            <component_dependency value="component.serial_manager_virtual.K32L3A60"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_swo.K32L3A60" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="K32L3A60xxx" device_cores="cm4_K32L3A60xxx" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.serial_manager.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_swo.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_swo.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.K32L3A60" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.K32L3A60"/>
          <component_dependency value="component.serial_manager.K32L3A60"/>
          <component_dependency value="platform.drivers.lpuart.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.K32L3A60" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.K32L3A60"/>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.K32L3A60" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.K32L3A60" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.K32L3A60" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="component.lists.K32L3A60"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.K32L3A60"/>
            <component_dependency value="component.lptmr_adapter.K32L3A60"/>
            <component_dependency value="component.lpit_adapter.K32L3A60"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.tpm_adapter.K32L3A60" name="tpm_adapter" brief="Component tpm_adapter" version="1.0.0" full_name="Component tpm_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.tpm.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.trng_adapter.K32L3A60" name="trng_adapter" brief="Component trng_adapter" version="1.0.0" full_name="Component trng_adapter" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.trng.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_trng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.devices.K32L3A60_CMSIS.K32L3A60" name="K32L3A60_CMSIS" brief="Device K32L3A60_cmsis" version="1.0.0" full_name="Device K32L3A60_cmsis" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/K32L3A60" project_base_path="device">
      <dependencies>
        <any_of>
          <component_dependency value="platform.Include_core_cm4.K32L3A60"/>
          <component_dependency value="platform.Include_core_cm0plus.K32L3A60"/>
        </any_of>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm0plus_K32L3A60xxx">
        <files mask="K32L3A60_cm0plus.h"/>
        <files mask="K32L3A60_cm0plus_features.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm4_K32L3A60xxx">
        <files mask="K32L3A60_cm4.h"/>
        <files mask="K32L3A60_cm4_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="device_K32L3A60_CMSIS_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="device_K32L3A60_CMSIS_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include" device_cores="cm0plus_K32L3A60xxx"/>
        <include_path relative_path="./" type="c_include" device_cores="cm4_K32L3A60xxx"/>
      </include_paths>
    </component>
    <component id="platform.devices.K32L3A60_debugger.K32L3A60" name="K32L3A60_debugger" brief="Device K32L3A60_debugger" version="1.0.0" full_name="Device K32L3A60_debugger" devices="K32L3A60xxx" user_visible="true" type="debugger" package_base_path="core/devices/K32L3A60" project_base_path="svd">
      <source relative_path="./" type="xml" device_cores="cm0plus_K32L3A60xxx">
        <files mask="K32L3A60_cm0plus.xml"/>
      </source>
      <source relative_path="./" type="xml" device_cores="cm4_K32L3A60xxx">
        <files mask="K32L3A60_cm4.xml"/>
      </source>
    </component>
    <component id="platform.devices.K32L3A60_linker.K32L3A60" name="K32L3A60_linker" brief="Device K32L3A60_linker" version="1.0.0" full_name="Device K32L3A60_linker" devices="K32L3A60xxx" user_visible="true" type="linker" package_base_path="core/devices/K32L3A60" project_base_path="K32L3A60">
      <source toolchain="armgcc" relative_path="gcc" type="linker" device_cores="cm0plus_K32L3A60xxx">
        <files mask="K32L3A60xxx_cm0plus_flash.ld"/>
        <files mask="K32L3A60xxx_cm0plus_ram.ld"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" type="linker" device_cores="cm4_K32L3A60xxx">
        <files mask="K32L3A60xxx_cm4_flash.ld"/>
        <files mask="K32L3A60xxx_cm4_ram.ld"/>
      </source>
    </component>
    <component id="platform.devices.K32L3A60_startup.K32L3A60" name="K32L3A60_startup" brief="Device K32L3A60_startup" version="1.1.0" full_name="Device K32L3A60_startup" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/K32L3A60" project_base_path="startup">
      <dependencies>
        <component_dependency value="platform.devices.K32L3A60_system.K32L3A60"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include" device_cores="cm0plus_K32L3A60xxx">
        <files mask="startup_K32L3A60_cm0plus.S"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include" device_cores="cm4_K32L3A60xxx">
        <files mask="startup_K32L3A60_cm4.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c" device_cores="cm0plus_K32L3A60xxx">
        <files mask="startup_k32l3a60_cm0plus.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp" device_cores="cm0plus_K32L3A60xxx">
        <files mask="startup_k32l3a60_cm0plus.cpp"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c" device_cores="cm4_K32L3A60xxx">
        <files mask="startup_k32l3a60_cm4.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp" device_cores="cm4_K32L3A60xxx">
        <files mask="startup_k32l3a60_cm4.cpp"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src">
        <files mask="boot_multicore_slave.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="c_include">
        <files mask="boot_multicore_slave.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="device_K32L3A60_startup_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="device_K32L3A60_startup_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="mcuxpresso" project_relative_path="./" toolchain="mcuxpresso" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.devices.K32L3A60_system.K32L3A60" name="K32L3A60_system" brief="Device K32L3A60_system" version="1.0.0" full_name="Device K32L3A60_system" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/K32L3A60" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.devices.K32L3A60_CMSIS.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src" device_cores="cm0plus_K32L3A60xxx">
        <files mask="system_K32L3A60_cm0plus.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm0plus_K32L3A60xxx">
        <files mask="system_K32L3A60_cm0plus.h"/>
      </source>
      <source relative_path="./" type="src" device_cores="cm4_K32L3A60xxx">
        <files mask="system_K32L3A60_cm4.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm4_K32L3A60xxx">
        <files mask="system_K32L3A60_cm4.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="device_K32L3A60_system_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="device_K32L3A60_system_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include" device_cores="cm0plus_K32L3A60xxx"/>
        <include_path relative_path="./" type="c_include" device_cores="cm4_K32L3A60xxx"/>
      </include_paths>
    </component>
    <component id="docs.K32L3A60.K32L3A60" name="K32L3A60" brief="Docs k32l3a60" version="1.0.0" full_name="Docs k32l3a60" devices="K32L3A60xxx" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for FRDM-K32L3A6.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for FRDM-K32L3A6.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.cache_lpcac.K32L3A60" name="cache_lpcac" brief="CACHE Driver" version="2.1.1" full_name="CACHE Lpcac Driver" devices="K32L3A60xxx" device_cores="cm4_K32L3A60xxx" user_visible="true" type="driver" package_base_path="core/devices/K32L3A60/drivers/cm4" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_cache_lpcac_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cache_lplmem.K32L3A60" name="cache_lplmem" brief="CACHE Driver" version="2.1.1" full_name="CACHE Lplmem Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/devices/K32L3A60/drivers/cm0plus" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_cache_lplmem_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cau3.K32L3A60" name="cau3" brief="CAU3 Driver" version="2.0.4" full_name="CAU3 Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/cau3" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cau3.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cau3.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_cau3_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_cau3_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.K32L3A60" name="clock" brief="Clock Driver" version="2.2.1" full_name="Clock Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/devices/K32L3A60/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_clock_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_clock_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.K32L3A60" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.K32L3A60"/>
          <component_dependency value="platform.devices.K32L3A60_CMSIS.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_common_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_common_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.crc.K32L3A60" name="crc" brief="CRC Driver" version="2.0.3" full_name="CRC Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/crc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_crc_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_crc_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dac_1.K32L3A60" name="dac" brief="DAC Driver" version="2.1.0" full_name="DAC Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/dac_1" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_dac_1_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_dac_1_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmamux.K32L3A60" name="dmamux" brief="DMAMUX Driver" version="2.0.5" full_name="DMAMUX Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/dmamux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_dmamux_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_dmamux_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.edma.K32L3A60" name="edma" brief="EDMA Driver" version="2.4.1" full_name="EDMA Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/edma" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
          <component_dependency value="platform.drivers.dmamux.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_edma_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_edma_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ewm.K32L3A60" name="ewm" brief="EWM Driver" version="2.0.3" full_name="EWM Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/ewm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_ewm_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_ewm_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flash.K32L3A60" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/flash" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_flash_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_flash_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexbus.K32L3A60" name="flexbus" brief="FLEXBUS Driver" version="2.1.1" full_name="FLEXBUS Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/flexbus" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexbus.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexbus.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio.K32L3A60" name="flexio" brief="FLEXIO Driver" version="2.0.4" full_name="FLEXIO Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_flexio_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_flexio_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2c_master.K32L3A60" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.4.0" full_name="FLEXIO I2C Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_flexio_i2c_master_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_flexio_i2c_master_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi.K32L3A60" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.2.0" full_name="FLEXIO SPI Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_flexio_spi_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_flexio_spi_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi_edma.K32L3A60" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.2.0" full_name="FLEXIO SPI EDMA Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L3A60"/>
          <component_dependency value="platform.drivers.flexio_spi.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_flexio_spi_edma_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_flexio_spi_edma_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart.K32L3A60" name="flexio_uart" brief="FLEXIO UART Driver" version="2.3.0" full_name="FLEXIO UART Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_flexio_uart_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_flexio_uart_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart_edma.K32L3A60" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.3.0" full_name="FLEXIO UART EDMA Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_uart.K32L3A60"/>
          <component_dependency value="platform.drivers.edma.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_flexio_uart_edma_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_flexio_uart_edma_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpio.K32L3A60" name="gpio" brief="GPIO Driver" version="2.5.1" full_name="GPIO Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_gpio_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_gpio_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.intmux.K32L3A60" name="intmux" brief="INTMUX Driver" version="2.0.4" full_name="INTMUX Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/intmux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_intmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_intmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_intmux_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.llwu.K32L3A60" name="llwu" brief="LLWU Driver" version="2.0.5" full_name="LLWU Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/llwu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpadc.K32L3A60" name="lpadc" brief="LPADC Driver" version="2.3.0" full_name="LPADC Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lpadc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpadc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpadc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_lpadc_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lpadc_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpcmp.K32L3A60" name="lpcmp" brief="LPCMP Driver" version="2.0.3" full_name="LPCMP Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lpcmp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpcmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpcmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_lpcmp_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lpcmp_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c.K32L3A60" name="i2c" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_lpi2c_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lpi2c_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_edma.K32L3A60" name="i2c_edma" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Edma Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L3A60"/>
          <component_dependency value="platform.drivers.lpi2c.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_lpi2c_edma_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lpi2c_edma_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpit.K32L3A60" name="lpit" brief="LPIT Driver" version="2.0.2" full_name="LPIT Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lpit" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpit.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpit.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_lpit_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lpit_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi.K32L3A60" name="lpspi" brief="LPSPI Driver" version="2.1.0" full_name="LPSPI Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_lpspi_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lpspi_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_edma.K32L3A60" name="lpspi_edma" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Edma Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L3A60"/>
          <component_dependency value="platform.drivers.lpspi.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_lpspi_edma_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lpspi_edma_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lptmr.K32L3A60" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lptmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_lptmr_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lptmr_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart.K32L3A60" name="lpuart" brief="LPUART Driver" version="2.4.1" full_name="LPUART Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_lpuart_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lpuart_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_edma.K32L3A60" name="lpuart_edma" brief="LPUART Driver" version="2.4.0" full_name="LPUART Edma Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.K32L3A60"/>
          <component_dependency value="platform.drivers.lpuart.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_lpuart_edma_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mmdvsq.K32L3A60" name="mmdvsq" brief="MMDVSQ Driver" version="2.0.3" full_name="MMDVSQ Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/mmdvsq" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mmdvsq.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mmdvsq.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_mmdvsq_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.msmc.K32L3A60" name="msmc" brief="MSMC Driver" version="2.1.2" full_name="MSMC Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/msmc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_msmc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_msmc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_msmc_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_msmc_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mu.K32L3A60" name="mu" brief="MU Driver" version="2.0.6" full_name="MU Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/mu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_mu_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_mu_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.nand_flash-common.K32L3A60" name="nand_flash-common" brief="Driver nand_flash-common" version="1.0.0" full_name="Driver nand_flash-common" devices="K32L3A60xxx" user_visible="true" type="abstraction_layer" package_base_path="core/components/flash/nand" project_base_path="nand_flash">
      <source relative_path="./" type="c_include">
        <files mask="fsl_nand_flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.port.K32L3A60" name="port" brief="PORT Driver" version="2.1.1" full_name="PORT Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/port" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_port_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_port_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rtc.K32L3A60" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/rtc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_rtc_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_rtc_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai.K32L3A60" name="sai" brief="SAI Driver" version="2.3.2" full_name="SAI Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/sai" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sema42.K32L3A60" name="sema42" brief="SEMA42 Driver" version="2.0.2" full_name="SEMA42 Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/sema42" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sema42.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sema42.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_sema42_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_sema42_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sim.K32L3A60" name="sim" brief="SIM Driver" version="2.1.2" full_name="SIM Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/sim" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_sim_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_sim_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.smartcard_emvsim.K32L3A60" name="smartcard_emvsim" brief="SMARTCARD EMVSIM Driver" version="2.2.2" full_name="SMARTCARD EMVSIM Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/smartcard" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smartcard.h"/>
        <files mask="fsl_smartcard_emvsim.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smartcard_emvsim.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.smartcard_phy_emvsim.K32L3A60" name="smartcard_phy_emvsim" brief="SMARTCARD PHY EMVSIM, use only one SMARTCARD PHY in the project" version="2.2.2" full_name="SMARTCARD PHY EMVSIM" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/smartcard" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.smartcard_emvsim.K32L3A60"/>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smartcard_phy.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smartcard_phy_emvsim.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.spm.K32L3A60" name="spm" brief="SPM Driver" version="2.3.0" full_name="SPM Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/spm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_spm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tpm.K32L3A60" name="tpm" brief="TPM Driver" version="2.0.7" full_name="TPM Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/tpm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_tpm_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_tpm_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.trgmux.K32L3A60" name="trgmux" brief="TRGMUX Driver" version="2.0.1" full_name="TRGMUX Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/trgmux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trgmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_trgmux.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.trng.K32L3A60" name="trng" brief="TRNG Driver" version="2.0.12" full_name="TRNG Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/trng" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_trng.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trng.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_trng_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_trng_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tstmr.K32L3A60" name="tstmr" brief="TSTMR Driver" version="2.0.0" full_name="TSTMR Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/tstmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tstmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_tstmr_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_tstmr_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.usdhc.K32L3A60" name="sdhc" brief="USDHC Driver" version="2.7.0" full_name="USDHC Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/usdhc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_usdhc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usdhc.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.vref.K32L3A60" name="vref" brief="VREF Driver" version="2.1.2" full_name="VREF Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/vref" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_vref.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wdog32.K32L3A60" name="wdog" brief="WDOG32 Driver" version="2.0.4" full_name="WDOG32 Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/wdog32" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wdog32.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wdog32.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_wdog32_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.xrdc.K32L3A60" name="xrdc" brief="XRDC Driver" version="2.0.4" full_name="XRDC Driver" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="driver" package_base_path="core/drivers/xrdc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_xrdc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_xrdc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="driver_xrdc_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="driver_xrdc_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.K32L3A60" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="K32L3A60xxx" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.usb.common_header.K32L3A60" name="USB Common Header" brief="Middleware usb common_header" version="2.7.0" full_name="USB Common Header" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" category="USB/USB Common Header" user_visible="true" type="middleware" package_base_path="core/middleware/usb" project_base_path="usb">
      <dependencies>
        <component_dependency value="component.osa.K32L3A60"/>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.common_header.K32L3A60" name="USB Device Common Header" brief="Middleware usb device common_header" version="2.7.0" full_name="USB Device Common Header" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="core/middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.K32L3A60"/>
          <component_dependency value="middleware.usb.common_header.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="device" project_relative_path="device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source relative_path="device" project_relative_path="device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <include_paths>
        <include_path relative_path="device" project_relative_path="device/include" type="c_include"/>
        <include_path relative_path="device" project_relative_path="device/source" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.K32L3A60" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="K32L3A60xxx" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="utilities_misc_utilities_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="utilities_misc_utilities_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.K32L3A60" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.K32L3A60" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="utility_assert_lite_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="utility_assert_lite_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.K32L3A60" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.K32L3A60"/>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.K32L3A60" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.K32L3A60"/>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm0plus_K32L3A60xxx">
        <files mask="utility_debug_console_lite_K32L3A60_cm0plus.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="utility_debug_console_lite_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.incbin.K32L3A60" name="incbin" brief="Used to include slave core binary into master core binary." version="1.0.0" full_name="utility incbin" devices="K32L3A60xxx" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="asm_include">
        <files mask="fsl_incbin.S"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_K32L3A60xxx">
        <files mask="utility_incbin_K32L3A60_cm4.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.notifier.K32L3A60" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/devices/K32L3A60/utilities" project_base_path="utilities/utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.K32L3A60"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.K32L3A60" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="K32L3A60xxx" device_cores="cm0plus_K32L3A60xxx cm4_K32L3A60xxx" slave_roles="M0SLAVE" user_visible="true" type="utilities" package_base_path="core/devices/K32L3A60/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.K32L3A60"/>
          <component_dependency value="component.lists.K32L3A60"/>
          <component_dependency value="platform.drivers.common.K32L3A60"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
