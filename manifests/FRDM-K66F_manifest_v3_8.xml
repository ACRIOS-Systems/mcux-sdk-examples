<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_SUPER" name="SDKVersion 2.9.0 SuperSet" brief="This is SDK version 2.9.0 manifest file." format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-06-03 10:11:51.991230-->
  <!--This manifest is generated based on sdk repo commit: 242d157ba29afc4bbd1dac95f382a1491bc2daf5-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="twrk65f180m"/>
  </externalDefinitions>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="frdmk66f" name="FRDM-K66F" href="https://www.nxp.com/pip/FRDM-K66F" version="1.0.0" package="MK66FN2M0VMD18">
      <description>Freedom Development Platform for Kinetis K66, K65, and K26 MCUs</description>
      <image path="core/boards/frdmk66f" type="image">
        <files mask="frdmk66f.png"/>
      </image>
      <examples>
        <example id="frdmk66f_adc16_continuous_edma" name="adc16_continuous_edma" brief="The ADC16 continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. EDMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. EDMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/frdmk66f/driver_examples/adc16/continuous_edma">
          <external path="examples/frdmk66f/driver_examples/adc16/continuous_edma" type="xml">
            <files mask="adc16_continuous_edma_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/frdmk66f/driver_examples/adc16/interrupt">
          <external path="examples/frdmk66f/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_adc16_low_power_async_edma" name="adc16_low_power_async_edma" brief="The ADC Low Power Async DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 100 ms, low power timer trigger the ADC module convertvalue on ADC channel. After 16 times(1,6s) the DMA transfer finish interrupt wake up the CPU to process sampled data, print result touser and toggle LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/adc16_low_power_async_edma">
          <external path="examples/frdmk66f/demo_apps/adc16_low_power_async_edma" type="xml">
            <files mask="adc16_low_power_async_edma_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_adc16_low_power_async_edma_peripheral" name="adc16_low_power_async_edma_peripheral" brief="The ADC Low Power Async DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 100 ms, low power timer trigger the ADC module convertvalue on ADC channel. After 16 times(1,6s) the DMA transfer finish interrupt wake up the CPU to process sampled data, print result touser and toggle LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/adc16_low_power_async_edma_peripheral">
          <external path="examples/frdmk66f/demo_apps/adc16_low_power_async_edma_peripheral" type="xml">
            <files mask="adc16_low_power_async_edma_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_adc16_low_power_peripheral" name="adc16_low_power_peripheral" brief="The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/adc16_low_power_peripheral">
          <external path="examples/frdmk66f/demo_apps/adc16_low_power_peripheral" type="xml">
            <files mask="adc16_low_power_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/frdmk66f/driver_examples/adc16/polling">
          <external path="examples/frdmk66f/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_bubble_peripheral" name="bubble_peripheral" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/bubble_peripheral">
          <external path="examples/frdmk66f/demo_apps/bubble_peripheral" type="xml">
            <files mask="bubble_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_cmp_interrupt" name="cmp_interrupt" brief="The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/cmp" path="examples/frdmk66f/driver_examples/cmp/interrupt">
          <external path="examples/frdmk66f/driver_examples/cmp/interrupt" type="xml">
            <files mask="cmp_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_cmp_polling" name="cmp_polling" brief="The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/cmp" path="examples/frdmk66f/driver_examples/cmp/polling">
          <external path="examples/frdmk66f/driver_examples/cmp/polling" type="xml">
            <files mask="cmp_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_cmt" name="cmt" brief="The cmt example shows the simplest way to use CMT driver.In this example, the CMT is work as Time mode and used to modulation 11 bit numbers of data.The CMT is configured to generate a 40000hz carrier generator signal through a modulator gateconfigured with different mark/space time period to represent bit 1 and bit 0. The modulated data rate is 9600.Note, The end of cycle interrupt provides a means for the user to reload new mark/space valuesinto the modulator data registers. Modulator data register updates will take effect at the end of the current modulation cycle. The CMT internal down-counter and space period register areupdated at the end of every modulation cycle, irrespective of interrupt handling and the stateof the interrupt. so please make sure the IRQ handler process is shorter than the modulationcycle to ensure the new mark/space counter is prepared before each end of modulation cycle." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk66f/driver_examples/cmt">
          <external path="examples/frdmk66f/driver_examples/cmt" type="xml">
            <files mask="cmt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk66f/driver_examples/crc">
          <external path="examples/frdmk66f/driver_examples/crc" type="xml">
            <files mask="crc_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dac_adc_peripheral" name="dac_adc_peripheral" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/dac_adc_peripheral">
          <external path="examples/frdmk66f/demo_apps/dac_adc_peripheral" type="xml">
            <files mask="dac_adc_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dac_basic" name="dac_basic" brief="The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk66f/driver_examples/dac/basic">
          <external path="examples/frdmk66f/driver_examples/dac/basic" type="xml">
            <files mask="dac_basic_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dac_buffer_interrupt" name="dac_buffer_interrupt" brief="The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk66f/driver_examples/dac/buffer_interrupt">
          <external path="examples/frdmk66f/driver_examples/dac/buffer_interrupt" type="xml">
            <files mask="dac_buffer_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dac_continuous_pdb_edma" name="dac_continuous_pdb_edma" brief="The demo shows how to use the PDB to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. PDB is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by PDB and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.while read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dac" path="examples/frdmk66f/driver_examples/dac/continuous_pdb_edma">
          <external path="examples/frdmk66f/driver_examples/dac/continuous_pdb_edma" type="xml">
            <files mask="dac_continuous_pdb_edma_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_edma_b2b_transfer_master" name="dspi_edma_b2b_transfer_master" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/edma_b2b_transfer/master">
          <external path="examples/frdmk66f/driver_examples/dspi/edma_b2b_transfer/master" type="xml">
            <files mask="dspi_edma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_edma_b2b_transfer_slave" name="dspi_edma_b2b_transfer_slave" brief="The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/edma_b2b_transfer/slave">
          <external path="examples/frdmk66f/driver_examples/dspi/edma_b2b_transfer/slave" type="xml">
            <files mask="dspi_edma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_half_duplex_edma_master" name="dspi_half_duplex_edma_master" brief="The dspi_half_duplex_edma_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sendsa piece of data to slave, and receive a piece of data from slave. This example checks if the data received fromslave is correct.Besides, master will transfer in EDMA way. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/edma/master">
          <external path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/edma/master" type="xml">
            <files mask="dspi_half_duplex_edma_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_half_duplex_edma_slave" name="dspi_half_duplex_edma_slave" brief="The dspi_half_duplex_edma_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses edma mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/edma/slave">
          <external path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/edma/slave" type="xml">
            <files mask="dspi_half_duplex_edma_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_half_duplex_int_master" name="dspi_half_duplex_int_master" brief="The dspi_half_duplex_int_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.Besides, master will transfer in interrupt way. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/int/master">
          <external path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/int/master" type="xml">
            <files mask="dspi_half_duplex_int_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_half_duplex_int_slave" name="dspi_half_duplex_int_slave" brief="The dspi_half_duplex_int_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/int/slave">
          <external path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/int/slave" type="xml">
            <files mask="dspi_half_duplex_int_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_half_duplex_polling_master" name="dspi_half_duplex_polling_master" brief="The dspi_half_duplex_polling_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends apiece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. Besides, master will transfer in polling way. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/polling/master">
          <external path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/polling/master" type="xml">
            <files mask="dspi_half_duplex_polling_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_half_duplex_polling_slave" name="dspi_half_duplex_polling_slave" brief="The dspi_half_duplex_polling_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/polling/slave">
          <external path="examples/frdmk66f/driver_examples/dspi/half_duplex_transfer/polling/slave" type="xml">
            <files mask="dspi_half_duplex_polling_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_interrupt" name="dspi_interrupt" brief="The dspi_interrupt example shows how to use DSPI driver in interrupt way:In this example , one dspi instance used as DSPI master and another dspi instance used as DSPI slave in the same board.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/interrupt">
          <external path="examples/frdmk66f/driver_examples/dspi/interrupt" type="xml">
            <files mask="dspi_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_interrupt_b2b_master" name="dspi_interrupt_b2b_master" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_master.c' includes the DSPI master code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/interrupt_b2b/master">
          <external path="examples/frdmk66f/driver_examples/dspi/interrupt_b2b/master" type="xml">
            <files mask="dspi_interrupt_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_interrupt_b2b_slave" name="dspi_interrupt_b2b_slave" brief="The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the DSPI slave code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/interrupt_b2b/slave">
          <external path="examples/frdmk66f/driver_examples/dspi/interrupt_b2b/slave" type="xml">
            <files mask="dspi_interrupt_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_interrupt_b2b_transfer_master" name="dspi_interrupt_b2b_transfer_master" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/interrupt_b2b_transfer/master">
          <external path="examples/frdmk66f/driver_examples/dspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_interrupt_b2b_transfer_slave" name="dspi_interrupt_b2b_transfer_slave" brief="The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/interrupt_b2b_transfer/slave">
          <external path="examples/frdmk66f/driver_examples/dspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="dspi_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_polling_b2b_transfer_master" name="dspi_polling_b2b_transfer_master" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/polling_b2b_transfer/master">
          <external path="examples/frdmk66f/driver_examples/dspi/polling_b2b_transfer/master" type="xml">
            <files mask="dspi_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_dspi_polling_b2b_transfer_slave" name="dspi_polling_b2b_transfer_slave" brief="The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dspi" path="examples/frdmk66f/driver_examples/dspi/polling_b2b_transfer/slave">
          <external path="examples/frdmk66f/driver_examples/dspi/polling_b2b_transfer/slave" type="xml">
            <files mask="dspi_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ecompass_peripheral" name="ecompass_peripheral" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading). You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/ecompass_peripheral">
          <external path="examples/frdmk66f/demo_apps/ecompass_peripheral" type="xml">
            <files mask="ecompass_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_edma_channel_link" name="edma_channel_link" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk66f/driver_examples/edma/channel_link">
          <external path="examples/frdmk66f/driver_examples/edma/channel_link" type="xml">
            <files mask="edma_channel_link_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_edma_interleave_transfer" name="edma_interleave_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk66f/driver_examples/edma/interleave_transfer">
          <external path="examples/frdmk66f/driver_examples/edma/interleave_transfer" type="xml">
            <files mask="edma_interleave_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk66f/driver_examples/edma/memory_to_memory">
          <external path="examples/frdmk66f/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_edma_ping_pong_transfer" name="edma_ping_pong_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk66f/driver_examples/edma/ping_pong_transfer">
          <external path="examples/frdmk66f/driver_examples/edma/ping_pong_transfer" type="xml">
            <files mask="edma_ping_pong_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk66f/driver_examples/edma/scatter_gather">
          <external path="examples/frdmk66f/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_edma_wrap_transfer" name="edma_wrap_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmk66f/driver_examples/edma/wrap_transfer">
          <external path="examples/frdmk66f/driver_examples/edma/wrap_transfer" type="xml">
            <files mask="edma_wrap_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_enet_txrx_ptp1588_transfer" name="enet_txrx_ptp1588_transfer" brief="The enet_rxtx_ptp1588 example shows the way to use ENET driver to   receive and transmit frame in the 1588 feature required cases.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.3. How to add to the multicast group to receive PTP 1588 message.4. How to get the time stamp of the PTP 1588 timer.4. How to use Get the ENET transmit and receive frame time stamp.The example transmits 20 number PTP event frame, shows the timestamp of the transmitted frame.The length, source MAC address and destination MAC address of the received frame will be print. The time stamp of the received timestamp will be print when the PTP message frame is received. Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. you can change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/enet" path="examples/frdmk66f/driver_examples/enet/txrx_ptp1588_transfer">
          <external path="examples/frdmk66f/driver_examples/enet/txrx_ptp1588_transfer" type="xml">
            <files mask="enet_txrx_ptp1588_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_enet_txrx_transfer" name="enet_txrx_transfer" brief="The enet_rxtx example shows the simplest way to use ENET driver for simple frame receive and transmit.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.The example transmits 20 number broadcast frame, print the frame length, source MAC addressand destination MAC address when receive frame.Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. youcan change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/enet" path="examples/frdmk66f/driver_examples/enet/txrx_transfer">
          <external path="examples/frdmk66f/driver_examples/enet/txrx_transfer" type="xml">
            <files mask="enet_txrx_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ewm" name="ewm" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk66f/driver_examples/ewm">
          <external path="examples/frdmk66f/driver_examples/ewm" type="xml">
            <files mask="ewm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_flexcan_loopback" name="flexcan_loopback" brief="The flexcan_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/frdmk66f/driver_examples/flexcan/loopback">
          <external path="examples/frdmk66f/driver_examples/flexcan/loopback" type="xml">
            <files mask="flexcan_loopback_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_flexcan_loopback_transfer" name="flexcan_loopback_transfer" brief="The flexcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/frdmk66f/driver_examples/flexcan/loopback_transfer">
          <external path="examples/frdmk66f/driver_examples/flexcan/loopback_transfer" type="xml">
            <files mask="flexcan_loopback_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_dspi" name="freertos_dspi" brief="The freertos_dspi example shows how to use DSPI driver in FreeRTOS:In this example , one dspi instance used as DSPI master with blocking and another dspi instance used as DSPI slave .1. DSPI master sends/receives data using task blocking calls to/from DSPI slave. (DSPI Slave uses interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_dspi">
          <external path="examples/frdmk66f/rtos_examples/freertos_dspi" type="xml">
            <files mask="freertos_dspi_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_event">
          <external path="examples/frdmk66f/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_generic">
          <external path="examples/frdmk66f/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_hello">
          <external path="examples/frdmk66f/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_i2c" name="freertos_i2c" brief="The freertos_i2c example shows an application using RTOS tasks with I2C driver:The example supports 2 different connections:On board connection and board to board connection.With one board connection, 2 I2C instances of the same board are used. One i2c instance used as I2C master and another I2C instance used as I2C slave .    Default settings in freertos_i2c.c (in folder boards/&lt;board&gt;/rtos_examples/freertos_i2c) is applied.    Two tasks are created. One task is associated with an I2C master operation and another task deals with I2C slave operation.    1. I2C master task sends data to I2C slave task.    2. I2C master task reads data sent back from I2C slave task.    The transmit data and the receive data of both I2C master task and I2C slave task are printed out on terminal.With board to board connection, one I2C instance on one board is used as I2C master and the I2C instance on other board is used as I2C slave. Tasks are created to run on each board to handle I2C communication.    File freertos_i2c.c should have following definitions:    #define EXAMPLE_CONNECT_I2C BOARD_TO_BOARD    For board used as I2C master:        #define I2C_MASTER_SLAVE isMASTER    For board used as I2C slave:        #define I2C_MASTER_SLAVE isSLAVE" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_i2c">
          <external path="examples/frdmk66f/rtos_examples/freertos_i2c" type="xml">
            <files mask="freertos_i2c_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_lpuart" name="freertos_lpuart" brief="The LPUART example for FreeRTOS demonstrates the possibility to use the LPUART driver in the RTOS.The example uses single instance of LPUART IP and writes string into, then reads back chars.After every 4B received, these are sent back on LPUART." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_lpuart">
          <external path="examples/frdmk66f/rtos_examples/freertos_lpuart" type="xml">
            <files mask="freertos_lpuart_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_mutex">
          <external path="examples/frdmk66f/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_queue">
          <external path="examples/frdmk66f/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_segger_sysview" name="freertos_segger_sysview" brief="Segger Sysview demo shows the basic capabilities of Segger System Viewer tool.Required software:    - J-Link Software and Documentation Pack    - SystemView - Real-time analysis and visualization    - J-Link OpenSDA - Board-Specific Firmwarescan be downloaded from https://www.segger.com/downloads/jlinkDemo requires JLink connected. The JLink can be external probe or on board SDA debugger.In case of SDA debugger you have to change firmware to J-Link OpenSDA by holding board RESET button while power up board. The board is then detected as USB mass storage device and it's required to copy the .bin firmware to the device. When it's done you have to reset the board once more." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples/visualization" path="examples/frdmk66f/rtos_examples/visualization/freertos_segger_sysview">
          <external path="examples/frdmk66f/rtos_examples/visualization/freertos_segger_sysview" type="xml">
            <files mask="freertos_segger_sysview_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_sem">
          <external path="examples/frdmk66f/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_sem_static" name="freertos_sem_static" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_sem_static">
          <external path="examples/frdmk66f/rtos_examples/freertos_sem_static" type="xml">
            <files mask="freertos_sem_static_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_swtimer">
          <external path="examples/frdmk66f/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using GPT module." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_tickless">
          <external path="examples/frdmk66f/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_freertos_uart" name="freertos_uart" brief="The UART example for FreeRTOS demonstrates the possibility to use the UART driver in the RTOS.The example uses single instance of UART IP and writes string into, then reads back chars.After every 4B received, these are sent back on UART." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmk66f/rtos_examples/freertos_uart">
          <external path="examples/frdmk66f/rtos_examples/freertos_uart" type="xml">
            <files mask="freertos_uart_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_combine_pwm" name="ftm_combine_pwm" brief="The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmk66f/driver_examples/ftm/combine_pwm">
          <external path="examples/frdmk66f/driver_examples/ftm/combine_pwm" type="xml">
            <files mask="ftm_combine_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_dual_edge_capture" name="ftm_dual_edge_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmk66f/driver_examples/ftm/dual_edge_capture">
          <external path="examples/frdmk66f/driver_examples/ftm/dual_edge_capture" type="xml">
            <files mask="ftm_dual_edge_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_input_capture" name="ftm_input_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmk66f/driver_examples/ftm/input_capture">
          <external path="examples/frdmk66f/driver_examples/ftm/input_capture" type="xml">
            <files mask="ftm_input_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_output_compare" name="ftm_output_compare" brief="The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmk66f/driver_examples/ftm/output_compare">
          <external path="examples/frdmk66f/driver_examples/ftm/output_compare" type="xml">
            <files mask="ftm_output_compare_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_pdb_adc16" name="ftm_pdb_adc16" brief="The FTM / PDB demo application demonstrates how to use the FTM external trigger to start the ADC conversion using thePDB. FTM0 is configured as a complementary combined mode, and each channel output frequency is 16 KHz. The complementarychannel dead time is 1 µs. The PDB pre-trigger works in back-to-back mode. The ADC0 and ADC1 work in single-end mode.The ADC0 uses channel 1 and channel 5, and ADC1 uses channel 1 and channel 7." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/ftm_pdb_adc16">
          <external path="examples/frdmk66f/demo_apps/ftm_pdb_adc16" type="xml">
            <files mask="ftm_pdb_adc16_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_pdb_adc16_peripheral" name="ftm_pdb_adc16_peripheral" brief="The FTM / PDB demo application demonstrates how to use the FTM external trigger to start the ADC conversion using thePDB. FTM0 is configured as a complementary combined mode, and each channel output frequency is 16 KHz. The complementarychannel dead time is 1 µs. The PDB pre-trigger works in back-to-back mode. The ADC0 and ADC1 work in single-end mode.The ADC0 uses channel 1 and channel 5, and ADC1 uses channel 1 and channel 7.You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/ftm_pdb_adc16_peripheral">
          <external path="examples/frdmk66f/demo_apps/ftm_pdb_adc16_peripheral" type="xml">
            <files mask="ftm_pdb_adc16_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_pwm_twochannel" name="ftm_pwm_twochannel" brief="The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmk66f/driver_examples/ftm/pwm_twochannel">
          <external path="examples/frdmk66f/driver_examples/ftm/pwm_twochannel" type="xml">
            <files mask="ftm_pwm_twochannel_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_quad_decoder" name="ftm_quad_decoder" brief="This demo describes the usage of Quad Decoder feature in FTM module, which can be used to count the position of decoder.An external decoder is used to generate the PHA and PHB's signal. These two signals are feed to the FTM pins with Quad Decoder feature (FTMx_QD_PHA and FTMx_QD_PHB). Then, the counter value and direction would be displayed in terminal window predically." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/ftm_quad_decoder">
          <external path="examples/frdmk66f/demo_apps/ftm_quad_decoder" type="xml">
            <files mask="ftm_quad_decoder_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_quad_decoder_peripheral" name="ftm_quad_decoder_peripheral" brief="This demo describes the usage of Quad Decoder feature in FTM module, which can be used to count the position of decoder.An external decoder is used to generate the PHA and PHB's signal. These two signals are feed to the FTM pins with Quad Decoder feature (FTMx_QD_PHA and FTMx_QD_PHB). Then, the counter value and direction would be displayed in terminal window predically. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/ftm_quad_decoder_peripheral">
          <external path="examples/frdmk66f/demo_apps/ftm_quad_decoder_peripheral" type="xml">
            <files mask="ftm_quad_decoder_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_simple_pwm" name="ftm_simple_pwm" brief="The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmk66f/driver_examples/ftm/simple_pwm">
          <external path="examples/frdmk66f/driver_examples/ftm/simple_pwm" type="xml">
            <files mask="ftm_simple_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmk66f/driver_examples/ftm/timer">
          <external path="examples/frdmk66f/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk66f/driver_examples/gpio/input_interrupt">
          <external path="examples/frdmk66f/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmk66f/driver_examples/gpio/led_output">
          <external path="examples/frdmk66f/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/hello_world">
          <external path="examples/frdmk66f/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_i2c_edma_b2b_transfer_master" name="i2c_edma_b2b_transfer_master" brief="The i2c_edma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with EDMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk66f/driver_examples/i2c/edma_b2b_transfer/master">
          <external path="examples/frdmk66f/driver_examples/i2c/edma_b2b_transfer/master" type="xml">
            <files mask="i2c_edma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_i2c_edma_b2b_transfer_slave" name="i2c_edma_b2b_transfer_slave" brief="The i2c_edma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a EDMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk66f/driver_examples/i2c/edma_b2b_transfer/slave">
          <external path="examples/frdmk66f/driver_examples/i2c/edma_b2b_transfer/slave" type="xml">
            <files mask="i2c_edma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_i2c_interrupt" name="i2c_interrupt" brief="The i2c_functional_interrupt example shows how to use I2C functional driver to build a interrupt based application:In this example , one i2c instance used as I2C master and another i2c instance used as I2C slave .1. I2C master send data to I2C slave in interrupt . (I2C Slave using interrupt to receive the data)2. I2C master read data from I2C slave in interrupt . (I2C Slave using interrupt to send the data)3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk66f/driver_examples/i2c/interrupt">
          <external path="examples/frdmk66f/driver_examples/i2c/interrupt" type="xml">
            <files mask="i2c_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk66f/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="examples/frdmk66f/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk66f/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="examples/frdmk66f/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_i2c_polling_b2b_transfer_master" name="i2c_polling_b2b_transfer_master" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk66f/driver_examples/i2c/polling_b2b_transfer/master">
          <external path="examples/frdmk66f/driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="i2c_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_i2c_polling_b2b_transfer_slave" name="i2c_polling_b2b_transfer_slave" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk66f/driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="examples/frdmk66f/driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="i2c_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_i2c_read_accel_value_transfer" name="i2c_read_accel_value_transfer" brief="The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/frdmk66f/driver_examples/i2c/read_accel_value_transfer">
          <external path="examples/frdmk66f/driver_examples/i2c/read_accel_value_transfer" type="xml">
            <files mask="i2c_read_accel_value_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/led_blinky">
          <external path="examples/frdmk66f/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk66f/driver_examples/lptmr">
          <external path="examples/frdmk66f/driver_examples/lptmr" type="xml">
            <files mask="lptmr_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_lpuart_edma_rb_transfer" name="lpuart_edma_rb_transfer" brief="The lpuart_edma Ring Buffer Example project is to demonstrate usage of the KSDK lpuart driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk66f/driver_examples/lpuart/edma_rb_transfer">
          <external path="examples/frdmk66f/driver_examples/lpuart/edma_rb_transfer" type="xml">
            <files mask="lpuart_edma_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk66f/driver_examples/lpuart/edma_transfer">
          <external path="examples/frdmk66f/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk66f/driver_examples/lpuart/interrupt">
          <external path="examples/frdmk66f/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk66f/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="examples/frdmk66f/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk66f/driver_examples/lpuart/interrupt_transfer">
          <external path="examples/frdmk66f/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmk66f/driver_examples/lpuart/polling">
          <external path="examples/frdmk66f/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_mcg_fei_blpi" name="mcg_fei_blpi" brief="The fei_bpli example shows how to use MCG driver to change from FEI mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEI mode from default reset mode    Change mode FEI -&gt; FBI -&gt; BLPI    Change back BLPE -&gt; FBI -&gt; FEI    Get System clock in FEI mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mcg" path="examples/frdmk66f/driver_examples/mcg/fei_blpi">
          <external path="examples/frdmk66f/driver_examples/mcg/fei_blpi" type="xml">
            <files mask="mcg_fei_blpi_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_mcg_pee_blpe" name="mcg_pee_blpe" brief="The pee_bple example shows how to use MCG driver to change from PEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt; BLPE    Change back BLPE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mcg" path="examples/frdmk66f/driver_examples/mcg/pee_blpe">
          <external path="examples/frdmk66f/driver_examples/mcg/pee_blpe" type="xml">
            <files mask="mcg_pee_blpe_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_mcg_pee_blpi" name="mcg_pee_blpi" brief="The pee_bpli example shows how to use MCG driver to change from PEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt;FBE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FBE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mcg" path="examples/frdmk66f/driver_examples/mcg/pee_blpi">
          <external path="examples/frdmk66f/driver_examples/mcg/pee_blpi" type="xml">
            <files mask="mcg_pee_blpi_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_mmcau" name="mmcau" brief="Memory-Mapped Cryptographic Acceleration Unit (MMCAU)This project is a demonstration program that uses the KSDK software for encryption/decryption sampledata using AES-CBC, DES3-CBC and Hash algorithms MD5, SHA1 and SHA256." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="mmcau_examples" path="examples/frdmk66f/mmcau_examples/mmcau_api">
          <external path="examples/frdmk66f/mmcau_examples/mmcau_api" type="xml">
            <files mask="mmcau_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_pdb_adc16_trigger" name="pdb_adc16_trigger" brief="The pdb_adc16_trigger example shows how to use the PDB to generate a ADC trigger.Based on the basic counter, to use the ADC trigger, just to enable the ADC trigger's &quot;milestone&quot; and set the user-defined value for it.After the PDB counter is triggered to start, when the counter pass the &quot;milestone&quot;, the ADC's Pre-Trigger would begenerated and sent to the ADC module.In this example, the ADC16 is configured with hardware trigger and conversion complete interrupt enabled.Once it gets the trigger from the PDB, the conversion goes, then the ISR would be executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="examples/frdmk66f/driver_examples/pdb/adc16_trigger">
          <external path="examples/frdmk66f/driver_examples/pdb/adc16_trigger" type="xml">
            <files mask="pdb_adc16_trigger_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_pdb_dac_trigger" name="pdb_dac_trigger" brief="The pdb_dac_trigger example shows how to use the PDB to generate a DAC trigger.Based on the basic counter, to use the DAC trigger, just to enable the DAC trigger's &quot;milestone&quot; and set the user-defined value for it.The DAC's &quot;milestone&quot; is called as &quot;interval&quot;. Multiple DAC trigger intervals can be included into one PDB counter's cycle.DAC trigger's counter would reset after the trigger is created and start counting again to the interval value.In this example, the DAC is configured with hardware buffer enabled in normal work mode. Once it gets the trigger from the PDB, the buffer read pointer increases." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="examples/frdmk66f/driver_examples/pdb/dac_trigger">
          <external path="examples/frdmk66f/driver_examples/pdb/dac_trigger" type="xml">
            <files mask="pdb_dac_trigger_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_pdb_delay_interrupt" name="pdb_delay_interrupt" brief="The pdb_delay_interrupt example show how to use the PDB as a general programmable interrupt timer.The PDB is triggered by software, and other external triggers are generated from PDB in this project,so that user can see just a general counter is working with interrupt." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="examples/frdmk66f/driver_examples/pdb/delay_interrupt">
          <external path="examples/frdmk66f/driver_examples/pdb/delay_interrupt" type="xml">
            <files mask="pdb_delay_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="examples/frdmk66f/driver_examples/flash/pflash">
          <external path="examples/frdmk66f/driver_examples/flash/pflash" type="xml">
            <files mask="pflash_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_pit" name="pit" brief="The PIT project is a simple demonstration program of the SDK PIT driver. It sets up the PIThardware block to trigger a periodic interrupt after every 1 second. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk66f/driver_examples/pit">
          <external path="examples/frdmk66f/driver_examples/pit" type="xml">
            <files mask="pit_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/power_manager">
          <external path="examples/frdmk66f/demo_apps/power_manager" type="xml">
            <files mask="power_manager_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/power_mode_switch">
          <external path="examples/frdmk66f/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_rnga_random" name="rnga_random" brief="The RNGA is a digital integrated circuit capable of generating the 32-bit random numbers. The RNGAExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/rnga" path="examples/frdmk66f/driver_examples/rnga/random">
          <external path="examples/frdmk66f/driver_examples/rnga/random" type="xml">
            <files mask="rnga_random_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk66f/driver_examples/rtc">
          <external path="examples/frdmk66f/driver_examples/rtc" type="xml">
            <files mask="rtc_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/rtc_func">
          <external path="examples/frdmk66f/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_rtc_func_peripheral" name="rtc_func_peripheral" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/rtc_func_peripheral">
          <external path="examples/frdmk66f/demo_apps/rtc_func_peripheral" type="xml">
            <files mask="rtc_func_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_sai_edma_record_playback" name="sai_edma_record_playback" brief="The sai_edma_record_playback example shows how to use sai driver with EDMA: In this example, one sai instance record the audio data from input and playbacks the audio data." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sai" path="examples/frdmk66f/driver_examples/sai/edma_record_playback">
          <external path="examples/frdmk66f/driver_examples/sai/edma_record_playback" type="xml">
            <files mask="sai_edma_record_playback_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_sai_edma_transfer" name="sai_edma_transfer" brief="The sai_edma_transfer example shows how to use sai driver with EDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM using EDMA channel." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sai" path="examples/frdmk66f/driver_examples/sai/edma_transfer">
          <external path="examples/frdmk66f/driver_examples/sai/edma_transfer" type="xml">
            <files mask="sai_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_sai_interrupt" name="sai_interrupt" brief="The sai_interrupt example shows how to use sai functional API to implement interrupt playback:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sai" path="examples/frdmk66f/driver_examples/sai/interrupt">
          <external path="examples/frdmk66f/driver_examples/sai/interrupt" type="xml">
            <files mask="sai_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_sai_interrupt_record_playback" name="sai_interrupt_record_playback" brief="The sai_interrupt_record_playback example shows how to use sai driver with record and playback features: In this example, one sai instance record the audio data from input and playbacks the audio data." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sai" path="examples/frdmk66f/driver_examples/sai/interrupt_record_playback">
          <external path="examples/frdmk66f/driver_examples/sai/interrupt_record_playback" type="xml">
            <files mask="sai_interrupt_record_playback_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_sai_interrupt_transfer" name="sai_interrupt_transfer" brief="The sai_interrupt_transfer example shows how to use sai driver with interrupt:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sai" path="examples/frdmk66f/driver_examples/sai/interrupt_transfer">
          <external path="examples/frdmk66f/driver_examples/sai/interrupt_transfer" type="xml">
            <files mask="sai_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_sdcard_freertos" name="sdcard_freertos" brief="The SDCARD FreeRTOS project is a demonstration program that uses the SDK software. It reads/writes/erases the SD card continusly. The purpose of this example is to show how to use SDCARD driver with FreeRTOS in SDK software to access SD card.Note: If DATA3 is used as the card detect PIN, please make sure DATA3 is pull down, no matter internal or external, at the same time, make sure the card can pull DATA3 up, then host can detect card through DATA3.And SDHC do not support detect card through CD by host, card can be detected through DATA3 or GPIO.No matter detect card through host or gpio, make sure the pinmux configuration is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/sdcard_freertos" path="examples/frdmk66f/sdmmc_examples/sdcard_freertos">
          <external path="examples/frdmk66f/sdmmc_examples/sdcard_freertos" type="xml">
            <files mask="sdcard_freertos_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_sdcard_interrupt" name="sdcard_interrupt" brief="The SDCARD Interrupt project is a demonstration program that uses the SDK software. It reads/writes/erases the SD card continusly. The purpose of this example is to show how to use SDCARD driver andshow how to use interrupt based transfer API in SDHC driver in SDK software to access SD card.Note: If DATA3 is used as the card detect PIN, please make sure DATA3 is pull down, no matter internal or external, at the same time, make sure the card can pull DATA3 up, then host can detect card through DATA3.And SDHC do not support detect card through CD by host, card can be detected through DATA3 or GPIO.No matter detect card through host or gpio, make sure the pinmux configuration is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/sdcard_interrupt" path="examples/frdmk66f/sdmmc_examples/sdcard_interrupt">
          <external path="examples/frdmk66f/sdmmc_examples/sdcard_interrupt" type="xml">
            <files mask="sdcard_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_sdcard_polling" name="sdcard_polling" brief="The SDCARD Polling project is a demonstration program that uses the SDK software. It reads/writes/erases the SD card continusly. The purpose of this example is to show how to use SDCARD driver andshow how to use polling based transfer API in SDHC driver in SDK software to access SD card.Note: If DATA3 is used as the card detect PIN, please make sure DATA3 is pull down, no matter internal or external, at the same time, make sure the card can pull DATA3 up, then host can detect card through DATA3.And SDHC do not support detect card through CD by host, card can be detected through DATA3 or GPIO.No matter detect card through host or gpio, make sure the pinmux configuration is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/sdcard_polling" path="examples/frdmk66f/sdmmc_examples/sdcard_polling">
          <external path="examples/frdmk66f/sdmmc_examples/sdcard_polling" type="xml">
            <files mask="sdcard_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmk66f/demo_apps/shell">
          <external path="examples/frdmk66f/demo_apps/shell" type="xml">
            <files mask="shell_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_sysmpu" name="sysmpu" brief="The SYSMPU example defines protected/unprotected memory region for the core access.First, the SYSMPU will capture the hardware information and show it on theterminal. Then, a memory region is configured as the non-writable region. Thebus fault interrupt is enabled to report the memory protection interrupt eventfor this non-writable region. If an operation writes to this region, the busfault interrupt happens. Then the bus fault interrupt handler provides aprevention alert by outputting a message on terminal, then the write rightswill be given to this region for core access. After the write access enabled,the writing to the region becomes successful. When the bus fault happen, thedetails of the error information will be captured and printed on the terminal.This example provides the terminal input control to give the example show for several regions access test. Just press any key to the terminal when theterminal show &quot;Press any key to continue&quot;." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk66f/driver_examples/sysmpu">
          <external path="examples/frdmk66f/driver_examples/sysmpu" type="xml">
            <files mask="sysmpu_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_tpm_combine_pwm" name="tpm_combine_pwm" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk66f/driver_examples/tpm/combine_pwm">
          <external path="examples/frdmk66f/driver_examples/tpm/combine_pwm" type="xml">
            <files mask="tpm_combine_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_tpm_dual_edge_capture" name="tpm_dual_edge_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk66f/driver_examples/tpm/dual_edge_capture">
          <external path="examples/frdmk66f/driver_examples/tpm/dual_edge_capture" type="xml">
            <files mask="tpm_dual_edge_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_tpm_input_capture" name="tpm_input_capture" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk66f/driver_examples/tpm/input_capture">
          <external path="examples/frdmk66f/driver_examples/tpm/input_capture" type="xml">
            <files mask="tpm_input_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_tpm_output_compare" name="tpm_output_compare" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk66f/driver_examples/tpm/output_compare">
          <external path="examples/frdmk66f/driver_examples/tpm/output_compare" type="xml">
            <files mask="tpm_output_compare_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_tpm_pwm_twochannel" name="tpm_pwm_twochannel" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk66f/driver_examples/tpm/pwm_twochannel">
          <external path="examples/frdmk66f/driver_examples/tpm/pwm_twochannel" type="xml">
            <files mask="tpm_pwm_twochannel_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_tpm_simple_pwm" name="tpm_simple_pwm" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk66f/driver_examples/tpm/simple_pwm">
          <external path="examples/frdmk66f/driver_examples/tpm/simple_pwm" type="xml">
            <files mask="tpm_simple_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_tpm_timer" name="tpm_timer" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/frdmk66f/driver_examples/tpm/timer">
          <external path="examples/frdmk66f/driver_examples/tpm/timer" type="xml">
            <files mask="tpm_timer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_uart_edma_rb_transfer" name="uart_edma_rb_transfer" brief="The uart_edma ring buffer example shows how to use uart driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk66f/driver_examples/uart/edma_rb_transfer">
          <external path="examples/frdmk66f/driver_examples/uart/edma_rb_transfer" type="xml">
            <files mask="uart_edma_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_uart_edma_transfer" name="uart_edma_transfer" brief="The uart_edma example shows how to use uart driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk66f/driver_examples/uart/edma_transfer">
          <external path="examples/frdmk66f/driver_examples/uart/edma_transfer" type="xml">
            <files mask="uart_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_uart_interrupt" name="uart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk66f/driver_examples/uart/interrupt">
          <external path="examples/frdmk66f/driver_examples/uart/interrupt" type="xml">
            <files mask="uart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_uart_interrupt_rb_transfer" name="uart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk66f/driver_examples/uart/interrupt_rb_transfer">
          <external path="examples/frdmk66f/driver_examples/uart/interrupt_rb_transfer" type="xml">
            <files mask="uart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_uart_interrupt_transfer" name="uart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk66f/driver_examples/uart/interrupt_transfer">
          <external path="examples/frdmk66f/driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="uart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_uart_polling" name="uart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/frdmk66f/driver_examples/uart/polling">
          <external path="examples/frdmk66f/driver_examples/uart/polling" type="xml">
            <files mask="uart_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_vref_example" name="vref_example" brief="In this example, the adc16 module is initiealized and used to measure the VREF output voltage. So, it cannot use interal VREF as the reference voltage. Then, user should configure the VREF output pin as the ADC16's sample input. When running the project, it will firstly measure the VREF output voltage within the default (factory) trim value. Then, it will measure the VREF output voltage under different trim value." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/vref" path="examples/frdmk66f/driver_examples/vref">
          <external path="examples/frdmk66f/driver_examples/vref" type="xml">
            <files mask="vref_example_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmk66f_wdog" name="wdog" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 10 times of refreshing the watchdog in None-window mode, a timeout reset is generated.We also try to refresh out of window to trigger reset after 10 times of refreshing in Window mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmk66f/driver_examples/wdog">
          <external path="examples/frdmk66f/driver_examples/wdog" type="xml">
            <files mask="wdog_v3_8.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MK66FN2M0xxx18" name="MK66F18" version="1.0.0" full_name="MK66FN2M0xxx18" family="K6x" platform="Kinetis">
      <description>Kinetis K66-180 MHz, Dual High-Speed &amp; Full-speed USBs, 2MB Flash Microcontrollers (MCUs) based on ARM Cortex-M4 Core</description>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MK66FN2M0xxx18" name="core0" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MK66FN2M0xxx18" name="PROGRAM_FLASH" addr="00000000" size="00200000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_UPPER_MK66FN2M0xxx18" name="SRAM_UPPER" addr="20000000" size="00030000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MK66FN2M0xxx18" name="SRAM_LOWER" addr="1fff0000" size="00010000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_RAM_MK66FN2M0xxx18" name="FLEX_RAM" addr="14000000" size="00001000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="2048" ram_size_kb="256"/>
      <package id="MK66FN2M0VMD18" name="MK66FN2M0VMD18"/>
      <package id="MK66FN2M0VLQ18" name="MK66FN2M0VLQ18"/>
      <evaluation_boards>
        <evaluation_board name="frdmk66f"/>
        <evaluation_board name="twrk65f180m"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MK66FN2M0xxx18" name="internal.wiretype" value="SWD*,JTAG"/>
            <params id="internal.has_swo.release.MK66FN2M0xxx18" name="internal.has_swo" value="true"/>
            <params id="internal.connect.script.debug.mcuxpresso.MK66FN2M0xxx18" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MK66FN2M0xxx18">
              <driverBinary path="core/devices/MK66F18/mcuxpresso" type="binary">
                <files mask="FTFE_4K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
    <device id="MK66FX1M0xxx18" name="MK66F18" version="1.0.0" full_name="MK66FX1M0xxx18" family="K6x" platform="Kinetis">
      <description>Kinetis K66-180 MHz, Dual High-Speed &amp; Full-speed USBs, 2MB Flash Microcontrollers (MCUs) based on ARM Cortex-M4 Core</description>
      <metadataSet>
        <metadata key="USB_KHCI_COUNT" value="1"/>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MK66FX1M0xxx18" name="core0" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MK66FX1M0xxx18" name="PROGRAM_FLASH" addr="00000000" size="00100000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_UPPER_MK66FX1M0xxx18" name="SRAM_UPPER" addr="20000000" size="00030000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MK66FX1M0xxx18" name="SRAM_LOWER" addr="1fff0000" size="00010000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_RAM_MK66FX1M0xxx18" name="FLEX_RAM" addr="14000000" size="00001000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_NVM_MK66FX1M0xxx18" name="FLEX_NVM" addr="10000000" size="00040000" type="DFlash" access="RO"/>
      </memory>
      <total_memory flash_size_kb="1024" ram_size_kb="256"/>
      <package id="MK66FX1M0VMD18" name="MK66FX1M0VMD18"/>
      <package id="MK66FX1M0VLQ18" name="MK66FX1M0VLQ18"/>
      <evaluation_boards>
        <evaluation_board name="frdmk66f"/>
        <evaluation_board name="twrk65f180m"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MK66FX1M0xxx18" name="internal.wiretype" value="SWD*,JTAG"/>
            <params id="internal.has_swo.release.MK66FX1M0xxx18" name="internal.has_swo" value="true"/>
            <params id="internal.connect.script.debug.mcuxpresso.MK66FX1M0xxx18" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MK66FX1M0xxx18">
              <driverBinary path="core/devices/MK66F18/mcuxpresso" type="binary">
                <files mask="FTFE_4K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmk66f.MK66F18" name="frdmk66f" brief="Board_project_template frdmk66f" version="1.0.0" full_name="Board_project_template frdmk66f" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/frdmk66f/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.MK66F18"/>
          <component_dependency value="component.uart_adapter.MK66F18"/>
          <component_dependency value="platform.drivers.port.MK66F18"/>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.gpio.MK66F18"/>
          <component_dependency value="platform.drivers.smc.MK66F18"/>
          <component_dependency value="platform.drivers.rtc.MK66F18"/>
          <component_dependency value="device.MK66F18_startup.MK66F18"/>
          <component_dependency value="platform.drivers.i2c.MK66F18"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MK66F18"/>
              <component_dependency value="component.serial_manager.MK66F18"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MK66F18"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.MK66F18" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MK66F18"/>
          <component_dependency value="platform.Include_dsp.MK66F18"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MK66F18" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK66F18" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MK66F18" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MK66F18" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MK66F18" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MK66F18" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MK66F18" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MK66F18" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MK66F18" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MK66F18" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MK66F18" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MK66F18" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK66F18" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MK66F18" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MK66F18" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MK66F18" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.MK66F18" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_common_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm4.MK66F18" name="CMSIS_Include_core_cm4" brief="Cmsis_include_core_cm4" version="5.3.0" full_name="Cmsis_include_core_cm4" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MK66F18"/>
          <component_dependency value="platform.Include_dsp.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_core_cm4_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.MK66F18" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_dsp_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.MK66F18" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.MK66F18.MK66F18" name="MK66F18" brief="Devices_project_template MK66F18" version="1.0.0" full_name="Devices_project_template MK66F18" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MK66F18/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.MK66F18"/>
          <component_dependency value="component.uart_adapter.MK66F18"/>
          <component_dependency value="platform.drivers.port.MK66F18"/>
          <component_dependency value="platform.drivers.gpio.MK66F18"/>
          <component_dependency value="platform.drivers.smc.MK66F18"/>
          <component_dependency value="device.MK66F18_startup.MK66F18"/>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.clock.MK66F18"/>
          <component_dependency value="platform.drivers.rtc.MK66F18"/>
          <component_dependency value="platform.drivers.i2c.MK66F18"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MK66F18"/>
              <component_dependency value="component.serial_manager.MK66F18"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MK66F18"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.MK66F18" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MK66F18/template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MK66F18"/>
          <component_dependency value="platform.drivers.dmamux.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.MK66F18" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.MK66F18" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.timer_manager.MK66F18"/>
          <component_dependency value="component.gpio_adapter.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_cs42888_adapter.MK66F18" name="codecs_cs42888_adapter" brief="Component cs42888 adapter for multi codecs" version="2.2.1" full_name="Component codec_cs42888_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42888_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42888_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_da7212_adapter.MK66F18" name="codecs_da7212_adapter" brief="Component da7212 adapter for multi codecs" version="2.2.0" full_name="Component codec_da7212_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_da7212_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_da7212_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_i2c.MK66F18" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/codec/i2c" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.i2c_adapter.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_codec_i2c_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_sgtl_adapter.MK66F18" name="codecs_sgtl_adapter" brief="Component sgtl5000 adapter for multi codecs" version="2.2.0" full_name="Component codec_sgtl_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_sgtl_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sgtl_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_wm8904_adapter.MK66F18" name="codecs_wm8904_adapter" brief="Component wm8904 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8904_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8904.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8904_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8904_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_wm8960_adapter.MK66F18" name="codecs_wm8960_adapter" brief="Component wm8960 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8960_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8960_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8960_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.MK66F18" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.osa.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.crc_adapter.MK66F18" name="crc_adapter" brief="Component crc_adapter" version="1.0.0" full_name="Component crc_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.crc.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.cs42888_adapter.MK66F18" name="codec_cs42888_adapter" brief="Component cs42888 adapter for single codec" version="2.2.1" full_name="Component cs42888_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/cs42888" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.da7212_adapter.MK66F18" name="codec_da7212_adapter" brief="Component da7212 adapter for single codec" version="2.2.0" full_name="Component da7212_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/da7212" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_da7212_adapter_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.flash_adapter.MK66F18" name="flash_adapter" brief="Component flash_adapter" version="1.0.0" full_name="Component flash_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/internal_flash" project_base_path="component/internal_flash">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.flash.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_flash.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ftm_adapter.MK66F18" name="ftm_adapter" brief="Component ftm_adapter" version="1.0.0" full_name="Component ftm_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.ftm.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ftm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpio_adapter.MK66F18" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.0" full_name="Component gpio_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MK66F18"/>
          <component_dependency value="platform.drivers.port.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.i2c_adapter.MK66F18" name="i2c_adapter" brief="Component i2c_adapter" version="1.0.0" full_name="Component i2c_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.i2c.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_i2c_adapter_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.MK66F18" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.timer_manager.MK66F18"/>
          <component_dependency value="component.gpio_adapter.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.MK66F18" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lists_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.MK66F18" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="utility.debug_console.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.MK66F18" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.log.MK66F18"/>
          <component_dependency value="utility.debug_console.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.MK66F18" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.log.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_adapter.MK66F18" name="lptmr_adapter" brief="Component lptmr_adapter" version="1.0.0" full_name="Component lptmr_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.lptmr.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_adapter.MK66F18" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.lpuart.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.MK66F18" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.lists.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.MK66F18" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.lists.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash.common.MK66F18" name="mflash common" brief="mflash common" version="1.0.0" full_name="statically allocated file system for mflash" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <source relative_path="./" type="c_include">
        <files mask="mflash_common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash.frdmk66f.MK66F18" name="mflash frdmk66f" brief="mflash frdmk66f" version="1.0.0" full_name="mflash frdmk66f" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/flash/mflash/frdmk66f" project_base_path="flash/mflash/frdmk66f">
      <dependencies>
        <all>
          <component_dependency value="component.mflash.common.MK66F18"/>
          <component_dependency value="platform.drivers.flash.MK66F18"/>
          <component_dependency value="platform.drivers.cache_lmem.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="mflash_drv.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="mflash_drv.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash_file.MK66F18" name="mflash file" brief="mflash file" version="1.0.0" full_name="statically allocated file system for mflash" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <dependencies>
        <component_dependency value="component.mflash.frdmk66f.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="mflash_file.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="mflash_file.c"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.MK66F18" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.lists.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MK66F18" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MK66F18" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.MK66F18" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source condition="middleware.freertos-kernel.MK66F18" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_osa_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.MK66F18" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.lists.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_osa_bm_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_free_rtos.MK66F18" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MK66F18"/>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.lists.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_osa_free_rtos_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.MK66F18" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="utility.debug_console.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pit_adapter.MK66F18" name="pit_adapter" brief="Component pit_adapter" version="1.0.0" full_name="Component pit_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.pit.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pit.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_ftm_adapter.MK66F18" name="pwm_ftm_adapter" brief="Component pwm_ftm_adapter" version="1.0.0" full_name="Component pwm_ftm_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.ftm.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_ftm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_tpm_adapter.MK66F18" name="pwm_tpm_adapter" brief="Component pwm_tpm_adapter" version="1.0.0" full_name="Component pwm_tpm_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.tpm.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.rnga_adapter.MK66F18" name="rnga_adapter" brief="Component rnga_adapter" version="1.0.0" full_name="Component rnga_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.rnga.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_rnga.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.MK66F18" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.lists.MK66F18"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MK66F18"/>
            <component_dependency value="component.serial_manager_swo.MK66F18"/>
            <component_dependency value="component.serial_manager_virtual.MK66F18"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_swo.MK66F18" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.serial_manager.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_swo.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_swo.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.MK66F18" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.uart_adapter.MK66F18"/>
          <component_dependency value="component.serial_manager.MK66F18"/>
          <any_of>
            <component_dependency value="platform.drivers.uart.MK66F18"/>
            <component_dependency value="platform.drivers.lpuart.MK66F18"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_uart_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.MK66F18" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MK66F18"/>
          <component_dependency value="platform.drivers.common.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.sgtl_adapter.MK66F18" name="codec_sgtl_adapter" brief="Component sgtl5000 adapter for single codec" version="2.2.0" full_name="Component sgtl_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/sgtl5000" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.MK66F18" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.MK66F18" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.MK66F18" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.lists.MK66F18"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.MK66F18"/>
            <component_dependency value="component.pit_adapter.MK66F18"/>
            <component_dependency value="component.lptmr_adapter.MK66F18"/>
            <component_dependency value="component.ftm_adapter.MK66F18"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.tpm_adapter.MK66F18" name="tpm_adapter" brief="Component tpm_adapter" version="1.0.0" full_name="Component tpm_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.tpm.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.uart_adapter.MK66F18" name="uart_adapter" brief="Component uart_adapter" version="1.0.0" full_name="uart_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.uart.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_uart_adapter_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wm8904_adapter.MK66F18" name="codec_wm8904_adapter" brief="Component wm8904 adapter for single codec" version="2.2.0" full_name="Component wm8904_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/wm8904" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8904.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wm8960_adapter.MK66F18" name="codec_wm8960_adapter" brief="Component wm8960 adapter for single codecs" version="2.2.0" full_name="Component wm8960_adapter" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/wm8960" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.MK66F18"/>
          <component_dependency value="driver.codec.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MK66F18_CMSIS.MK66F18" name="MK66F18_CMSIS" brief="Device MK66F18_cmsis" version="1.0.0" full_name="Device MK66F18_cmsis" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MK66F18" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.Include_core_cm4.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="MK66F18.h"/>
        <files mask="MK66F18_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_MK66F18_CMSIS_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MK66F18_debugger.MK66F18" name="MK66F18_debugger" brief="Device MK66F18_debugger" version="1.0.0" full_name="Device MK66F18_debugger" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="debugger" package_base_path="core/devices/MK66F18" project_base_path="MK66F18">
      <source relative_path="./" type="xml">
        <files mask="MK66F18.xml"/>
      </source>
    </component>
    <component id="platform.devices.MK66F18_linker.MK66F18" name="MK66F18_linker" brief="Device MK66F18_linker" version="1.0.0" full_name="Device MK66F18_linker" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="linker" package_base_path="core/devices/MK66F18" project_base_path="MK66F18">
      <source toolchain="armgcc" relative_path="gcc" type="linker">
        <files mask="MK66FN2M0xxx18_flash.ld"/>
        <files mask="MK66FN2M0xxx18_ram.ld"/>
        <files mask="MK66FX1M0xxx18_flash.ld"/>
        <files mask="MK66FX1M0xxx18_ram.ld"/>
      </source>
    </component>
    <component id="device.MK66F18_startup.MK66F18" name="MK66F18_startup" brief="Device MK66F18_startup" version="1.1.0" full_name="Device MK66F18_startup" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/MK66F18" project_base_path="startup">
      <dependencies>
        <component_dependency value="device.MK66F18_system.MK66F18"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include">
        <files mask="startup_MK66F18.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c">
        <files mask="startup_mk66f18.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp">
        <files mask="startup_mk66f18.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_MK66F18_startup_MK66F18.cmake" hidden="true"/>
      </source>
    </component>
    <component id="device.MK66F18_system.MK66F18" name="MK66F18_system" brief="Device MK66F18_system" version="1.0.0" full_name="Device MK66F18_system" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MK66F18" project_base_path="device">
      <dependencies>
        <component_dependency value="device.MK66F18_CMSIS.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_MK66F18.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_MK66F18.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_MK66F18_system_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.MK66F18.MK66F18" name="MK66F18" brief="Docs mk66f18" version="1.0.0" full_name="Docs mk66f18" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for FRDM-K66F.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.MK66F18" name="adc" brief="ADC16 Driver" version="2.2.0" full_name="ADC16 Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/adc16" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_adc16_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cache_lmem.MK66F18" name="cache_lmem" brief="CACHE LMEM Driver" version="2.0.5" full_name="CACHE LMEM Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/cache/lmem" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_cache_lmem_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.MK66F18" name="clock" brief="Clock Driver" version="2.5.2" full_name="Clock Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/devices/MK66F18/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_clock_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cmp.MK66F18" name="cmp" brief="CMP Driver" version="2.0.2" full_name="CMP Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/cmp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_cmp_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cmt.MK66F18" name="cmt" brief="CMT Driver" version="2.0.3" full_name="CMT Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/cmt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cmt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cmt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_cmt_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.codec.MK66F18" name="codec" brief="Driver codec" version="2.2.1" full_name="Driver codec" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <any_of>
            <component_dependency value="component.wm8904_adapter.MK66F18"/>
            <component_dependency value="component.codec_cs42888_adapter.MK66F18"/>
            <component_dependency value="component.codec_da7212_adapter.MK66F18"/>
            <component_dependency value="component.codec_sgtl_adapter.MK66F18"/>
            <component_dependency value="component.codec_wm8960_adapter.MK66F18"/>
            <component_dependency value="component.codec_wm8904_adapter.MK66F18"/>
            <component_dependency value="component.cs42888_adapter.MK66F18"/>
            <component_dependency value="component.da7212_adapter.MK66F18"/>
            <component_dependency value="component.sgtl_adapter.MK66F18"/>
            <component_dependency value="component.wm8960_adapter.MK66F18"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_codec_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.MK66F18" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MK66F18"/>
          <component_dependency value="device.MK66F18_CMSIS.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_common_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.crc.MK66F18" name="crc" brief="CRC Driver" version="2.0.3" full_name="CRC Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/crc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_crc_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.cs42888.MK66F18" name="cs42888" brief="Driver cs42888" version="2.1.2" full_name="Driver cs42888" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/codec/cs42888" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.codec_i2c.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42888.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42888.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dac.MK66F18" name="dac" brief="DAC Driver" version="2.0.2" full_name="DAC Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/dac" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dac_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dialog7212.MK66F18" name="dialog7212" brief="Driver dialog7212" version="2.2.2" full_name="Driver dialog7212" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/codec/da7212" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.codec_i2c.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dialog7212.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dialog7212.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dialog7212_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmamux.MK66F18" name="dmamux" brief="DMAMUX Driver" version="2.0.5" full_name="DMAMUX Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/dmamux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dmamux_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dspi.MK66F18" name="dspi" brief="DSPI Driver" version="2.2.4" full_name="DSPI Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/dspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dspi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dspi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dspi_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dspi_edma.MK66F18" name="dspi_edma" brief="DSPI Driver" version="2.2.4" full_name="DSPI_EDMA Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/dspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dspi.MK66F18"/>
          <component_dependency value="platform.drivers.edma.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dspi_edma_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dspi_freertos.MK66F18" name="dspi_freertos" brief="DSPI Driver" version="2.2.4" full_name="DSPI Freertos Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/dspi" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dspi.MK66F18"/>
          <component_dependency value="middleware.freertos-kernel.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dspi_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dspi_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dspi_freertos_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.edma.MK66F18" name="edma" brief="EDMA Driver" version="2.4.1" full_name="EDMA Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/edma" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="platform.drivers.dmamux.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_edma_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.enet.MK66F18" name="enet" brief="ENET Driver" version="2.3.4" full_name="ENET Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/enet" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_enet.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_enet.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_enet_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ewm.MK66F18" name="ewm" brief="EWM Driver" version="2.0.3" full_name="EWM Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/ewm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ewm_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flash.MK66F18" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/flash" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flash_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexbus.MK66F18" name="flexbus" brief="FLEXBUS Driver" version="2.1.1" full_name="FLEXBUS Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/flexbus" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexbus.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexbus.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcan.MK66F18" name="flexcan" brief="FLEXCAN Driver" version="2.6.0" full_name="FLEXCAN Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/flexcan" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexcan.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexcan.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcan_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ftm.MK66F18" name="ftm" brief="FTM Driver" version="2.3.0" full_name="FTM Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/ftm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ftm_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.fxos8700cq.MK66F18" name="fxos8700cq" brief="Driver fxos8700cq" version="1.0.0" full_name="Driver fxos8700cq" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="board_component" package_base_path="core/components/fxos8700cq" project_base_path="accel">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_fxos8700cq_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpio.MK66F18" name="gpio" brief="GPIO Driver" version="2.5.1" full_name="GPIO Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_gpio_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i2c.MK66F18" name="i2c" brief="I2C Driver" version="2.0.9" full_name="I2C Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/i2c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_i2c_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i2c_edma.MK66F18" name="i2c_edma" brief="I2C Driver" version="2.0.9" full_name="I2C EDMA Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/i2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c.MK66F18"/>
          <component_dependency value="platform.drivers.edma.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_i2c_edma_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i2c_freertos.MK66F18" name="i2c_freertos" brief="I2C Driver" version="2.0.9" full_name="I2C FREERTOS Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/i2c" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c.MK66F18"/>
          <component_dependency value="middleware.freertos-kernel.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_i2c_freertos_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.llwu.MK66F18" name="llwu" brief="LLWU Driver" version="2.0.5" full_name="LLWU Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/llwu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_llwu_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lmem.MK66F18" name="lmem" brief="LMEM Driver" version="2.1.2" full_name="LMEM Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/lmem" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lmem_cache.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lmem_cache.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lptmr.MK66F18" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/lptmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lptmr_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart.MK66F18" name="lpuart" brief="LPUART Driver" version="2.4.1" full_name="LPUART Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_edma.MK66F18" name="lpuart_edma" brief="LPUART Driver" version="2.4.0" full_name="LPUART Edma Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MK66F18"/>
          <component_dependency value="platform.drivers.lpuart.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_edma_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_freertos.MK66F18" name="lpuart_freertos" brief="LPUART Driver" version="2.4.0" full_name="LPUART Freertos Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MK66F18"/>
          <component_dependency value="middleware.freertos-kernel.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_freertos_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.mdio-common.MK66F18" name="mdio-common" brief="Driver mdio-common" version="2.0.0" full_name="Driver mdio-common" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="board_component" package_base_path="core/components/phy" project_base_path="mdio">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mdio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mdio-common_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.mdio-enet.MK66F18" name="mdio-enet" brief="Driver mdio-enet" version="2.0.0" full_name="Driver mdio-enet" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="board_component" package_base_path="core/components/phy/mdio/enet" project_base_path="mdio">
      <dependencies>
        <all>
          <component_dependency value="driver.mdio-common.MK66F18"/>
          <component_dependency value="platform.drivers.enet.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_enet_mdio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_enet_mdio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mdio-enet_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pdb.MK66F18" name="pdb" brief="PDB Driver" version="2.0.4" full_name="PDB Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/pdb" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_pdb.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pdb.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pdb_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.phy-common.MK66F18" name="phy-common" brief="Driver phy-common" version="2.0.0" full_name="Driver phy-common" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/phy" project_base_path="phy">
      <dependencies>
        <component_dependency value="driver.mdio-common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phy.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_phy-common_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.phy-device-ksz8081.MK66F18" name="phy-device-ksz8081" brief="Driver phy-device-ksz8081" version="2.0.0" full_name="Driver phy-device-ksz8081" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="board_component" package_base_path="core/components/phy/device/phyksz8081" project_base_path="phy">
      <dependencies>
        <component_dependency value="driver.phy-common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyksz8081.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_phyksz8081.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_phy-device-ksz8081_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pit.MK66F18" name="pit" brief="PIT Driver" version="2.0.4" full_name="PIT Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/pit" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_pit.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pit.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pit_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pmc.MK66F18" name="pmc" brief="PMC Driver" version="2.0.3" full_name="PMC Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/pmc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pmc_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.port.MK66F18" name="port" brief="PORT Driver" version="2.1.1" full_name="PORT Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/port" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_port_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rcm.MK66F18" name="rcm" brief="RCM Driver" version="2.0.4" full_name="RCM Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/rcm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rcm_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rnga.MK66F18" name="rnga" brief="RNGA Driver" version="2.0.2" full_name="RNGA Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/rnga" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rnga.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rnga.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rnga_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rtc.MK66F18" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/rtc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rtc_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai.MK66F18" name="sai" brief="SAI Driver" version="2.3.2" full_name="SAI Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/sai" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sai_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai_edma.MK66F18" name="sai_edma" brief="SAI EDMA Driver" version="2.3.1" full_name="SAI EDMA Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/sai" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MK66F18"/>
          <component_dependency value="platform.drivers.sai.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sai_edma_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sdhc.MK66F18" name="sdhc" brief="SDHC Driver" version="2.1.12" full_name="SDHC Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/sdhc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sdhc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sdhc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sdhc_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sdramc.MK66F18" name="sdramc" brief="SDRAMC Driver" version="2.1.1" full_name="SDRAMC Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/sdramc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sdramc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sdramc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.sgtl5000.MK66F18" name="sgtl5000" brief="Driver sgtl5000" version="2.1.1" full_name="Driver sgtl5000" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/codec/sgtl5000" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.codec_i2c.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sgtl5000.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sgtl5000.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sim.MK66F18" name="sim" brief="SIM Driver" version="2.1.2" full_name="SIM Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/sim" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sim_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.smc.MK66F18" name="smc" brief="SMC Driver" version="2.0.7" full_name="SMC Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/smc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_smc_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sysmpu.MK66F18" name="sysmpu" brief="SYSMPU Driver" version="2.2.3" full_name="SYSMPU Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/sysmpu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sysmpu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sysmpu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sysmpu_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tpm.MK66F18" name="tpm" brief="TPM Driver" version="2.0.7" full_name="TPM Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/tpm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_tpm_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tsi_v4.MK66F18" name="tsi_v4" brief="TSI Driver" version="2.1.3" full_name="TSI Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/tsi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tsi_v4.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_tsi_v4.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.uart.MK66F18" name="uart" brief="UART Driver" version="2.4.0" full_name="UART Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/uart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_uart_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.uart_edma.MK66F18" name="uart_edma" brief="UART Driver" version="2.4.0" full_name="UART EDMA Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/uart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.MK66F18"/>
          <component_dependency value="platform.drivers.edma.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_uart_edma_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.uart_freertos.MK66F18" name="uart_freertos" brief="UART Driver" version="2.4.0" full_name="UART FREERTOS Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/uart" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.MK66F18"/>
          <component_dependency value="middleware.freertos-kernel.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_uart_freertos_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.vref.MK66F18" name="vref" brief="VREF Driver" version="2.1.2" full_name="VREF Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/vref" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_vref.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_vref.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_vref_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wdog.MK66F18" name="wdog" brief="WDOG Driver" version="2.0.1" full_name="WDOG Driver" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="driver" package_base_path="core/drivers/wdog" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wdog.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wdog.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wdog_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8904.MK66F18" name="wm8904" brief="Driver wm8904" version="2.4.3" full_name="Driver wm8904" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/codec/wm8904" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.codec_i2c.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8904.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8904.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8960.MK66F18" name="wm8960" brief="Driver wm8960" version="2.1.3" full_name="Driver wm8960" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="software_component" package_base_path="core/components/codec/wm8960" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MK66F18"/>
          <component_dependency value="component.codec_i2c.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8960.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8960.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.MK66F18" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_baremetal_MK66F18.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.MK66F18" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="202007.00.0" full_name="FreeRTOS kernel" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.extension.MK66F18"/>
          <component_dependency value="middleware.freertos-kernel.template.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="event_groups.c"/>
        <files mask="croutine.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="croutine.h"/>
        <files mask="StackMacros.h"/>
        <files mask="atomic.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM4F" type="src" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18">
        <files mask="port.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM4F" type="c_include" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="portable/GCC/ARM_CM4F" toolchain="armgcc mcuxpresso" type="c_include" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.armv8m.MK66F18" name="FreeRTOS port ARMv8M" brief="FreeRTOS port ARMv8M" version="202007.00.0" full_name="FreeRTOS port ARMv8M" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MK66F18"/>
      </dependencies>
      <source relative_path="portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/context" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/heap" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/init" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/macros" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.extension.MK66F18" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="202007.00.0" full_name="FreeRTOS NXP extension" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_extension_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.MK66F18" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="202007.00.0" full_name="FreeRTOS heap 1" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MK66F18"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.MK66F18" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="202007.00.0" full_name="FreeRTOS heap 2" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MK66F18"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.MK66F18" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="202007.00.0" full_name="FreeRTOS heap_3" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MK66F18"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.MK66F18" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="202007.00.0" full_name="FreeRTOS heap 4" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MK66F18"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_heap_4_MK66F18.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.MK66F18" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="202007.00.0" full_name="FreeRTOS heap 5" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MK66F18"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_newlib.MK66F18" name="FreeRTOS heap newlib" brief="FreeRTOS heap newlib" version="202007.00.0" full_name="FreeRTOS heap newlib" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MK66F18"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_useNewlib.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.MK66F18" name="FreeRTOS MPU wrappers" brief="FreeRTOS MPU wrappers" version="202007.00.0" full_name="FreeRTOS MPU wrappers" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MK66F18"/>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.template.MK66F18" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="202007.00.0" full_name="FreeRTOS configuration template" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel" user_visible="false" type="project_template" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="template/ARM_CM4F" type="c_include" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source exclude="true" relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
        <files mask="heap_useNewlib.c"/>
      </source>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <include_paths>
        <include_path relative_path="template/ARM_CM4F" type="c_include" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.unused.MK66F18" name="FreeRTOS unused" brief="FreeRTOS unused" version="202007.00.0" full_name="FreeRTOS unused" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="./" type="doc">
        <files mask="History.txt"/>
        <files mask="readme.txt"/>
      </source>
      <source relative_path="./" type="other">
        <files mask="Quick_Start_Guide.url"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source relative_path="License" type="doc">
        <files mask="license.txt"/>
      </source>
      <source relative_path="portable/ARMClang" type="doc">
        <files mask="Use-the-GCC-ports.txt"/>
      </source>
    </component>
    <component id="middleware.mmcau.cm4_cm7.MK66F18" name="mmcau_cm4_cm7" brief="MMCAU library for ARM Cortex M4/M7 core" version="2.0.1" full_name="Kinetis MMCAU security function library for Arm Cortex-M4 and Cortex-M7" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Security/MMCAU library" user_visible="true" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <dependencies>
        <all>
          <component_dependency value="middleware.mmcau.common_files.MK66F18"/>
          <component_dependency value="platform.drivers.clock.MK66F18"/>
          <component_dependency value="platform.drivers.common.MK66F18"/>
        </all>
      </dependencies>
      <source toolchain="armgcc mcuxpresso" relative_path="asm-cm4-cm7" type="lib">
        <files mask="lib_mmcau.a"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_mmcau_cm4_cm7_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mmcau.common_files.MK66F18" name="mmcau" brief="MMCAU common library source files" version="2.0.1" full_name="Kinetis MMCAU common source files" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Security/MMCAU library" user_visible="true" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="cau_api.h"/>
        <files mask="fsl_mmcau.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mmcau.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_mmcau_common_files_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mmcau.mmcau_files.MK66F18" name="mmcau" brief="MMCAU security function library source files" version="2.0.1" full_name="Kinetis MMCAU security function library source files" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Security/MMCAU library" user_visible="false" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <source relative_path="./" type="doc">
        <files mask="README.txt"/>
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source relative_path="asm-cm4-cm7/src" type="other" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18">
        <files mask="cau2_defines.hdr"/>
      </source>
      <source relative_path="asm-cm4-cm7/src" type="asm_include" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18">
        <files mask="mmcau_sha1_functions.s"/>
        <files mask="mmcau_md5_functions.s"/>
        <files mask="mmcau_sha256_functions.s"/>
        <files mask="mmcau_aes_functions.s"/>
        <files mask="mmcau_des_functions.s"/>
      </source>
    </component>
    <component id="middleware.mmcau.unused_files.MK66F18" name="unused_files" brief="MMCAU files unused by projects" version="2.0.1" full_name="MMCAU library unused files" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="false" type="other" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <source exclude="true" relative_path="doxygen" type="other">
        <files mask="fsl_mmcau.dox" hidden="true"/>
      </source>
    </component>
    <component id="middleware.sdmmc.common.MK66F18" name="sdmmc_common" brief="Middleware sdmmc common" version="2.3.0" full_name="SDMMC common stack" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="false" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <source relative_path="common" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdmmc_spec.h"/>
        <files mask="fsl_sdmmc_common.h"/>
      </source>
      <source relative_path="common" project_relative_path="src" type="src">
        <files mask="fsl_sdmmc_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_common_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="common" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.sdhc.MK66F18" name="sdmmc_host_sdhc" brief="Middleware sdmmc host sdhc" version="2.3.1" full_name="Middleware sdmmc host sdhc" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <any_of>
          <component_dependency value="middleware.sdmmc.host.sdhc.interrupt.MK66F18"/>
          <component_dependency value="middleware.sdmmc.host.sdhc.polling.MK66F18"/>
          <component_dependency value="middleware.sdmmc.host.sdhc.freertos.MK66F18"/>
        </any_of>
      </dependencies>
      <source relative_path="host/sdhc" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/sdhc" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_host_sdhc_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/sdhc" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.sdhc.freertos.MK66F18" name="sdmmc_host_sdhc_freertos" brief="Middleware sdmmc host sdhc freertos" version="2.3.1" full_name="Middleware sdmmc host sdhc freertos" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK66F18"/>
          <component_dependency value="middleware.sdmmc.osa.freertos.MK66F18"/>
          <component_dependency value="platform.drivers.sdhc.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="host/sdhc/non_blocking" project_relative_path="host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source relative_path="host/sdhc" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/sdhc" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_host_sdhc_freertos_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/sdhc" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.sdhc.interrupt.MK66F18" name="sdmmc_host_sdhc_inetrrupt" brief="Middleware sdmmc host sdhc interrupt" version="2.3.1" full_name="Middleware sdmmc host sdhc interrupt" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK66F18"/>
          <component_dependency value="middleware.sdmmc.osa.bm.MK66F18"/>
          <component_dependency value="platform.drivers.sdhc.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="host/sdhc/non_blocking" project_relative_path="host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source relative_path="host/sdhc" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/sdhc" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_host_sdhc_interrupt_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/sdhc" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.sdhc.polling.MK66F18" name="sdmmc_host_sdhc_polling" brief="Middleware sdmmc host sdhc polling" version="2.3.1" full_name="Middleware sdmmc host sdhc polling" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK66F18"/>
          <component_dependency value="middleware.sdmmc.osa.bm.MK66F18"/>
          <component_dependency value="platform.drivers.sdhc.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="host/sdhc/blocking" project_relative_path="host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source relative_path="host/sdhc" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/sdhc" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_host_sdhc_polling_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/sdhc" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.mmc.MK66F18" name="mmc" brief="Middleware sdmmc mmc" version="2.4.1" full_name="SDMMC mmc stack" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK66F18"/>
          <component_dependency value="middleware.sdmmc.host.sdhc.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="mmc" project_relative_path="src" type="src">
        <files mask="fsl_mmc.c"/>
      </source>
      <source relative_path="mmc" project_relative_path="inc" type="c_include">
        <files mask="fsl_mmc.h"/>
      </source>
      <source relative_path="mmc" project_relative_path="./mmc" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="mmc" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.osa.bm.MK66F18" name="sdmmc_osa_bm" brief="Middleware sdmmc osa_bm" version="2.3.0" full_name="SDMMC common stack" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <component_dependency value="component.osa_bm.MK66F18"/>
      </dependencies>
      <source relative_path="osa" type="c_include">
        <files mask="fsl_sdmmc_osa.h"/>
      </source>
      <source relative_path="osa" type="src">
        <files mask="fsl_sdmmc_osa.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_osa_bm_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="osa" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.osa.freertos.MK66F18" name="sdmmc_osa_freertos" brief="Middleware sdmmc osa_freertos" version="2.3.0" full_name="SDMMC common stack" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <component_dependency value="component.osa_free_rtos.MK66F18"/>
      </dependencies>
      <source relative_path="osa" type="c_include">
        <files mask="fsl_sdmmc_osa.h"/>
      </source>
      <source relative_path="osa" type="src">
        <files mask="fsl_sdmmc_osa.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_osa_freertos_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="osa" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sd.MK66F18" name="sd" brief="Middleware sdmmc sd" version="2.3.3" full_name="SDMMC sd stack" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK66F18"/>
          <component_dependency value="middleware.sdmmc.host.sdhc.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="sd" project_relative_path="src" type="src">
        <files mask="fsl_sd.c"/>
      </source>
      <source relative_path="sd" project_relative_path="inc" type="c_include">
        <files mask="fsl_sd.h"/>
      </source>
      <source relative_path="sd" project_relative_path="./sd" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_sd_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="sd" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sdio.MK66F18" name="sdio" brief="Middleware sdmmc sdio" version="2.3.2" full_name="SDMMC sdio stack" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.MK66F18"/>
          <component_dependency value="middleware.sdmmc.host.sdhc.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="sdio" project_relative_path="src" type="src">
        <files mask="fsl_sdio.c"/>
      </source>
      <source relative_path="sdio" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdio.h"/>
      </source>
      <source relative_path="sdio" project_relative_path="./sdio" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="sdio" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sdspi.MK66F18" name="sdspi" brief="Middleware sdmmc sdspi" version="2.2.1" full_name="SDMMC sdspi stack" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <component_dependency value="platform.drivers.dspi.MK66F18"/>
      </dependencies>
      <source relative_path="sdspi" project_relative_path="src" type="src">
        <files mask="fsl_sdspi.c"/>
      </source>
      <source relative_path="sdspi" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdspi.h"/>
      </source>
      <source relative_path="common" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdmmc_spec.h"/>
      </source>
      <source relative_path="sdspi" project_relative_path="./" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="sdspi" project_relative_path="inc" type="c_include"/>
        <include_path relative_path="common" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.common_header.MK66F18" name="USB Common Header" brief="Middleware usb common_header" version="2.7.0" full_name="USB Common Header" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="USB/USB Common Header" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <component_dependency value="component.osa.MK66F18"/>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_usb_common_header_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.common_header.MK66F18" name="USB Device Common Header" brief="Middleware usb device common_header" version="2.7.0" full_name="USB Device Common Header" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.MK66F18"/>
          <component_dependency value="middleware.usb.common_header.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="device" project_relative_path="device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source relative_path="device" project_relative_path="device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_usb_device_common_header_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="device" project_relative_path="device/include" type="c_include"/>
        <include_path relative_path="device" project_relative_path="device/source" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.MK66F18" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utilities_misc_utilities_MK66F18.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MK66F18" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_MK66F18.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.MK66F18" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_lite_MK66F18.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.MK66F18" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MK66F18"/>
          <component_dependency value="platform.drivers.common.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.MK66F18" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.uart_adapter.MK66F18"/>
          <component_dependency value="platform.drivers.common.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_lite_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.notifier.MK66F18" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/devices/MK66F18/utilities" project_base_path="utilities/utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MK66F18"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_notifier_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.MK66F18" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="MK66FN2M0xxx18 MK66FX1M0xxx18" device_cores="core0_MK66FN2M0xxx18 core0_MK66FX1M0xxx18" user_visible="true" type="utilities" package_base_path="core/devices/MK66F18/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MK66F18"/>
          <component_dependency value="component.lists.MK66F18"/>
          <component_dependency value="platform.drivers.common.MK66F18"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_shell_MK66F18.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
