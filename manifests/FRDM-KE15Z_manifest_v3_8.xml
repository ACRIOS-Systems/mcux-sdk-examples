<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_SUPER" name="SDKVersion 2.9.0 SuperSet" brief="This is SDK version 2.9.0 manifest file." format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-06-22 08:56:32.455253-->
  <!--This manifest is generated based on sdk repo commit: 242d157ba29afc4bbd1dac95f382a1491bc2daf5-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="frdmke15z" name="FRDM-KE15Z" href="https://www.nxp.com/pip/FRDM-KE15Z" version="1.0.0" package="MKE15Z256VLL7">
      <description>Freedom Development Board for Kinetis KE14 and KE15 MCUs</description>
      <image path="core/boards/frdmke15z" type="image">
        <files mask="frdmke15z.png"/>
      </image>
      <examples>
        <example id="frdmke15z_acmp_interrupt" name="acmp_interrupt" brief="The ACMP Interrupt project is a simple demonstration program that uses the SDK software. Itcompares the selected analog input with ACMP internal DAC output continuously and toggle the LEDwhen the final comparison result changed. The purpose of this demo is to show how to use theACMP driver in SDK software by interrupt way. The ACMP can be configured based on defaultconfiguration returned by the API ACMP_GetDefaultConfig(). The default configuration is: highspeed is not enabled, invert output is not enabled, unfiltered output is not enabled, pin outis not enabled, offset level is level 0, hysteresis level is level 0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/frdmke15z/driver_examples/acmp/interrupt">
          <external path="examples/frdmke15z/driver_examples/acmp/interrupt" type="xml">
            <files mask="acmp_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_acmp_polling" name="acmp_polling" brief="The ACMP Polling project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and toggle the LED when thefinal comparison result changed. The purpose of this demo is to show how to use the ACMP driverin SDK software by polling way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/frdmke15z/driver_examples/acmp/polling">
          <external path="examples/frdmke15z/driver_examples/acmp/polling" type="xml">
            <files mask="acmp_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_acmp_round_robin" name="acmp_round_robin" brief="The ACMP Round-Robin project is a simple demonstration program that uses the SDK software. Usermust set the round-robin mode trigger in specific board properly according to the board resourcebefore running the example. When the example running, it sets positive port as fixed channel andinternal DAC output as comparison reference in positive port and sets the channels input by useras round-robin checker channel. The example will enter stop mode and wait user to change the voltageof round-robin checker channel. It will exit stop mode after the voltage of round-robin checkerchannel changed by user." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/acmp" path="examples/frdmke15z/driver_examples/acmp/round_robin">
          <external path="examples/frdmke15z/driver_examples/acmp/round_robin" type="xml">
            <files mask="acmp_round_robin_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_adc12_continuous_edma" name="adc12_continuous_edma" brief="The ADC12 continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a continuous mode. TheADC12 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC12 continues to do conversions on the same SCn register that initiated the conversion. EDMA request will be asserted during an ADC12 conversion complete event noted when any of the SC1n[COCO] flags is asserted. EDMA will transferADC12 results to memory and if users press any key, demo will average ADC12 results stored in memory and print average on the terminal.  " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="examples/frdmke15z/driver_examples/adc12/continuous_edma">
          <external path="examples/frdmke15z/driver_examples/adc12/continuous_edma" type="xml">
            <files mask="adc12_continuous_edma_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_adc12_interrupt" name="adc12_interrupt" brief="The adc12_interrupt example shows how to use interrupt with ADC12 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC12's sample input.When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value.Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC12 interrupt configuration is set when configuring the ADC12's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing a conversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="examples/frdmke15z/driver_examples/adc12/interrupt">
          <external path="examples/frdmke15z/driver_examples/adc12/interrupt" type="xml">
            <files mask="adc12_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_adc12_low_power" name="adc12_low_power" brief="The ADC Low Power Demo project is a demonstration program that uses the KSDK software. Themicrocontroller is set to a very low power stop (VLPS) mode, and every 500 ms an interrupt wakes upthe ADC module and takes the current temperature sensor value of the microcontroller. While the temperature remains within boundaries, both LEDs are on. If the temperature is higher or lower thanaverage, a led comes off. This demo provides an example to show how ADC works during a VLPS mode anda simple debugging." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/adc12_low_power">
          <external path="examples/frdmke15z/demo_apps/adc12_low_power" type="xml">
            <files mask="adc12_low_power_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_adc12_low_power_peripheral" name="adc12_low_power_peripheral" brief="The ADC Low Power Demo project is a demonstration program that uses the KSDK software. Themicrocontroller is set to a very low power stop (VLPS) mode, and every 500 ms an interrupt wakes upthe ADC module and takes the current temperature sensor value of the microcontroller. While the temperature remains within boundaries, both LEDs are on. If the temperature is higher or lower thanaverage, a led comes off. This demo provides an example to show how ADC works during a VLPS mode anda simple debugging." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/adc12_low_power_peripheral">
          <external path="examples/frdmke15z/demo_apps/adc12_low_power_peripheral" type="xml">
            <files mask="adc12_low_power_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_adc12_lpit_trgmux" name="adc12_lpit_trgmux" brief="The adc12_lpit_trgmux example shows how to use the LPIT and TRGMUX to generate a ADC trigger.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC12'ssample input. When run the example, the ADC is triggered by TRGMUX and gets the ADC conversion result in the ADCConversion Complete (COCO) Interrupt. The LPIT is configured as periodic counter which will output pre-trigger andtigger signal to TRGMUX periodically." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="examples/frdmke15z/driver_examples/adc12/lpit_trgmux">
          <external path="examples/frdmke15z/driver_examples/adc12/lpit_trgmux" type="xml">
            <files mask="adc12_lpit_trgmux_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_adc12_polling" name="adc12_polling" brief="The adc12_polling example shows the simplest way to use ADC12 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC12's sample input.When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can change theconfiguration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improve theADC12's performance." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc12" path="examples/frdmke15z/driver_examples/adc12/polling">
          <external path="examples/frdmke15z/driver_examples/adc12/polling" type="xml">
            <files mask="adc12_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_bubble_peripheral" name="bubble_peripheral" brief="The bubble level demo demonstrates basic usage of the on-board accelerometer to implement a bubble level. A bubble level utilizes two axes to visually show deviation from a level plane (0 degrees) on a given axis. You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/bubble_peripheral">
          <external path="examples/frdmke15z/demo_apps/bubble_peripheral" type="xml">
            <files mask="bubble_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmke15z/driver_examples/crc">
          <external path="examples/frdmke15z/driver_examples/crc" type="xml">
            <files mask="crc_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ecompass_peripheral" name="ecompass_peripheral" brief="The E-Compass demo application demonstrates the use of the FXOS8700 sensor. The tilt-compensated algorithm calculatesall three angles (pitch, roll, and yaw or compass heading). You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/ecompass_peripheral">
          <external path="examples/frdmke15z/demo_apps/ecompass_peripheral" type="xml">
            <files mask="ecompass_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_edma_channel_link" name="edma_channel_link" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmke15z/driver_examples/edma/channel_link">
          <external path="examples/frdmke15z/driver_examples/edma/channel_link" type="xml">
            <files mask="edma_channel_link_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_edma_interleave_transfer" name="edma_interleave_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmke15z/driver_examples/edma/interleave_transfer">
          <external path="examples/frdmke15z/driver_examples/edma/interleave_transfer" type="xml">
            <files mask="edma_interleave_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmke15z/driver_examples/edma/memory_to_memory">
          <external path="examples/frdmke15z/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_edma_ping_pong_transfer" name="edma_ping_pong_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmke15z/driver_examples/edma/ping_pong_transfer">
          <external path="examples/frdmke15z/driver_examples/edma/ping_pong_transfer" type="xml">
            <files mask="edma_ping_pong_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmke15z/driver_examples/edma/scatter_gather">
          <external path="examples/frdmke15z/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_edma_wrap_transfer" name="edma_wrap_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/frdmke15z/driver_examples/edma/wrap_transfer">
          <external path="examples/frdmke15z/driver_examples/edma/wrap_transfer" type="xml">
            <files mask="edma_wrap_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ewm" name="ewm" brief="The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmke15z/driver_examples/ewm">
          <external path="examples/frdmke15z/driver_examples/ewm" type="xml">
            <files mask="ewm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_i2c_interrupt_lpi2c_transfer" name="flexio_i2c_interrupt_lpi2c_transfer" brief="The flexio_lpi2c_interrupt example shows how to use flexio i2c master  driver in interrupt way:In this example, a flexio simulated i2c master connect to a LPI2C slave" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/i2c/interrupt_lpi2c_transfer">
          <external path="examples/frdmke15z/driver_examples/flexio/i2c/interrupt_lpi2c_transfer" type="xml">
            <files mask="flexio_i2c_interrupt_lpi2c_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_i2c_read_accel_value_transfer" name="flexio_i2c_read_accel_value_transfer" brief="The flexio_i2c_read_accel_value example shows how to use FLEXIO I2C  Master driver to communicate with an i2c device: 1. How to use the flexio i2c master driver to read a i2c device who_am_I register. 2. How to use the flexio i2c master driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/i2c/read_accel_value_transfer">
          <external path="examples/frdmke15z/driver_examples/flexio/i2c/read_accel_value_transfer" type="xml">
            <files mask="flexio_i2c_read_accel_value_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_pwm" name="flexio_pwm" brief="This demo describes how to use SDK drivers to implement the PWM feature by FLEXIO IP module. It outputs the PWM singal with fixed frequency defined by &quot;DEMO_FLEXIO_FREQUENCY&quot; in source code and dynamic duty from 99 to 1 to one of the FLEXIO pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/pwm">
          <external path="examples/frdmke15z/driver_examples/flexio/pwm" type="xml">
            <files mask="flexio_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_spi_edma_lpspi_transfer_master" name="flexio_spi_edma_lpspi_transfer_master" brief="The flexio_spi_master_edma_lpspi_slave example shows how to use flexio spi master driver in edma way:In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/spi/edma_lpspi_transfer/master">
          <external path="examples/frdmke15z/driver_examples/flexio/spi/edma_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_spi_edma_lpspi_transfer_slave" name="flexio_spi_edma_lpspi_transfer_slave" brief="The flexio_spi_slave_edma_lpspi_master example shows how to use flexio spi slave driver in edma way:In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/spi/edma_lpspi_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/flexio/spi/edma_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_edma_lpspi_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_spi_int_lpspi_transfer_master" name="flexio_spi_int_lpspi_transfer_master" brief="The flexio_spi_master_interrupt_lpspi_slave example shows how to use flexio spi master driver in interrupt way. In this example, a flexio simulated master connect to a lpspi slave ." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/spi/int_lpspi_transfer/master">
          <external path="examples/frdmke15z/driver_examples/flexio/spi/int_lpspi_transfer/master" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_spi_int_lpspi_transfer_slave" name="flexio_spi_int_lpspi_transfer_slave" brief="The flexio_spi_slave_interrupt_lpspi_master example shows how to use flexio spi slave driver in interrupt way. In this example, a flexio simulated slave connect to a lpspi master." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/spi/int_lpspi_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/flexio/spi/int_lpspi_transfer/slave" type="xml">
            <files mask="flexio_spi_int_lpspi_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_uart_edma_transfer" name="flexio_uart_edma_transfer" brief="The flexio_uart_edma example shows how to use flexio uart driver in edma way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/uart/edma_transfer">
          <external path="examples/frdmke15z/driver_examples/flexio/uart/edma_transfer" type="xml">
            <files mask="flexio_uart_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_uart_int_rb_transfer" name="flexio_uart_int_rb_transfer" brief="The flexio_uart_interrupt_ring_buffer example shows how to use flexio uart driver in interrupt way withRX ring buffer enabled:In this example, a flexio simulated uart connect to PC through USB-Serial, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/uart/int_rb_transfer">
          <external path="examples/frdmke15z/driver_examples/flexio/uart/int_rb_transfer" type="xml">
            <files mask="flexio_uart_int_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_uart_interrupt_transfer" name="flexio_uart_interrupt_transfer" brief="The flexio_uart_interrupt example shows how to use flexio uart driver in interrupt way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send back all charactersthat PC send to the board. Note: two queued transfer in this example, so please input even number characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/uart/interrupt_transfer">
          <external path="examples/frdmke15z/driver_examples/flexio/uart/interrupt_transfer" type="xml">
            <files mask="flexio_uart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexio_uart_polling_transfer" name="flexio_uart_polling_transfer" brief="The flexio_uart_polling example shows how to use flexio uart driver in polling way:In this example, a flexio simulated uart connect to PC through USB-Serial, the board will send backall characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flexio" path="examples/frdmke15z/driver_examples/flexio/uart/polling_transfer">
          <external path="examples/frdmke15z/driver_examples/flexio/uart/polling_transfer" type="xml">
            <files mask="flexio_uart_polling_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexnvm_dflash" name="flexnvm_dflash" brief="The flexnvm_dflash example shows how to use flash driver to operate data flash:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="examples/frdmke15z/driver_examples/flash/flexnvm_dflash">
          <external path="examples/frdmke15z/driver_examples/flash/flexnvm_dflash" type="xml">
            <files mask="flexnvm_dflash_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexnvm_eeprom" name="flexnvm_eeprom" brief="The flexnvm_eeprom example shows how to use flash driver to operate eeprom:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="examples/frdmke15z/driver_examples/flash/flexnvm_eeprom">
          <external path="examples/frdmke15z/driver_examples/flash/flexnvm_eeprom" type="xml">
            <files mask="flexnvm_eeprom_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_flexnvm_flexram" name="flexnvm_flexram" brief="The flexnvm_flexram example shows how to use flash driver to operate eeprom:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="examples/frdmke15z/driver_examples/flash/flexnvm_flexram">
          <external path="examples/frdmke15z/driver_examples/flash/flexnvm_flexram" type="xml">
            <files mask="flexnvm_flexram_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_event">
          <external path="examples/frdmke15z/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_generic">
          <external path="examples/frdmke15z/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_hello">
          <external path="examples/frdmke15z/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_lpi2c" name="freertos_lpi2c" brief="The LPI2C Example project is a demonstration program that uses the KSDK software to manipulate the Low Power Inter-Integrated Circuit.The example uses two instances of LPI2C, one in configured as master and the other one as slave.The LPI2C master sends data to LPI2C slave. The slave will check the data it receives and shows the log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_lpi2c">
          <external path="examples/frdmke15z/rtos_examples/freertos_lpi2c" type="xml">
            <files mask="freertos_lpi2c_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_lpspi" name="freertos_lpspi" brief="The lpspi_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_lpspi">
          <external path="examples/frdmke15z/rtos_examples/freertos_lpspi" type="xml">
            <files mask="freertos_lpspi_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_lpspi_b2b_master" name="freertos_lpspi_b2b_master" brief="The freertos_lpspi_b2b_master example shows how to use LPSPI driver in FreeRTOS." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_lpspi_b2b/master">
          <external path="examples/frdmke15z/rtos_examples/freertos_lpspi_b2b/master" type="xml">
            <files mask="freertos_lpspi_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_lpspi_b2b_slave" name="freertos_lpspi_b2b_slave" brief="The freertos_lpspi_b2b_slave example shows how to use LPSPI driver in FreeRTOS." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_lpspi_b2b/slave">
          <external path="examples/frdmke15z/rtos_examples/freertos_lpspi_b2b/slave" type="xml">
            <files mask="freertos_lpspi_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_lpuart" name="freertos_lpuart" brief="The LPUART example for FreeRTOS demonstrates the possibility to use the LPUART driver in the RTOS.The example uses single instance of LPUART IP and writes string into, then reads back chars.After every 4B received, these are sent back on LPUART." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_lpuart">
          <external path="examples/frdmke15z/rtos_examples/freertos_lpuart" type="xml">
            <files mask="freertos_lpuart_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_mutex">
          <external path="examples/frdmke15z/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_queue">
          <external path="examples/frdmke15z/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_sem">
          <external path="examples/frdmke15z/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_swtimer">
          <external path="examples/frdmke15z/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then it is waked up by expired time delay that using GPT module." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/frdmke15z/rtos_examples/freertos_tickless">
          <external path="examples/frdmke15z/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ftm_combine_pwm" name="ftm_combine_pwm" brief="The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmke15z/driver_examples/ftm/combine_pwm">
          <external path="examples/frdmke15z/driver_examples/ftm/combine_pwm" type="xml">
            <files mask="ftm_combine_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ftm_dual_edge_capture" name="ftm_dual_edge_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmke15z/driver_examples/ftm/dual_edge_capture">
          <external path="examples/frdmke15z/driver_examples/ftm/dual_edge_capture" type="xml">
            <files mask="ftm_dual_edge_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ftm_input_capture" name="ftm_input_capture" brief="The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmke15z/driver_examples/ftm/input_capture">
          <external path="examples/frdmke15z/driver_examples/ftm/input_capture" type="xml">
            <files mask="ftm_input_capture_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ftm_output_compare" name="ftm_output_compare" brief="The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmke15z/driver_examples/ftm/output_compare">
          <external path="examples/frdmke15z/driver_examples/ftm/output_compare" type="xml">
            <files mask="ftm_output_compare_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ftm_pdb_adc12" name="ftm_pdb_adc12" brief="This application demonstrates how to use the trigger signal generated by FTM to trigger the ADCconversion through PDB module.For instance, the FTM0 is configured to work in PWM mode. And its channel 0 monitors the FTM counterand compares with the channel value. Once the FTM counter matches the channel value, an externaltrigger would be generated. TRGMUX would capture this trigger and route it to PDB module. When thePDB is triggered, the PDB counter increase. Once the PDB matches the ADC pre-trigger value, a triggersignal would generated and sent to ADC module. Finally, the ADC gets the trigger signal and start theconversion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/ftm_pdb_adc12">
          <external path="examples/frdmke15z/demo_apps/ftm_pdb_adc12" type="xml">
            <files mask="ftm_pdb_adc12_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ftm_pdb_adc12_peripheral" name="ftm_pdb_adc12_peripheral" brief="This application demonstrates how to use the trigger signal generated by FTM to trigger the ADCconversion through PDB module.For instance, the FTM0 is configured to work in PWM mode. And its channel 0 monitors the FTM counterand compares with the channel value. Once the FTM counter matches the channel value, an externaltrigger would be generated. TRGMUX would capture this trigger and route it to PDB module. When thePDB is triggered, the PDB counter increase. Once the PDB matches the ADC pre-trigger value, a triggersignal would generated and sent to ADC module. Finally, the ADC gets the trigger signal and start theconversion.You can open the mex file with MCUXpresso Config Tool to do further configuration of pin, clock and peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/ftm_pdb_adc12_peripheral">
          <external path="examples/frdmke15z/demo_apps/ftm_pdb_adc12_peripheral" type="xml">
            <files mask="ftm_pdb_adc12_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ftm_pwm_twochannel" name="ftm_pwm_twochannel" brief="The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmke15z/driver_examples/ftm/pwm_twochannel">
          <external path="examples/frdmke15z/driver_examples/ftm/pwm_twochannel" type="xml">
            <files mask="ftm_pwm_twochannel_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ftm_simple_pwm" name="ftm_simple_pwm" brief="The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmke15z/driver_examples/ftm/simple_pwm">
          <external path="examples/frdmke15z/driver_examples/ftm/simple_pwm" type="xml">
            <files mask="ftm_simple_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/frdmke15z/driver_examples/ftm/timer">
          <external path="examples/frdmke15z/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmke15z/driver_examples/gpio/input_interrupt">
          <external path="examples/frdmke15z/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/frdmke15z/driver_examples/gpio/led_output">
          <external path="examples/frdmke15z/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/hello_world">
          <external path="examples/frdmke15z/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/led_blinky">
          <external path="examples/frdmke15z/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_edma_b2b_transfer_master" name="lpi2c_edma_b2b_transfer_master" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmke15z/driver_examples/lpi2c/edma_b2b_transfer/master">
          <external path="examples/frdmke15z/driver_examples/lpi2c/edma_b2b_transfer/master" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_edma_b2b_transfer_slave" name="lpi2c_edma_b2b_transfer_slave" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmke15z/driver_examples/lpi2c/edma_b2b_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/lpi2c/edma_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_edma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_interrupt" name="lpi2c_interrupt" brief="The lpi2c_functional_interrupt example shows how to use lpi2c functional driver to build a interrupt based application:In this example , one lpi2c instance used as lpi2c master and another lpi2c instance used as lpi2c slave .1. lpi2c master send data using interrupt to lpi2c slave in interrupt .2. lpi2c master read data using interrupt from lpi2c slave in interrupt .3. The example assumes that the connection is OK between master and slave, so there's NO error handling code." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmke15z/driver_examples/lpi2c/interrupt">
          <external path="examples/frdmke15z/driver_examples/lpi2c/interrupt" type="xml">
            <files mask="lpi2c_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_interrupt_b2b_transfer_master" name="lpi2c_interrupt_b2b_transfer_master" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmke15z/driver_examples/lpi2c/interrupt_b2b_transfer/master">
          <external path="examples/frdmke15z/driver_examples/lpi2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_interrupt_b2b_transfer_slave" name="lpi2c_interrupt_b2b_transfer_slave" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmke15z/driver_examples/lpi2c/interrupt_b2b_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/lpi2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpi2c_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_polling_b2b_master" name="lpi2c_polling_b2b_master" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmke15z/driver_examples/lpi2c/polling_b2b/master">
          <external path="examples/frdmke15z/driver_examples/lpi2c/polling_b2b/master" type="xml">
            <files mask="lpi2c_polling_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_polling_b2b_slave" name="lpi2c_polling_b2b_slave" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmke15z/driver_examples/lpi2c/polling_b2b/slave">
          <external path="examples/frdmke15z/driver_examples/lpi2c/polling_b2b/slave" type="xml">
            <files mask="lpi2c_polling_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_read_accel_value_transfer" name="lpi2c_read_accel_value_transfer" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/frdmke15z/driver_examples/lpi2c/read_accel_value_transfer">
          <external path="examples/frdmke15z/driver_examples/lpi2c/read_accel_value_transfer" type="xml">
            <files mask="lpi2c_read_accel_value_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_vlps" name="lpi2c_vlps" brief="This example describes how to use kinetis SDK drivers to implement LPI2C transmit and receive in the VLPS (very low power STOP mode) with async DMA.The LPI2C module is designed to have ability to work under low power module like STOP, VLPW and VLPS. It can use DMA to transmit the data from or to application user buffer without CPU interaction.It uses LPI2C to access the on board accelerometer sensor to read the Accelerometer X, Y, Z data every 500ms. CPU would keep in VLPS low power mode, except for some trigger events and data output to LPUART0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/lpi2c_vlps">
          <external path="examples/frdmke15z/demo_apps/lpi2c_vlps" type="xml">
            <files mask="lpi2c_vlps_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpi2c_vlps_peripheral" name="lpi2c_vlps_peripheral" brief="This example describes how to use kinetis SDK drivers to implement LPI2C transmit and receive in the VLPS (very low power STOP mode) with async DMA.The LPI2C module is designed to have ability to work under low power module like STOP, VLPW and VLPS. It can use DMA to transmit the data from or to application user buffer without CPU interaction.It uses LPI2C to access the on board accelerometer sensor to read the Accelerometer X, Y, Z data every 500ms. CPU would keep in VLPS low power mode, except for some trigger events and data output to LPUART0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/lpi2c_vlps_peripheral">
          <external path="examples/frdmke15z/demo_apps/lpi2c_vlps_peripheral" type="xml">
            <files mask="lpi2c_vlps_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpit_chained_channel" name="lpit_chained_channel" brief="The LPIT chained channel project is a simple example of the SDK LPIT driver. It sets up the LPIT hardware block to trigger a periodic interrupt after every 1 second in the channel No.0, the channel No.1 chained with channel No.0, if LPIT contain more than two channels, the channel No.2 chained with channel No.1....the channel No.N chained with Channel No.N-1. When the LPIT interrupt is triggered." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/frdmke15z/driver_examples/lpit/chained_channel">
          <external path="examples/frdmke15z/driver_examples/lpit/chained_channel" type="xml">
            <files mask="lpit_chained_channel_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpit_single_channel" name="lpit_single_channel" brief="The LPIT single channel project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/frdmke15z/driver_examples/lpit/single_channel">
          <external path="examples/frdmke15z/driver_examples/lpit/single_channel" type="xml">
            <files mask="lpit_single_channel_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_3wire_edma_transfer_master" name="lpspi_3wire_edma_transfer_master" brief="The lpspi_3wire_edma_transfer example shows how to use LPSPI's 3-wire mode in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_3wire_edma_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)2. LPSPI master will use SOUT pin as input/output pin, and slave will use SIN pin as input/output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/edma_transfer/master">
          <external path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/edma_transfer/master" type="xml">
            <files mask="lpspi_3wire_edma_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_3wire_edma_transfer_slave" name="lpspi_3wire_edma_transfer_slave" brief="The lpspi_3wire_edma_transfer example shows how to use LPSPI's 3-wire mode in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_3wire_edma_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)2. LPSPI master will use SOUT pin as input/output pin, and slave will use SIN pin as input/output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/edma_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/edma_transfer/slave" type="xml">
            <files mask="lpspi_3wire_edma_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_3wire_int_transfer_master" name="lpspi_3wire_int_transfer_master" brief="The lpspi_3wire_int_transfer example shows how to use LPSPI's 3-wire mode in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_3wire_int_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)2. LPSPI master will use SOUT pin as input/output pin, and slave will use SIN pin as input/output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/int_transfer/master">
          <external path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/int_transfer/master" type="xml">
            <files mask="lpspi_3wire_int_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_3wire_int_transfer_slave" name="lpspi_3wire_int_transfer_slave" brief="The lpspi_3wire_int_transfer example shows how to use LPSPI's 3-wire mode in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_3wire_int_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)2. LPSPI master will use SOUT pin as input/output pin, and slave will use SIN pin as input/output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/int_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/int_transfer/slave" type="xml">
            <files mask="lpspi_3wire_int_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_3wire_polling_transfer_master" name="lpspi_3wire_polling_transfer_master" brief="The lpspi_3wire_polling_transfer example shows how to use LPSPI's 3-wire mode in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_3wire_polling_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)2. LPSPI master will use SOUT pin as input/output pin, and slave will use SIN pin as input/output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/polling_transfer/master">
          <external path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/polling_transfer/master" type="xml">
            <files mask="lpspi_3wire_polling_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_3wire_polling_transfer_slave" name="lpspi_3wire_polling_transfer_slave" brief="The lpspi_3wire_polling_transfer example shows how to use LPSPI's 3-wire mode in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_3wire_polling_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)2. LPSPI master will use SOUT pin as input/output pin, and slave will use SIN pin as input/output pin." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/polling_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/lpspi/3wire_transfer/polling_transfer/slave" type="xml">
            <files mask="lpspi_3wire_polling_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_edma_b2b_transfer_master" name="lpspi_edma_b2b_transfer_master" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/edma_b2b_transfer/master">
          <external path="examples/frdmke15z/driver_examples/lpspi/edma_b2b_transfer/master" type="xml">
            <files mask="lpspi_edma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_edma_b2b_transfer_slave" name="lpspi_edma_b2b_transfer_slave" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/edma_b2b_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/lpspi/edma_b2b_transfer/slave" type="xml">
            <files mask="lpspi_edma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_interrupt" name="lpspi_interrupt" brief="The lpspi_functional_interrupt example shows how to use LPSPI driver in interrupt way:In this example , one lpspi instance used as LPSPI master and another lpspi instance used as LPSPI slave .1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/interrupt">
          <external path="examples/frdmke15z/driver_examples/lpspi/interrupt" type="xml">
            <files mask="lpspi_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_interrupt_b2b_master" name="lpspi_interrupt_b2b_master" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/interrupt_b2b/master">
          <external path="examples/frdmke15z/driver_examples/lpspi/interrupt_b2b/master" type="xml">
            <files mask="lpspi_interrupt_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_interrupt_b2b_slave" name="lpspi_interrupt_b2b_slave" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/interrupt_b2b/slave">
          <external path="examples/frdmke15z/driver_examples/lpspi/interrupt_b2b/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_interrupt_b2b_transfer_master" name="lpspi_interrupt_b2b_transfer_master" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/interrupt_b2b_transfer/master">
          <external path="examples/frdmke15z/driver_examples/lpspi/interrupt_b2b_transfer/master" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_interrupt_b2b_transfer_slave" name="lpspi_interrupt_b2b_transfer_slave" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/interrupt_b2b_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/lpspi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="lpspi_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_polling_b2b_transfer_master" name="lpspi_polling_b2b_transfer_master" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/polling_b2b_transfer/master">
          <external path="examples/frdmke15z/driver_examples/lpspi/polling_b2b_transfer/master" type="xml">
            <files mask="lpspi_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpspi_polling_b2b_transfer_slave" name="lpspi_polling_b2b_transfer_slave" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/frdmke15z/driver_examples/lpspi/polling_b2b_transfer/slave">
          <external path="examples/frdmke15z/driver_examples/lpspi/polling_b2b_transfer/slave" type="xml">
            <files mask="lpspi_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmke15z/driver_examples/lptmr">
          <external path="examples/frdmke15z/driver_examples/lptmr" type="xml">
            <files mask="lptmr_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpuart_edma_rb_transfer" name="lpuart_edma_rb_transfer" brief="The lpuart_edma Ring Buffer Example project is to demonstrate usage of the KSDK lpuart driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmke15z/driver_examples/lpuart/edma_rb_transfer">
          <external path="examples/frdmke15z/driver_examples/lpuart/edma_rb_transfer" type="xml">
            <files mask="lpuart_edma_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpuart_edma_transfer" name="lpuart_edma_transfer" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmke15z/driver_examples/lpuart/edma_transfer">
          <external path="examples/frdmke15z/driver_examples/lpuart/edma_transfer" type="xml">
            <files mask="lpuart_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpuart_interrupt" name="lpuart_interrupt" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmke15z/driver_examples/lpuart/interrupt">
          <external path="examples/frdmke15z/driver_examples/lpuart/interrupt" type="xml">
            <files mask="lpuart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpuart_interrupt_rb_transfer" name="lpuart_interrupt_rb_transfer" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmke15z/driver_examples/lpuart/interrupt_rb_transfer">
          <external path="examples/frdmke15z/driver_examples/lpuart/interrupt_rb_transfer" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpuart_interrupt_transfer" name="lpuart_interrupt_transfer" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmke15z/driver_examples/lpuart/interrupt_transfer">
          <external path="examples/frdmke15z/driver_examples/lpuart/interrupt_transfer" type="xml">
            <files mask="lpuart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpuart_interrupt_transfer_seven_bits" name="lpuart_interrupt_transfer_seven_bits" brief="The lpuart_interrupt_transfer_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmke15z/driver_examples/lpuart/interrupt_transfer_seven_bits">
          <external path="examples/frdmke15z/driver_examples/lpuart/interrupt_transfer_seven_bits" type="xml">
            <files mask="lpuart_interrupt_transfer_seven_bits_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpuart_polling" name="lpuart_polling" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmke15z/driver_examples/lpuart/polling">
          <external path="examples/frdmke15z/driver_examples/lpuart/polling" type="xml">
            <files mask="lpuart_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_lpuart_polling_seven_bits" name="lpuart_polling_seven_bits" brief="The lpuart_polling_seven_bits Example project is to demonstrate usage of the KSDK lpuart driver with seven data bits feature enabled.In the example, you can send characters to the console back and they will be printed out onto console instantly.NOTE: Please set com port format to &quot;7 data bits without parity bit&quot; in PC's com port tool" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/frdmke15z/driver_examples/lpuart/polling_seven_bits">
          <external path="examples/frdmke15z/driver_examples/lpuart/polling_seven_bits" type="xml">
            <files mask="lpuart_polling_seven_bits_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_mmdvsq" name="mmdvsq" brief="The MMDVSQ Example project is a demonstration program that uses the KSDK software to Calculation square root and QuotientMMDVSQ Peripheral Driver ExampleStart MMDVSQ ExampleCalculation square root, please enter radicandSquare root of 9 is 3Calculation division to get remainder and quotientEnter dividend and divisorRemainder of 10 and 5 is 0Quotient of 10 and 5 is 2" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmke15z/driver_examples/mmdvsq">
          <external path="examples/frdmke15z/driver_examples/mmdvsq" type="xml">
            <files mask="mmdvsq_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_pdb_adc12_trigger" name="pdb_adc12_trigger" brief="The pdb_adc12_trigger example shows how to use the PDB to generate a ADC trigger.Based on the basic counter, to use the ADC trigger, just to enable the ADC trigger's &quot;milestone&quot; and set the user-defined value for it.After the PDB counter is triggered to start, when the counter pass the &quot;milestone&quot;, the ADC's Pre-Trigger would be generated and sentto the ADC12 module.In this example, the ADC12 is configured with hardware trigger and conversion complete interrupt enabled.Once it gets the trigger from the PDB, the conversion goes, then the ISR would be executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="examples/frdmke15z/driver_examples/pdb/adc12_trigger">
          <external path="examples/frdmke15z/driver_examples/pdb/adc12_trigger" type="xml">
            <files mask="pdb_adc12_trigger_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_pdb_delay_interrupt" name="pdb_delay_interrupt" brief="The pdb_delay_interrupt example show how to use the PDB as a general programmable interrupt timer.The PDB is triggered by software, and other external triggers are generated from PDB in this project,so that user can see just a general counter is working with interrupt." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="examples/frdmke15z/driver_examples/pdb/delay_interrupt">
          <external path="examples/frdmke15z/driver_examples/pdb/delay_interrupt" type="xml">
            <files mask="pdb_delay_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="examples/frdmke15z/driver_examples/flash/pflash">
          <external path="examples/frdmke15z/driver_examples/flash/pflash" type="xml">
            <files mask="pflash_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_power_manager" name="power_manager" brief="The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/power_manager">
          <external path="examples/frdmke15z/demo_apps/power_manager" type="xml">
            <files mask="power_manager_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_power_mode_switch" name="power_mode_switch" brief="The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/power_mode_switch">
          <external path="examples/frdmke15z/demo_apps/power_mode_switch" type="xml">
            <files mask="power_mode_switch_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_pwt_example" name="pwt_example" brief="The PWT project is a simple demonstration program of the SDK PWT driver. It sets up the PWThardware block to edge detection, capture control part and detects measurement trigger edges andcontrols when and which pulse width register(s) will be updated. Once the input signal is received,this example will print overflow flag status, positive pulse width and negative pulse width." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pwt" path="examples/frdmke15z/driver_examples/pwt">
          <external path="examples/frdmke15z/driver_examples/pwt" type="xml">
            <files mask="pwt_example_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_rtc" name="rtc" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmke15z/driver_examples/rtc">
          <external path="examples/frdmke15z/driver_examples/rtc" type="xml">
            <files mask="rtc_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_rtc_func" name="rtc_func" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/rtc_func">
          <external path="examples/frdmke15z/demo_apps/rtc_func" type="xml">
            <files mask="rtc_func_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_rtc_func_peripheral" name="rtc_func_peripheral" brief="The RTC demo application demonstrates the important features of the RTC Module by using the RTC Peripheral Driver.The RTC demo supports the following features:- Calendar  + Get the current date time with Year, Month, Day, Hour, Minute, and Second.  + Set the current date time with Year, Month, Day, Hour, Minute, and Second.- Alarm  + Set the alarm based on the current time.  + Application prints a notification when the alarm expires.- Seconds interrupt  + Use second interrupt function to display a digital time blink every second." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/rtc_func_peripheral">
          <external path="examples/frdmke15z/demo_apps/rtc_func_peripheral" type="xml">
            <files mask="rtc_func_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_scg" name="scg" brief="The SCG example shows how to use SCG driver: 1. How to setup the SCG clock source. 2. How to use SCG clock while power mode switch. 3. How to use SCG APIs to get clock frequency.This example prints the clock frequency through the terminal using the SDK driver." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmke15z/driver_examples/scg">
          <external path="examples/frdmke15z/driver_examples/scg" type="xml">
            <files mask="scg_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/frdmke15z/demo_apps/shell">
          <external path="examples/frdmke15z/demo_apps/shell" type="xml">
            <files mask="shell_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_trgmux_clone_pwm" name="trgmux_clone_pwm" brief="The TRGMUX project is a simple demonstration program of the SDK TRGMUX driver. It generatesa 10KHz PWM by LPIT0 CH0, and clone by TRGMUX to output this PWM to eight TRGMUX_OUTx pins." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/trgmux" path="examples/frdmke15z/driver_examples/trgmux/clone_pwm">
          <external path="examples/frdmke15z/driver_examples/trgmux/clone_pwm" type="xml">
            <files mask="trgmux_clone_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_tsi_v5_mutual_cap" name="tsi_v5_mutual_cap" brief="The tsi_v5_mutual_cap example shows how to use TSI_V5 driver in mutual-cap mode:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Software-Trigger scan using polling method and interrupt method;3. Then, we start the Hardware-Trigger scan using interrupt method." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tsi_v5" path="examples/frdmke15z/driver_examples/tsi_v5/mutual_cap">
          <external path="examples/frdmke15z/driver_examples/tsi_v5/mutual_cap" type="xml">
            <files mask="tsi_v5_mutual_cap_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_tsi_v5_mutualmode" name="tsi_v5_mutualmode" brief="The tsi_v5_mutualmode demo shows how to use TSI_V5 driver in mutual-cap mode:In this example , available electrodes on FRDM-TOUCH board are used to show how to realize touch key.1. Firstly, get the non-touch calibration results as baseline electrode counter;2. Then, start the periodical Software-Trigger scan using polling method to detect finger touch;3. Wait for the electrodes touched and deal with the event." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps/tsi_v5" path="examples/frdmke15z/demo_apps/tsi_v5/tsi_v5_mutualmode">
          <external path="examples/frdmke15z/demo_apps/tsi_v5/tsi_v5_mutualmode" type="xml">
            <files mask="tsi_v5_mutualmode_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_tsi_v5_self_cap" name="tsi_v5_self_cap" brief="The tsi_v5_self_cap example shows how to use TSI_V5 driver in self-cap mode:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Software-Trigger scan using polling method and interrupt method;3. Then, we start the Hardware-Trigger scan using interrupt method." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/tsi_v5" path="examples/frdmke15z/driver_examples/tsi_v5/self_cap">
          <external path="examples/frdmke15z/driver_examples/tsi_v5/self_cap" type="xml">
            <files mask="tsi_v5_self_cap_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_tsi_v5_selfmode" name="tsi_v5_selfmode" brief="The tsi_v5_selfmode demo shows how to use TSI_V5 driver in self-cap mode:In this example , available electrodes on board is used to show how to realize touch key.1. Firstly, get the non-touch calibration results as baseline electrode counter;2. Then, start the periodical Software-Trigger scan using polling method to detect finger touch;3. Wait for the electrodes touched and deal with the event." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps/tsi_v5" path="examples/frdmke15z/demo_apps/tsi_v5/tsi_v5_selfmode">
          <external path="examples/frdmke15z/demo_apps/tsi_v5/tsi_v5_selfmode" type="xml">
            <files mask="tsi_v5_selfmode_v3_8.xml"/>
          </external>
        </example>
        <example id="frdmke15z_wdog32" name="wdog32" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/frdmke15z/driver_examples/wdog32">
          <external path="examples/frdmke15z/driver_examples/wdog32" type="xml">
            <files mask="wdog32_v3_8.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MKE15Z128xxx7" name="MKE15Z7" version="1.0.0" full_name="MKE15Z128xxx7" family="KE1x" platform="Kinetis">
      <description>Kinetis KE1xZ-72 MHz, Mainstream with Touch Interface 5V Microcontrollers based on ARM Cortex-M0+</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MKE15Z128xxx7" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MKE15Z128xxx7" name="PROGRAM_FLASH" addr="00000000" size="00020000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_MKE15Z128xxx7" name="SRAM" addr="1ffff000" size="00004000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_RAM_MKE15Z128xxx7" name="FLEX_RAM" addr="14000000" size="00000800" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_NVM_MKE15Z128xxx7" name="FLEX_NVM" addr="10000000" size="00008000" type="DFlash" access="RO"/>
      </memory>
      <total_memory flash_size_kb="128" ram_size_kb="16"/>
      <package id="MKE15Z128VLL7" name="MKE15Z128VLL7"/>
      <package id="MKE15Z128VLH7" name="MKE15Z128VLH7"/>
      <evaluation_boards>
        <evaluation_board name="frdmke15z"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MKE15Z128xxx7" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MKE15Z128xxx7" name="internal.has_swo" value="false"/>
            <params id="internal.connect.script.debug.mcuxpresso.MKE15Z128xxx7" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MKE15Z128xxx7">
              <driverBinary path="core/devices/MKE15Z7/mcuxpresso" type="binary">
                <files mask="FTFE_2K_KE.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
    </device>
    <device id="MKE15Z256xxx7" name="MKE15Z7" version="1.0.0" full_name="MKE15Z256xxx7" family="KE1x" platform="Kinetis">
      <description>Kinetis KE1xZ-72 MHz, Mainstream with Touch Interface 5V Microcontrollers based on ARM Cortex-M0+</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MKE15Z256xxx7" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MKE15Z256xxx7" name="PROGRAM_FLASH" addr="00000000" size="00040000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_MKE15Z256xxx7" name="SRAM" addr="1fffe000" size="00008000" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_RAM_MKE15Z256xxx7" name="FLEX_RAM" addr="14000000" size="00000800" type="RAM" access="RW"/>
        <memoryBlock id="FLEX_NVM_MKE15Z256xxx7" name="FLEX_NVM" addr="10000000" size="00008000" type="DFlash" access="RO"/>
      </memory>
      <total_memory flash_size_kb="256" ram_size_kb="32"/>
      <package id="MKE15Z256VLL7" name="MKE15Z256VLL7"/>
      <package id="MKE15Z256VLH7" name="MKE15Z256VLH7"/>
      <evaluation_boards>
        <evaluation_board name="frdmke15z"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MKE15Z256xxx7" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MKE15Z256xxx7" name="internal.has_swo" value="false"/>
            <params id="internal.connect.script.debug.mcuxpresso.MKE15Z256xxx7" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MKE15Z256xxx7">
              <driverBinary path="core/devices/MKE15Z7/mcuxpresso" type="binary">
                <files mask="FTFE_2K_KE.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="8"/>
        <linker property="data_align" value="8"/>
        <linker property="bss_align" value="8"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.frdmke15z.MKE15Z7" name="frdmke15z" brief="Board_project_template frdmke15z" version="1.0.0" full_name="Board_project_template frdmke15z" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/frdmke15z/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKE15Z7"/>
          <component_dependency value="component.lpuart_adapter.MKE15Z7"/>
          <component_dependency value="platform.drivers.port.MKE15Z7"/>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.gpio.MKE15Z7"/>
          <component_dependency value="platform.drivers.smc.MKE15Z7"/>
          <component_dependency value="device.MKE15Z7_startup.MKE15Z7"/>
          <component_dependency value="platform.drivers.lpi2c.MKE15Z7"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MKE15Z7"/>
              <component_dependency value="component.serial_manager.MKE15Z7"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MKE15Z7"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.MKE15Z7" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKE15Z7"/>
          <component_dependency value="platform.Include_dsp.MKE15Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKE15Z7" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE15Z7" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKE15Z7" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKE15Z7" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKE15Z7" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MKE15Z7" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKE15Z7" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKE15Z7" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKE15Z7" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKE15Z7" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKE15Z7" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKE15Z7" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE15Z7" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKE15Z7" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKE15Z7" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKE15Z7" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.MKE15Z7" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_common.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm0plus.MKE15Z7" name="CMSIS_Include_core_cm0plus" brief="Cmsis_include_core_cm0plus" version="5.3.0" full_name="Cmsis_include_core_cm0plus" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKE15Z7"/>
          <component_dependency value="platform.Include_dsp.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_core_cm0plus.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.MKE15Z7" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_dsp.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.MKE15Z7" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.MKE15Z7.MKE15Z7" name="MKE15Z7" brief="Devices_project_template MKE15Z7" version="1.0.0" full_name="Devices_project_template MKE15Z7" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MKE15Z7/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKE15Z7"/>
          <component_dependency value="component.lpuart_adapter.MKE15Z7"/>
          <component_dependency value="platform.drivers.port.MKE15Z7"/>
          <component_dependency value="platform.drivers.gpio.MKE15Z7"/>
          <component_dependency value="platform.drivers.smc.MKE15Z7"/>
          <component_dependency value="device.MKE15Z7_startup.MKE15Z7"/>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.clock.MKE15Z7"/>
          <component_dependency value="platform.drivers.lpi2c.MKE15Z7"/>
          <component_dependency value="platform.drivers.adc12.MKE15Z7"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MKE15Z7"/>
              <component_dependency value="component.serial_manager.MKE15Z7"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MKE15Z7"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.MKE15Z7" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MKE15Z7/template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE15Z7"/>
          <component_dependency value="platform.drivers.dmamux.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.MKE15Z7" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.MKE15Z7" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.timer_manager.MKE15Z7"/>
          <component_dependency value="component.gpio_adapter.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.MKE15Z7" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.osa.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.crc_adapter.MKE15Z7" name="crc_adapter" brief="Component crc_adapter" version="1.0.0" full_name="Component crc_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.crc.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.flash_adapter.MKE15Z7" name="flash_adapter" brief="Component flash_adapter" version="1.0.0" full_name="Component flash_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/internal_flash" project_base_path="component/internal_flash">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.flash.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_flash.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ftm_adapter.MKE15Z7" name="ftm_adapter" brief="Component ftm_adapter" version="1.0.0" full_name="Component ftm_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.ftm.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ftm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpio_adapter.MKE15Z7" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.0" full_name="Component gpio_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MKE15Z7"/>
          <component_dependency value="platform.drivers.port.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.MKE15Z7" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.timer_manager.MKE15Z7"/>
          <component_dependency value="component.gpio_adapter.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.MKE15Z7" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lists.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.MKE15Z7" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="utility.debug_console.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.MKE15Z7" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.log.MKE15Z7"/>
          <component_dependency value="utility.debug_console.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.MKE15Z7" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.log.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpit_adapter.MKE15Z7" name="lpit_adapter" brief="Component lpit_adapter" version="1.0.0" full_name="Component lpit_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.lpit.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpit.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_adapter.MKE15Z7" name="lptmr_adapter" brief="Component lptmr_adapter" version="1.0.0" full_name="Component lptmr_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.lptmr.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_adapter.MKE15Z7" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.lpuart.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lpuart_adapter.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.MKE15Z7" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.lists.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.MKE15Z7" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.lists.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.MKE15Z7" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.lists.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MKE15Z7" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MKE15Z7" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.MKE15Z7" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source condition="middleware.freertos-kernel.MKE15Z7" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.MKE15Z7" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.lists.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_free_rtos.MKE15Z7" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.lists.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.MKE15Z7" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="utility.debug_console.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_ftm_adapter.MKE15Z7" name="pwm_ftm_adapter" brief="Component pwm_ftm_adapter" version="1.0.0" full_name="Component pwm_ftm_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.ftm.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_ftm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.MKE15Z7" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.lists.MKE15Z7"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MKE15Z7"/>
            <component_dependency value="component.serial_manager_virtual.MKE15Z7"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.MKE15Z7" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MKE15Z7"/>
          <component_dependency value="component.serial_manager.MKE15Z7"/>
          <component_dependency value="platform.drivers.lpuart.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_uart.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.MKE15Z7" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MKE15Z7"/>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.MKE15Z7" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.MKE15Z7" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.MKE15Z7" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="component.lists.MKE15Z7"/>
          <any_of>
            <component_dependency value="component.ftm_adapter.MKE15Z7"/>
            <component_dependency value="component.lptmr_adapter.MKE15Z7"/>
            <component_dependency value="component.lpit_adapter.MKE15Z7"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MKE15Z7_CMSIS.MKE15Z7" name="MKE15Z7_CMSIS" brief="Device MKE15Z7_cmsis" version="1.0.0" full_name="Device MKE15Z7_cmsis" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MKE15Z7" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.Include_core_cm0plus.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="MKE15Z7.h"/>
        <files mask="MKE15Z7_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_CMSIS.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MKE15Z7_debugger.MKE15Z7" name="MKE15Z7_debugger" brief="Device MKE15Z7_debugger" version="1.0.0" full_name="Device MKE15Z7_debugger" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="debugger" package_base_path="core/devices/MKE15Z7" project_base_path="MKE15Z7">
      <source relative_path="./" type="xml">
        <files mask="MKE15Z7.xml"/>
      </source>
    </component>
    <component id="platform.devices.MKE15Z7_linker.MKE15Z7" name="MKE15Z7_linker" brief="Device MKE15Z7_linker" version="1.0.0" full_name="Device MKE15Z7_linker" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="linker" package_base_path="core/devices/MKE15Z7" project_base_path="MKE15Z7">
      <source toolchain="armgcc" relative_path="gcc" type="linker">
        <files mask="MKE15Z128xxx7_flash.ld"/>
        <files mask="MKE15Z128xxx7_ram.ld"/>
        <files mask="MKE15Z256xxx7_flash.ld"/>
        <files mask="MKE15Z256xxx7_ram.ld"/>
      </source>
    </component>
    <component id="device.MKE15Z7_startup.MKE15Z7" name="MKE15Z7_startup" brief="Device MKE15Z7_startup" version="1.1.0" full_name="Device MKE15Z7_startup" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/MKE15Z7" project_base_path="startup">
      <dependencies>
        <component_dependency value="device.MKE15Z7_system.MKE15Z7"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include">
        <files mask="startup_MKE15Z7.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c">
        <files mask="startup_mke15z7.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp">
        <files mask="startup_mke15z7.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_startup.cmake" hidden="true"/>
      </source>
    </component>
    <component id="device.MKE15Z7_system.MKE15Z7" name="MKE15Z7_system" brief="Device MKE15Z7_system" version="1.0.0" full_name="Device MKE15Z7_system" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MKE15Z7" project_base_path="device">
      <dependencies>
        <component_dependency value="device.MKE15Z7_CMSIS.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_MKE15Z7.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_MKE15Z7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_system.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.MKE15Z7.MKE15Z7" name="MKE15Z7" brief="Docs mke15z7" version="1.0.0" full_name="Docs mke15z7" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for FRDM-KE15Z.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.acmp.MKE15Z7" name="acmp" brief="ACMP Driver" version="2.0.6" full_name="ACMP Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/acmp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_acmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_acmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_acmp.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.adc12.MKE15Z7" name="adc" brief="ADC12 Driver" version="2.0.5" full_name="ADC12 Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/adc12" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_adc12.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adc12.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_adc12.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.MKE15Z7" name="clock" brief="Clock Driver" version="2.4.0" full_name="Clock Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/devices/MKE15Z7/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_clock.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.MKE15Z7" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MKE15Z7"/>
          <component_dependency value="device.MKE15Z7_CMSIS.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_common.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.crc.MKE15Z7" name="crc" brief="CRC Driver" version="2.0.3" full_name="CRC Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/crc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_crc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmamux.MKE15Z7" name="dmamux" brief="DMAMUX Driver" version="2.0.5" full_name="DMAMUX Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/dmamux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dmamux.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.edma.MKE15Z7" name="edma" brief="EDMA Driver" version="2.4.1" full_name="EDMA Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/edma" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
          <component_dependency value="platform.drivers.dmamux.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_edma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ewm.MKE15Z7" name="ewm" brief="EWM Driver" version="2.0.3" full_name="EWM Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/ewm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ewm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flash.MKE15Z7" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flash" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flash.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio.MKE15Z7" name="flexio" brief="FLEXIO Driver" version="2.0.4" full_name="FLEXIO Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2c_master.MKE15Z7" name="flexio_i2c_master" brief="FLEXIO I2C Driver" version="2.4.0" full_name="FLEXIO I2C Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2c_master.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2c_master.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_i2c_master.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s.MKE15Z7" name="flexio_i2s" brief="FLEXIO I2S Driver" version="2.2.0" full_name="FLEXIO I2S Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_i2s_edma.MKE15Z7" name="flexio_i2s_edma" brief="FLEXIO I2S EDMA Driver" version="2.1.7" full_name="FLEXIO I2S EDMA Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE15Z7"/>
          <component_dependency value="platform.drivers.flexio_i2s.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_i2s_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_i2s_edma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi.MKE15Z7" name="flexio_spi" brief="FLEXIO SPI Driver" version="2.2.0" full_name="FLEXIO SPI Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_spi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_spi_edma.MKE15Z7" name="flexio_spi_edma" brief="FLEXIO SPI EDMA Driver" version="2.2.0" full_name="FLEXIO SPI EDMA Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE15Z7"/>
          <component_dependency value="platform.drivers.flexio_spi.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_spi_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_spi_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_spi_edma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart.MKE15Z7" name="flexio_uart" brief="FLEXIO UART Driver" version="2.3.0" full_name="FLEXIO UART Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexio.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_uart.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexio_uart_edma.MKE15Z7" name="flexio_uart_edma" brief="FLEXIO UART EDMA Driver" version="2.3.0" full_name="FLEXIO UART EDMA Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexio" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexio_uart.MKE15Z7"/>
          <component_dependency value="platform.drivers.edma.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexio_uart_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexio_uart_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexio_uart_edma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ftm.MKE15Z7" name="ftm" brief="FTM Driver" version="2.3.0" full_name="FTM Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/ftm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ftm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.fxos8700cq.MKE15Z7" name="fxos8700cq" brief="Driver fxos8700cq" version="1.0.0" full_name="Driver fxos8700cq" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="board_component" package_base_path="core/components/fxos8700cq" project_base_path="accel">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_fxos8700cq.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpio.MKE15Z7" name="gpio" brief="GPIO Driver" version="2.5.1" full_name="GPIO Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_gpio.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c.MKE15Z7" name="i2c" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpi2c.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_edma.MKE15Z7" name="i2c_edma" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Edma Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE15Z7"/>
          <component_dependency value="platform.drivers.lpi2c.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpi2c_edma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_freertos.MKE15Z7" name="i2c_freertos" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Freerto Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpi2c.MKE15Z7"/>
          <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpi2c_freertos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpit.MKE15Z7" name="lpit" brief="LPIT Driver" version="2.0.2" full_name="LPIT Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpit" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpit.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpit.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpit.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi.MKE15Z7" name="lpspi" brief="LPSPI Driver" version="2.1.0" full_name="LPSPI Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpspi.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_edma.MKE15Z7" name="lpspi_edma" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Edma Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE15Z7"/>
          <component_dependency value="platform.drivers.lpspi.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpspi_edma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_freertos.MKE15Z7" name="lpspi_freertos" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Freertos Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpspi.MKE15Z7"/>
          <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpspi_freertos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lptmr.MKE15Z7" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lptmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lptmr.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart.MKE15Z7" name="lpuart" brief="LPUART Driver" version="2.4.1" full_name="LPUART Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_edma.MKE15Z7" name="lpuart_edma" brief="LPUART Driver" version="2.4.0" full_name="LPUART Edma Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKE15Z7"/>
          <component_dependency value="platform.drivers.lpuart.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_edma.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_freertos.MKE15Z7" name="lpuart_freertos" brief="LPUART Driver" version="2.4.0" full_name="LPUART Freertos Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpuart.MKE15Z7"/>
          <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpuart_freertos.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mmdvsq.MKE15Z7" name="mmdvsq" brief="MMDVSQ Driver" version="2.0.3" full_name="MMDVSQ Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/mmdvsq" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mmdvsq.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mmdvsq.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mmdvsq.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pdb.MKE15Z7" name="pdb" brief="PDB Driver" version="2.0.4" full_name="PDB Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/pdb" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_pdb.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pdb.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pdb.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pmc.MKE15Z7" name="pmc" brief="PMC Driver" version="2.0.3" full_name="PMC Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/pmc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pmc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.port.MKE15Z7" name="port" brief="PORT Driver" version="2.1.1" full_name="PORT Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/port" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_port.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pwt.MKE15Z7" name="pwt" brief="PWT Driver" version="2.0.1" full_name="PWT Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/pwt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_pwt.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pwt.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pwt.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rcm.MKE15Z7" name="rcm" brief="RCM Driver" version="2.0.4" full_name="RCM Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/rcm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rcm.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rtc.MKE15Z7" name="rtc" brief="RTC Driver" version="2.2.1" full_name="RTC Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/rtc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rtc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sim.MKE15Z7" name="sim" brief="SIM Driver" version="2.1.2" full_name="SIM Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/sim" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sim.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.smc.MKE15Z7" name="smc" brief="SMC Driver" version="2.0.7" full_name="SMC Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/smc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_smc.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.trgmux.MKE15Z7" name="trgmux" brief="TRGMUX Driver" version="2.0.1" full_name="TRGMUX Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/trgmux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_trgmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_trgmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_trgmux.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tsi_v5.MKE15Z7" name="tsi_v5" brief="TSI Driver" version="2.1.2" full_name="TSI Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/tsi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tsi_v5.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_tsi_v5.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_tsi_v5.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wdog32.MKE15Z7" name="wdog" brief="WDOG32 Driver" version="2.0.4" full_name="WDOG32 Driver" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="driver" package_base_path="core/drivers/wdog32" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wdog32.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wdog32.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wdog32.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.MKE15Z7" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.freertos-kernel.MKE15Z7" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="202007.00.0" full_name="FreeRTOS kernel" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.extension.MKE15Z7"/>
          <component_dependency value="middleware.freertos-kernel.template.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="event_groups.c"/>
        <files mask="croutine.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="croutine.h"/>
        <files mask="StackMacros.h"/>
        <files mask="atomic.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM0" type="src" device_cores="core0_MKE15Z256xxx7 core0_MKE15Z128xxx7">
        <files mask="port.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM0" type="c_include" device_cores="core0_MKE15Z256xxx7 core0_MKE15Z128xxx7">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_MKE15Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="portable/GCC/ARM_CM0" toolchain="armgcc mcuxpresso" type="c_include" device_cores="core0_MKE15Z256xxx7 core0_MKE15Z128xxx7"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.armv8m.MKE15Z7" name="FreeRTOS port ARMv8M" brief="FreeRTOS port ARMv8M" version="202007.00.0" full_name="FreeRTOS port ARMv8M" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
      </dependencies>
      <source relative_path="portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/context" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/heap" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/init" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/macros" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.extension.MKE15Z7" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="202007.00.0" full_name="FreeRTOS NXP extension" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_extension.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.MKE15Z7" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="202007.00.0" full_name="FreeRTOS heap 1" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.MKE15Z7" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="202007.00.0" full_name="FreeRTOS heap 2" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.MKE15Z7" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="202007.00.0" full_name="FreeRTOS heap_3" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.MKE15Z7" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="202007.00.0" full_name="FreeRTOS heap 4" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_heap_4.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.MKE15Z7" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="202007.00.0" full_name="FreeRTOS heap 5" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_newlib.MKE15Z7" name="FreeRTOS heap newlib" brief="FreeRTOS heap newlib" version="202007.00.0" full_name="FreeRTOS heap newlib" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_useNewlib.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.MKE15Z7" name="FreeRTOS MPU wrappers" brief="FreeRTOS MPU wrappers" version="202007.00.0" full_name="FreeRTOS MPU wrappers" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKE15Z7"/>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.template.MKE15Z7" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="202007.00.0" full_name="FreeRTOS configuration template" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="project_template" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="template/ARM_CM0" type="c_include" device_cores="core0_MKE15Z256xxx7 core0_MKE15Z128xxx7">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source exclude="true" relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
        <files mask="heap_useNewlib.c"/>
      </source>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <include_paths>
        <include_path relative_path="template/ARM_CM0" type="c_include" device_cores="core0_MKE15Z256xxx7 core0_MKE15Z128xxx7"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.unused.MKE15Z7" name="FreeRTOS unused" brief="FreeRTOS unused" version="202007.00.0" full_name="FreeRTOS unused" devices="MKE15Z128xxx7 MKE15Z256xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="./" type="doc">
        <files mask="History.txt"/>
        <files mask="readme.txt"/>
      </source>
      <source relative_path="./" type="other">
        <files mask="Quick_Start_Guide.url"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source relative_path="License" type="doc">
        <files mask="license.txt"/>
      </source>
      <source relative_path="portable/ARMClang" type="doc">
        <files mask="Use-the-GCC-ports.txt"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MKE15Z7" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="MKE15Z128xxx7 MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utilities_misc_utilities.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MKE15Z7" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.MKE15Z7" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_lite.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.MKE15Z7" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MKE15Z7"/>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.MKE15Z7" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MKE15Z7"/>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_lite.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.notifier.MKE15Z7" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/devices/MKE15Z7/utilities" project_base_path="utilities/utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKE15Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_notifier.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.MKE15Z7" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="MKE15Z128xxx7 MKE15Z256xxx7" device_cores="core0_MKE15Z128xxx7 core0_MKE15Z256xxx7" user_visible="true" type="utilities" package_base_path="core/devices/MKE15Z7/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MKE15Z7"/>
          <component_dependency value="component.lists.MKE15Z7"/>
          <component_dependency value="platform.drivers.common.MKE15Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_shell.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
