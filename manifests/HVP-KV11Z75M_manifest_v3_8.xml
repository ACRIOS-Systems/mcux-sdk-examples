<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_SUPER" name="SDKVersion 2.9.0 SuperSet" brief="This is SDK version 2.9.0 manifest file." format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-05-13 07:17:39.971393-->
  <!--This manifest is generated based on sdk repo commit: 242d157ba29afc4bbd1dac95f382a1491bc2daf5-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="frdmkv11z"/>
    <definition extID="twrkv11z75m"/>
  </externalDefinitions>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="hvpkv11z75m" name="HVP-KV11Z75M" href="" version="1.0.0" package="MKV11Z128VLF7">
      <description>Kinetis KV11 MCU high-voltage development platform</description>
      <image path="core/boards/hvpkv11z75m" type="image">
        <files mask="hvpkv11z75m.png"/>
      </image>
      <examples>
        <example id="hvpkv11z75m_adc16_interrupt" name="adc16_interrupt" brief="The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/hvpkv11z75m/driver_examples/adc16/interrupt">
          <external path="examples/hvpkv11z75m/driver_examples/adc16/interrupt" type="xml">
            <files mask="adc16_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_adc16_polling" name="adc16_polling" brief="The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc16" path="examples/hvpkv11z75m/driver_examples/adc16/polling">
          <external path="examples/hvpkv11z75m/driver_examples/adc16/polling" type="xml">
            <files mask="adc16_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/hvpkv11z75m/driver_examples/crc">
          <external path="examples/hvpkv11z75m/driver_examples/crc" type="xml">
            <files mask="crc_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_dac_adc" name="dac_adc" brief="The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/hvpkv11z75m/demo_apps/dac_adc">
          <external path="examples/hvpkv11z75m/demo_apps/dac_adc" type="xml">
            <files mask="dac_adc_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_edma_channel_link" name="edma_channel_link" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/hvpkv11z75m/driver_examples/edma/channel_link">
          <external path="examples/hvpkv11z75m/driver_examples/edma/channel_link" type="xml">
            <files mask="edma_channel_link_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_edma_interleave_transfer" name="edma_interleave_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/hvpkv11z75m/driver_examples/edma/interleave_transfer">
          <external path="examples/hvpkv11z75m/driver_examples/edma/interleave_transfer" type="xml">
            <files mask="edma_interleave_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_edma_memory_to_memory" name="edma_memory_to_memory" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/hvpkv11z75m/driver_examples/edma/memory_to_memory">
          <external path="examples/hvpkv11z75m/driver_examples/edma/memory_to_memory" type="xml">
            <files mask="edma_memory_to_memory_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_edma_ping_pong_transfer" name="edma_ping_pong_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/hvpkv11z75m/driver_examples/edma/ping_pong_transfer">
          <external path="examples/hvpkv11z75m/driver_examples/edma/ping_pong_transfer" type="xml">
            <files mask="edma_ping_pong_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_edma_scatter_gather" name="edma_scatter_gather" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/hvpkv11z75m/driver_examples/edma/scatter_gather">
          <external path="examples/hvpkv11z75m/driver_examples/edma/scatter_gather" type="xml">
            <files mask="edma_scatter_gather_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_edma_wrap_transfer" name="edma_wrap_transfer" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/edma" path="examples/hvpkv11z75m/driver_examples/edma/wrap_transfer">
          <external path="examples/hvpkv11z75m/driver_examples/edma/wrap_transfer" type="xml">
            <files mask="edma_wrap_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/hvpkv11z75m/rtos_examples/freertos_event">
          <external path="examples/hvpkv11z75m/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/hvpkv11z75m/rtos_examples/freertos_generic">
          <external path="examples/hvpkv11z75m/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/hvpkv11z75m/rtos_examples/freertos_hello">
          <external path="examples/hvpkv11z75m/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/hvpkv11z75m/rtos_examples/freertos_mutex">
          <external path="examples/hvpkv11z75m/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/hvpkv11z75m/rtos_examples/freertos_queue">
          <external path="examples/hvpkv11z75m/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/hvpkv11z75m/rtos_examples/freertos_sem">
          <external path="examples/hvpkv11z75m/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_freertos_sem_static" name="freertos_sem_static" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/hvpkv11z75m/rtos_examples/freertos_sem_static">
          <external path="examples/hvpkv11z75m/rtos_examples/freertos_sem_static" type="xml">
            <files mask="freertos_sem_static_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer's callback SwTimerCallback isperiodically executed and text &quot;Tick.&quot; is printed to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/hvpkv11z75m/rtos_examples/freertos_swtimer">
          <external path="examples/hvpkv11z75m/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_freertos_uart" name="freertos_uart" brief="The UART example for FreeRTOS demonstrates the possibility to use the UART driver in the RTOS.The example uses single instance of UART IP and writes string into, then reads back chars.After every 4B received, these are sent back on UART." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/hvpkv11z75m/rtos_examples/freertos_uart">
          <external path="examples/hvpkv11z75m/rtos_examples/freertos_uart" type="xml">
            <files mask="freertos_uart_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_ftm_timer" name="ftm_timer" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/hvpkv11z75m/driver_examples/ftm/timer">
          <external path="examples/hvpkv11z75m/driver_examples/ftm/timer" type="xml">
            <files mask="ftm_timer_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/hvpkv11z75m/driver_examples/gpio/led_output">
          <external path="examples/hvpkv11z75m/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/hvpkv11z75m/demo_apps/hello_world">
          <external path="examples/hvpkv11z75m/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/hvpkv11z75m/demo_apps/led_blinky">
          <external path="examples/hvpkv11z75m/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_lptmr" name="lptmr" brief="The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/hvpkv11z75m/driver_examples/lptmr">
          <external path="examples/hvpkv11z75m/driver_examples/lptmr" type="xml">
            <files mask="lptmr_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_mcg_fei_blpi" name="mcg_fei_blpi" brief="The fei_bpli example shows how to use MCG driver to change from FEI mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEI mode from default reset mode    Change mode FEI -&gt; FBI -&gt; BLPI    Change back BLPE -&gt; FBI -&gt; FEI    Get System clock in FEI mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mcg" path="examples/hvpkv11z75m/driver_examples/mcg/fei_blpi">
          <external path="examples/hvpkv11z75m/driver_examples/mcg/fei_blpi" type="xml">
            <files mask="mcg_fei_blpi_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_mmdvsq" name="mmdvsq" brief="The MMDVSQ Example project is a demonstration program that uses the KSDK software to Calculation square root and QuotientMMDVSQ Peripheral Driver ExampleStart MMDVSQ ExampleCalculation square root, please enter radicandSquare root of 9 is 3Calculation division to get remainder and quotientEnter dividend and divisorRemainder of 10 and 5 is 0Quotient of 10 and 5 is 2" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/hvpkv11z75m/driver_examples/mmdvsq">
          <external path="examples/hvpkv11z75m/driver_examples/mmdvsq" type="xml">
            <files mask="mmdvsq_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_pdb_adc16_trigger" name="pdb_adc16_trigger" brief="The pdb_adc16_trigger example shows how to use the PDB to generate a ADC trigger.Based on the basic counter, to use the ADC trigger, just to enable the ADC trigger's &quot;milestone&quot; and set the user-defined value for it.After the PDB counter is triggered to start, when the counter pass the &quot;milestone&quot;, the ADC's Pre-Trigger would begenerated and sent to the ADC module.In this example, the ADC16 is configured with hardware trigger and conversion complete interrupt enabled.Once it gets the trigger from the PDB, the conversion goes, then the ISR would be executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="examples/hvpkv11z75m/driver_examples/pdb/adc16_trigger">
          <external path="examples/hvpkv11z75m/driver_examples/pdb/adc16_trigger" type="xml">
            <files mask="pdb_adc16_trigger_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_pdb_delay_interrupt" name="pdb_delay_interrupt" brief="The pdb_delay_interrupt example show how to use the PDB as a general programmable interrupt timer.The PDB is triggered by software, and other external triggers are generated from PDB in this project,so that user can see just a general counter is working with interrupt." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pdb" path="examples/hvpkv11z75m/driver_examples/pdb/delay_interrupt">
          <external path="examples/hvpkv11z75m/driver_examples/pdb/delay_interrupt" type="xml">
            <files mask="pdb_delay_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_pflash" name="pflash" brief="The pflash example shows how to use flash driver to operate program flash:" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/flash" path="examples/hvpkv11z75m/driver_examples/flash/pflash">
          <external path="examples/hvpkv11z75m/driver_examples/flash/pflash" type="xml">
            <files mask="pflash_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_uart_edma_transfer" name="uart_edma_transfer" brief="The uart_edma example shows how to use uart driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/hvpkv11z75m/driver_examples/uart/edma_transfer">
          <external path="examples/hvpkv11z75m/driver_examples/uart/edma_transfer" type="xml">
            <files mask="uart_edma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_uart_interrupt" name="uart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/hvpkv11z75m/driver_examples/uart/interrupt">
          <external path="examples/hvpkv11z75m/driver_examples/uart/interrupt" type="xml">
            <files mask="uart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_uart_interrupt_rb_transfer" name="uart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/hvpkv11z75m/driver_examples/uart/interrupt_rb_transfer">
          <external path="examples/hvpkv11z75m/driver_examples/uart/interrupt_rb_transfer" type="xml">
            <files mask="uart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_uart_interrupt_transfer" name="uart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/hvpkv11z75m/driver_examples/uart/interrupt_transfer">
          <external path="examples/hvpkv11z75m/driver_examples/uart/interrupt_transfer" type="xml">
            <files mask="uart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_uart_polling" name="uart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/uart" path="examples/hvpkv11z75m/driver_examples/uart/polling">
          <external path="examples/hvpkv11z75m/driver_examples/uart/polling" type="xml">
            <files mask="uart_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="hvpkv11z75m_wdog" name="wdog" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 10 times of refreshing the watchdog in None-window mode, a timeout reset is generated.We also try to refresh out of window to trigger reset after 10 times of refreshing in Window mode." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/hvpkv11z75m/driver_examples/wdog">
          <external path="examples/hvpkv11z75m/driver_examples/wdog" type="xml">
            <files mask="wdog_v3_8.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MKV11Z128xxx7" name="MKV11Z7" version="1.0.0" full_name="MKV11Z128xxx7" family="KV1x" platform="Kinetis">
      <description>Kinetis KV1x-75 MHz,  Entry-level 3ph FOC / Sensorless Motor Control MCUs based on ARM Cortex-M0+</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MKV11Z128xxx7" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MKV11Z128xxx7" name="PROGRAM_FLASH" addr="00000000" size="00020000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_MKV11Z128xxx7" name="SRAM" addr="1ffff000" size="00004000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="128" ram_size_kb="16"/>
      <package id="MKV11Z128VFM7" name="MKV11Z128VFM7"/>
      <package id="MKV11Z128VLC7" name="MKV11Z128VLC7"/>
      <package id="MKV11Z128VLF7" name="MKV11Z128VLF7"/>
      <package id="MKV11Z128VLH7" name="MKV11Z128VLH7"/>
      <evaluation_boards>
        <evaluation_board name="frdmkv11z"/>
        <evaluation_board name="hvpkv11z75m"/>
        <evaluation_board name="twrkv11z75m"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MKV11Z128xxx7" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MKV11Z128xxx7" name="internal.has_swo" value="false"/>
            <params id="internal.connect.script.debug.mcuxpresso.MKV11Z128xxx7" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MKV11Z128xxx7">
              <driverBinary path="core/devices/MKV11Z7/mcuxpresso" type="binary">
                <files mask="FTFA_2K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
    </device>
    <device id="MKV11Z64xxx7" name="MKV11Z7" version="1.0.0" full_name="MKV11Z64xxx7" family="KV1x" platform="Kinetis">
      <description>Kinetis KV1x-75 MHz,  Entry-level 3ph FOC / Sensorless Motor Control MCUs based on ARM Cortex-M0+</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="core0_MKV11Z64xxx7" name="core0" fpu="false" type="cm0plus"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_MKV11Z64xxx7" name="PROGRAM_FLASH" addr="00000000" size="00010000" type="Flash" access="RO"/>
        <memoryBlock id="SRAM_MKV11Z64xxx7" name="SRAM" addr="1ffff000" size="00004000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="64" ram_size_kb="16"/>
      <package id="MKV11Z64VFM7" name="MKV11Z64VFM7"/>
      <package id="MKV11Z64VLC7" name="MKV11Z64VLC7"/>
      <package id="MKV11Z64VLF7" name="MKV11Z64VLF7"/>
      <package id="MKV11Z64VLH7" name="MKV11Z64VLH7"/>
      <evaluation_boards>
        <evaluation_board name="frdmkv11z"/>
        <evaluation_board name="hvpkv11z75m"/>
        <evaluation_board name="twrkv11z75m"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MKV11Z64xxx7" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MKV11Z64xxx7" name="internal.has_swo" value="false"/>
            <params id="internal.connect.script.debug.mcuxpresso.MKV11Z64xxx7" name="internal.connect.script" value="kinetisconnect.scp"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_MKV11Z64xxx7">
              <driverBinary path="core/devices/MKV11Z7/mcuxpresso" type="binary">
                <files mask="FTFA_2K.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="flash_security_address" value="0x400"/>
        <linker property="mtb_supported" value="true"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.hvpkv11z75m.MKV11Z7" name="hvpkv11z75m" brief="Board_project_template hvpkv11z75m" version="1.0.0" full_name="Board_project_template hvpkv11z75m" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/hvpkv11z75m/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.uart.MKV11Z7"/>
          <component_dependency value="component.uart_adapter.MKV11Z7"/>
          <component_dependency value="platform.drivers.port.MKV11Z7"/>
          <component_dependency value="platform.drivers.gpio.MKV11Z7"/>
          <component_dependency value="platform.drivers.smc.MKV11Z7"/>
          <component_dependency value="device.MKV11Z7_startup.MKV11Z7"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MKV11Z7"/>
              <component_dependency value="component.serial_manager.MKV11Z7"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MKV11Z7"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.MKV11Z7" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKV11Z7"/>
          <component_dependency value="platform.Include_dsp.MKV11Z7"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MKV11Z7" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKV11Z7" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MKV11Z7" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MKV11Z7" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MKV11Z7" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MKV11Z7" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MKV11Z7" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MKV11Z7" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MKV11Z7" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MKV11Z7" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MKV11Z7" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MKV11Z7" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKV11Z7" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MKV11Z7" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MKV11Z7" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MKV11Z7" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.MKV11Z7" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_common_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm0plus.MKV11Z7" name="CMSIS_Include_core_cm0plus" brief="Cmsis_include_core_cm0plus" version="5.3.0" full_name="Cmsis_include_core_cm0plus" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MKV11Z7"/>
          <component_dependency value="platform.Include_dsp.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_core_cm0plus_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.MKV11Z7" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_dsp_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.MKV11Z7" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.MKV11Z7.MKV11Z7" name="MKV11Z7" brief="Devices_project_template MKV11Z7" version="1.0.0" full_name="Devices_project_template MKV11Z7" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MKV11Z7/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.MKV11Z7"/>
          <component_dependency value="component.uart_adapter.MKV11Z7"/>
          <component_dependency value="platform.drivers.port.MKV11Z7"/>
          <component_dependency value="platform.drivers.gpio.MKV11Z7"/>
          <component_dependency value="platform.drivers.smc.MKV11Z7"/>
          <component_dependency value="device.MKV11Z7_startup.MKV11Z7"/>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.clock.MKV11Z7"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MKV11Z7"/>
              <component_dependency value="component.serial_manager.MKV11Z7"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MKV11Z7"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.MKV11Z7" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MKV11Z7/template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKV11Z7"/>
          <component_dependency value="platform.drivers.dmamux.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.MKV11Z7" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.MKV11Z7" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.timer_manager.MKV11Z7"/>
          <component_dependency value="component.gpio_adapter.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.MKV11Z7" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.osa.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.crc_adapter.MKV11Z7" name="crc_adapter" brief="Component crc_adapter" version="1.0.0" full_name="Component crc_adapter" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.crc.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.flash_adapter.MKV11Z7" name="flash_adapter" brief="Component flash_adapter" version="1.0.0" full_name="Component flash_adapter" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/internal_flash" project_base_path="component/internal_flash">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.flash.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_flash.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ftm_adapter.MKV11Z7" name="ftm_adapter" brief="Component ftm_adapter" version="1.0.0" full_name="Component ftm_adapter" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.ftm.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ftm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpio_adapter.MKV11Z7" name="gpio_adapter" brief="Component gpio_adapter" version="1.0.0" full_name="Component gpio_adapter" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.gpio.MKV11Z7"/>
          <component_dependency value="platform.drivers.port.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.MKV11Z7" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.timer_manager.MKV11Z7"/>
          <component_dependency value="component.gpio_adapter.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.MKV11Z7" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lists_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.MKV11Z7" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="utility.debug_console.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.MKV11Z7" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.log.MKV11Z7"/>
          <component_dependency value="utility.debug_console.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.MKV11Z7" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.log.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lptmr_adapter.MKV11Z7" name="lptmr_adapter" brief="Component lptmr_adapter" version="1.0.0" full_name="Component lptmr_adapter" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.lptmr.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lptmr.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.MKV11Z7" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.lists.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.MKV11Z7" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.lists.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.MKV11Z7" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.lists.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MKV11Z7" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MKV11Z7" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.MKV11Z7" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source condition="middleware.freertos-kernel.MKV11Z7" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.MKV11Z7" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.lists.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_free_rtos.MKV11Z7" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.lists.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.MKV11Z7" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="utility.debug_console.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_ftm_adapter.MKV11Z7" name="pwm_ftm_adapter" brief="Component pwm_ftm_adapter" version="1.0.0" full_name="Component pwm_ftm_adapter" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.ftm.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_ftm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.MKV11Z7" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.lists.MKV11Z7"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MKV11Z7"/>
            <component_dependency value="component.serial_manager_virtual.MKV11Z7"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.MKV11Z7" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.uart_adapter.MKV11Z7"/>
          <component_dependency value="component.serial_manager.MKV11Z7"/>
          <component_dependency value="platform.drivers.uart.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_uart_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.MKV11Z7" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MKV11Z7"/>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.MKV11Z7" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.MKV11Z7" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.MKV11Z7" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="component.lists.MKV11Z7"/>
          <any_of>
            <component_dependency value="component.ftm_adapter.MKV11Z7"/>
            <component_dependency value="component.lptmr_adapter.MKV11Z7"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.uart_adapter.MKV11Z7" name="uart_adapter" brief="Component uart_adapter" version="1.0.0" full_name="uart_adapter" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.uart.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_uart_adapter_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MKV11Z7_CMSIS.MKV11Z7" name="MKV11Z7_CMSIS" brief="Device MKV11Z7_cmsis" version="1.0.0" full_name="Device MKV11Z7_cmsis" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MKV11Z7" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.Include_core_cm0plus.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="MKV11Z7.h"/>
        <files mask="MKV11Z7_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_MKV11Z7_CMSIS_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.MKV11Z7_debugger.MKV11Z7" name="MKV11Z7_debugger" brief="Device MKV11Z7_debugger" version="1.0.0" full_name="Device MKV11Z7_debugger" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="debugger" package_base_path="core/devices/MKV11Z7" project_base_path="MKV11Z7">
      <source relative_path="./" type="xml">
        <files mask="MKV11Z7.xml"/>
      </source>
    </component>
    <component id="platform.devices.MKV11Z7_linker.MKV11Z7" name="MKV11Z7_linker" brief="Device MKV11Z7_linker" version="1.0.0" full_name="Device MKV11Z7_linker" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="linker" package_base_path="core/devices/MKV11Z7" project_base_path="MKV11Z7">
      <source toolchain="armgcc" relative_path="gcc" type="linker">
        <files mask="MKV11Z128xxx7_flash.ld"/>
        <files mask="MKV11Z128xxx7_ram.ld"/>
        <files mask="MKV11Z64xxx7_flash.ld"/>
        <files mask="MKV11Z64xxx7_ram.ld"/>
      </source>
    </component>
    <component id="device.MKV11Z7_startup.MKV11Z7" name="MKV11Z7_startup" brief="Device MKV11Z7_startup" version="1.1.0" full_name="Device MKV11Z7_startup" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/MKV11Z7" project_base_path="startup">
      <dependencies>
        <component_dependency value="device.MKV11Z7_system.MKV11Z7"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include">
        <files mask="startup_MKV11Z7.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c">
        <files mask="startup_mkv11z7.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp">
        <files mask="startup_mkv11z7.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_MKV11Z7_startup_MKV11Z7.cmake" hidden="true"/>
      </source>
    </component>
    <component id="device.MKV11Z7_system.MKV11Z7" name="MKV11Z7_system" brief="Device MKV11Z7_system" version="1.0.0" full_name="Device MKV11Z7_system" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MKV11Z7" project_base_path="device">
      <dependencies>
        <component_dependency value="device.MKV11Z7_CMSIS.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_MKV11Z7.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_MKV11Z7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_MKV11Z7_system_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.MKV11Z7.MKV11Z7" name="MKV11Z7" brief="Docs mkv11z7" version="1.0.0" full_name="Docs mkv11z7" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for FRDM-KV11Z.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for HVP-KV11Z75M.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.adc16.MKV11Z7" name="adc" brief="ADC16 Driver" version="2.2.0" full_name="ADC16 Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/adc16" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_adc16.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adc16.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_adc16_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.MKV11Z7" name="clock" brief="Clock Driver" version="2.4.1" full_name="Clock Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/devices/MKV11Z7/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_clock_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cmp.MKV11Z7" name="cmp" brief="CMP Driver" version="2.0.2" full_name="CMP Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/cmp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cmp.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cmp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_cmp_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.MKV11Z7" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MKV11Z7"/>
          <component_dependency value="device.MKV11Z7_CMSIS.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_common_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.crc.MKV11Z7" name="crc" brief="CRC Driver" version="2.0.3" full_name="CRC Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/crc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_crc_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dac.MKV11Z7" name="dac" brief="DAC Driver" version="2.0.2" full_name="DAC Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/dac" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dac.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dac.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dac_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmamux.MKV11Z7" name="dmamux" brief="DMAMUX Driver" version="2.0.5" full_name="DMAMUX Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/dmamux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmamux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dmamux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dmamux_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dspi.MKV11Z7" name="dspi" brief="DSPI Driver" version="2.2.4" full_name="DSPI Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/dspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dspi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dspi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dspi_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dspi_edma.MKV11Z7" name="dspi_edma" brief="DSPI Driver" version="2.2.4" full_name="DSPI_EDMA Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/dspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dspi.MKV11Z7"/>
          <component_dependency value="platform.drivers.edma.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dspi_edma_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dspi_freertos.MKV11Z7" name="dspi_freertos" brief="DSPI Driver" version="2.2.4" full_name="DSPI Freertos Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/dspi" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dspi.MKV11Z7"/>
          <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dspi_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dspi_freertos.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.edma.MKV11Z7" name="edma" brief="EDMA Driver" version="2.4.1" full_name="EDMA Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/edma" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.dmamux.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_edma_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ewm.MKV11Z7" name="ewm" brief="EWM Driver" version="2.0.3" full_name="EWM Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/ewm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ewm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ewm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ewm_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flash.MKV11Z7" name="flash" brief="Flash Driver" version="3.0.0" full_name="Flash Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flash" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftfx_adapter.h"/>
        <files mask="fsl_ftfx_utilities.h"/>
        <files mask="fsl_ftfx_features.h"/>
        <files mask="fsl_ftfx_controller.h"/>
        <files mask="fsl_ftfx_flash.h"/>
        <files mask="fsl_ftfx_cache.h"/>
        <files mask="fsl_ftfx_flexnvm.h"/>
        <files mask="fsl_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ftfx_controller.c"/>
        <files mask="fsl_ftfx_flash.c"/>
        <files mask="fsl_ftfx_cache.c"/>
        <files mask="fsl_ftfx_flexnvm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flash_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcan.MKV11Z7" name="flexcan" brief="FLEXCAN Driver" version="2.6.0" full_name="FLEXCAN Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexcan" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexcan.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexcan.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcan_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcan_edma.MKV11Z7" name="flexcan_edma" brief="FLEXCAN Driver" version="2.6.0" full_name="FLEXCAN EDMA Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/flexcan" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.edma.MKV11Z7"/>
          <component_dependency value="platform.drivers.flexcan.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexcan_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexcan_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcan_edma_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ftm.MKV11Z7" name="ftm" brief="FTM Driver" version="2.3.0" full_name="FTM Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/ftm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ftm_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.fxos8700cq.MKV11Z7" name="fxos8700cq" brief="Driver fxos8700cq" version="1.0.0" full_name="Driver fxos8700cq" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="board_component" package_base_path="core/components/fxos8700cq" project_base_path="accel">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_fxos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_fxos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_fxos8700cq_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpio.MKV11Z7" name="gpio" brief="GPIO Driver" version="2.5.1" full_name="GPIO Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_gpio_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i2c.MKV11Z7" name="i2c" brief="I2C Driver" version="2.0.9" full_name="I2C Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/i2c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_i2c_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i2c_edma.MKV11Z7" name="i2c_edma" brief="I2C Driver" version="2.0.9" full_name="I2C EDMA Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/i2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c.MKV11Z7"/>
          <component_dependency value="platform.drivers.edma.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_edma.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.i2c_freertos.MKV11Z7" name="i2c_freertos" brief="I2C Driver" version="2.0.9" full_name="I2C FREERTOS Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/i2c" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.i2c.MKV11Z7"/>
          <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_i2c_freertos_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.llwu.MKV11Z7" name="llwu" brief="LLWU Driver" version="2.0.5" full_name="LLWU Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/llwu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_llwu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_llwu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_llwu_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lptmr.MKV11Z7" name="lptmr" brief="LPTMR Driver" version="2.1.1" full_name="LPTMR Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/lptmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lptmr.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lptmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lptmr_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mmdvsq.MKV11Z7" name="mmdvsq" brief="MMDVSQ Driver" version="2.0.3" full_name="MMDVSQ Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/mmdvsq" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mmdvsq.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mmdvsq.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mmdvsq_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pdb.MKV11Z7" name="pdb" brief="PDB Driver" version="2.0.4" full_name="PDB Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/pdb" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_pdb.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pdb.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pdb_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pmc.MKV11Z7" name="pmc" brief="PMC Driver" version="2.0.3" full_name="PMC Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/pmc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pmc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pmc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pmc_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.port.MKV11Z7" name="port" brief="PORT Driver" version="2.1.1" full_name="PORT Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/port" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_port.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_port_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rcm.MKV11Z7" name="rcm" brief="RCM Driver" version="2.0.4" full_name="RCM Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/rcm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_rcm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rcm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rcm_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sim.MKV11Z7" name="sim" brief="SIM Driver" version="2.1.2" full_name="SIM Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/sim" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sim.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sim.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sim_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.smc.MKV11Z7" name="smc" brief="SMC Driver" version="2.0.7" full_name="SMC Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/smc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_smc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_smc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_smc_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.uart.MKV11Z7" name="uart" brief="UART Driver" version="2.4.0" full_name="UART Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/uart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_uart_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.uart_edma.MKV11Z7" name="uart_edma" brief="UART Driver" version="2.4.0" full_name="UART EDMA Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/uart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.MKV11Z7"/>
          <component_dependency value="platform.drivers.edma.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_uart_edma_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.uart_freertos.MKV11Z7" name="uart_freertos" brief="UART Driver" version="2.4.0" full_name="UART FREERTOS Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/uart" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.uart.MKV11Z7"/>
          <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_uart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_uart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_uart_freertos_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wdog.MKV11Z7" name="wdog" brief="WDOG Driver" version="2.0.1" full_name="WDOG Driver" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="driver" package_base_path="core/drivers/wdog" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wdog.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wdog.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wdog_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.MKV11Z7" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.freertos-kernel.MKV11Z7" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="202007.00.0" full_name="FreeRTOS kernel" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.extension.MKV11Z7"/>
          <component_dependency value="middleware.freertos-kernel.template.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="event_groups.c"/>
        <files mask="croutine.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="croutine.h"/>
        <files mask="StackMacros.h"/>
        <files mask="atomic.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM0" type="src" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7">
        <files mask="port.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM0" type="c_include" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="portable/GCC/ARM_CM0" toolchain="armgcc mcuxpresso" type="c_include" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.armv8m.MKV11Z7" name="FreeRTOS port ARMv8M" brief="FreeRTOS port ARMv8M" version="202007.00.0" full_name="FreeRTOS port ARMv8M" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
      </dependencies>
      <source relative_path="portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/context" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/heap" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/init" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/macros" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.extension.MKV11Z7" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="202007.00.0" full_name="FreeRTOS NXP extension" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_extension_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.MKV11Z7" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="202007.00.0" full_name="FreeRTOS heap 1" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.MKV11Z7" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="202007.00.0" full_name="FreeRTOS heap 2" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.MKV11Z7" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="202007.00.0" full_name="FreeRTOS heap_3" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.MKV11Z7" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="202007.00.0" full_name="FreeRTOS heap 4" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_heap_4_MKV11Z7.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.MKV11Z7" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="202007.00.0" full_name="FreeRTOS heap 5" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_newlib.MKV11Z7" name="FreeRTOS heap newlib" brief="FreeRTOS heap newlib" version="202007.00.0" full_name="FreeRTOS heap newlib" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_useNewlib.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.MKV11Z7" name="FreeRTOS MPU wrappers" brief="FreeRTOS MPU wrappers" version="202007.00.0" full_name="FreeRTOS MPU wrappers" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.MKV11Z7"/>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.template.MKV11Z7" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="202007.00.0" full_name="FreeRTOS configuration template" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="project_template" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="template/ARM_CM0" type="c_include" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source exclude="true" relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
        <files mask="heap_useNewlib.c"/>
      </source>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <include_paths>
        <include_path relative_path="template/ARM_CM0" type="c_include" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.unused.MKV11Z7" name="FreeRTOS unused" brief="FreeRTOS unused" version="202007.00.0" full_name="FreeRTOS unused" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="./" type="doc">
        <files mask="History.txt"/>
        <files mask="readme.txt"/>
      </source>
      <source relative_path="./" type="other">
        <files mask="Quick_Start_Guide.url"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source relative_path="License" type="doc">
        <files mask="license.txt"/>
      </source>
      <source relative_path="portable/ARMClang" type="doc">
        <files mask="Use-the-GCC-ports.txt"/>
      </source>
    </component>
    <component id="middleware.sdmmc.common.MKV11Z7" name="sdmmc_common" brief="Middleware sdmmc common" version="2.3.0" full_name="SDMMC common stack" devices="MKV11Z128xxx7 MKV11Z64xxx7" category="Memories/SDMMC Stack" user_visible="false" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <source relative_path="common" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdmmc_spec.h"/>
        <files mask="fsl_sdmmc_common.h"/>
      </source>
      <source relative_path="common" project_relative_path="src" type="src">
        <files mask="fsl_sdmmc_common.c"/>
      </source>
      <include_paths>
        <include_path relative_path="common" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sdspi.MKV11Z7" name="sdspi" brief="Middleware sdmmc sdspi" version="2.2.1" full_name="SDMMC sdspi stack" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <component_dependency value="platform.drivers.dspi.MKV11Z7"/>
      </dependencies>
      <source relative_path="sdspi" project_relative_path="src" type="src">
        <files mask="fsl_sdspi.c"/>
      </source>
      <source relative_path="sdspi" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdspi.h"/>
      </source>
      <source relative_path="common" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdmmc_spec.h"/>
      </source>
      <source relative_path="sdspi" project_relative_path="./" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="sdspi" project_relative_path="inc" type="c_include"/>
        <include_path relative_path="common" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.MKV11Z7" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="MKV11Z128xxx7 MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utilities_misc_utilities_MKV11Z7.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MKV11Z7" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_MKV11Z7.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.MKV11Z7" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_lite_MKV11Z7.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.MKV11Z7" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MKV11Z7"/>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.MKV11Z7" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.uart_adapter.MKV11Z7"/>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_lite_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.notifier.MKV11Z7" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/devices/MKV11Z7/utilities" project_base_path="utilities/utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MKV11Z7"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_notifier_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.MKV11Z7" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" user_visible="true" type="utilities" package_base_path="core/devices/MKV11Z7/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MKV11Z7"/>
          <component_dependency value="component.lists.MKV11Z7"/>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_shell_MKV11Z7.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="project_template.frdmkv11z.MKV11Z7" name="frdmkv11z" brief="Board_project_template frdmkv11z" version="1.0.0" full_name="Board_project_template frdmkv11z" devices="MKV11Z128xxx7 MKV11Z64xxx7" device_cores="core0_MKV11Z128xxx7 core0_MKV11Z64xxx7" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/frdmkv11z/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MKV11Z7"/>
          <component_dependency value="platform.drivers.uart.MKV11Z7"/>
          <component_dependency value="component.uart_adapter.MKV11Z7"/>
          <component_dependency value="platform.drivers.port.MKV11Z7"/>
          <component_dependency value="platform.drivers.gpio.MKV11Z7"/>
          <component_dependency value="platform.drivers.smc.MKV11Z7"/>
          <component_dependency value="device.MKV11Z7_startup.MKV11Z7"/>
          <any_of>
            <all>
              <component_dependency value="utility.debug_console.MKV11Z7"/>
              <component_dependency value="component.serial_manager.MKV11Z7"/>
            </all>
            <component_dependency value="utility.debug_console_lite.MKV11Z7"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
