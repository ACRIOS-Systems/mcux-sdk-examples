<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_SUPER" name="SDKVersion 2.9.0 SuperSet" brief="This is SDK version 2.9.0 manifest file." format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-05-13 07:17:40.642645-->
  <!--This manifest is generated based on sdk repo commit: 242d157ba29afc4bbd1dac95f382a1491bc2daf5-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="lpcxpresso54s018m" name="LPCXpresso54S018M" href="https://www.nxp.com/pip/LPC54S018M-EVK" version="1.0.0" package="LPC54S018J4MET180">
      <description>LPCXpresso Development Board for LPC54S018JxM MCUs</description>
      <image path="core/boards/lpcxpresso54s018m" type="image">
        <files mask="lpcxpresso54s018m.png"/>
      </image>
      <defines>
        <define name="XIP_IMAGE" value=""/>
      </defines>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_lpcxpresso54s018m" name="PROGRAM_FLASH" addr="10000000" size="00400000" type="Flash" access="RO"/>
        <memoryBlock id="BOARD_SDRAM_lpcxpresso54s018m" name="BOARD_SDRAM" addr="a0000000" size="02000000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="4096" ram_size_kb="16384"/>
      <examples>
        <example id="lpcxpresso54s018m_aes" name="aes" brief="The AES Example project is a demonstration program that uses the KSDK software to encrypt plain textand decrypt it back using AES algorithm. CBC and GCM modes are demonstrated." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso54s018m/driver_examples/aes">
          <external path="examples/lpcxpresso54s018m/driver_examples/aes" type="xml">
            <files mask="aes_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso54s018m/driver_examples/crc">
          <external path="examples/lpcxpresso54s018m/driver_examples/crc" type="xml">
            <files mask="crc_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_ctimer_match_example" name="ctimer_match_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, the match feature of the CTimer is used to toggle the output level." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/lpcxpresso54s018m/driver_examples/ctimer/simple_match">
          <external path="examples/lpcxpresso54s018m/driver_examples/ctimer/simple_match" type="xml">
            <files mask="ctimer_match_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_ctimer_match_interrupt_example" name="ctimer_match_interrupt_example" brief="The Simple Match Interrupt project is to demonstrate usage of the SDK CTimer driver with interrupt callback functionsIn this example the upon match and IO pin connected to the LED is toggled and the timer is reset, so it would generate a square wave.With an interrupt callback the match value is changed frequently in such a way that the frequency of the output square wave is increased gradually." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/lpcxpresso54s018m/driver_examples/ctimer/simple_match_interrupt">
          <external path="examples/lpcxpresso54s018m/driver_examples/ctimer/simple_match_interrupt" type="xml">
            <files mask="ctimer_match_interrupt_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_ctimer_pwm_example" name="ctimer_pwm_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, CTimer is used to generate a PWM signal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/lpcxpresso54s018m/driver_examples/ctimer/simple_pwm">
          <external path="examples/lpcxpresso54s018m/driver_examples/ctimer/simple_pwm" type="xml">
            <files mask="ctimer_pwm_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_ctimer_pwm_interrupt_example" name="ctimer_pwm_interrupt_example" brief="The Simple PWM Interrupt project is to demonstrate usage of the SDK CTimer driver as a PWM with interrupt callback functionsIn this example an IO pin connected to the LED is used as a PWM output line to generate a PWM signal.With an interrupt callback the PWM duty cycle is changed frequently in such a way that the LED brightness can be varied." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/ctimer" path="examples/lpcxpresso54s018m/driver_examples/ctimer/simple_pwm_interrupt">
          <external path="examples/lpcxpresso54s018m/driver_examples/ctimer/simple_pwm_interrupt" type="xml">
            <files mask="ctimer_pwm_interrupt_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_dma_channel_chain" name="dma_channel_chain" brief="The DMA channel chain example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the DMA channel chain feature." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso54s018m/driver_examples/dma/channel_chain">
          <external path="examples/lpcxpresso54s018m/driver_examples/dma/channel_chain" type="xml">
            <files mask="dma_channel_chain_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_dma_interleave_transfer" name="dma_interleave_transfer" brief="The DMA interleave transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA interleave feature." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso54s018m/driver_examples/dma/interleave_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/dma/interleave_transfer" type="xml">
            <files mask="dma_interleave_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_dma_linked_transfer" name="dma_linked_transfer" brief="The DMA linked transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a linked trnasfer example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso54s018m/driver_examples/dma/linked_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/dma/linked_transfer" type="xml">
            <files mask="dma_linked_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_dma_m2m_polling" name="dma_m2m_polling" brief="The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot polling transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso54s018m/driver_examples/dma/m2m_polling">
          <external path="examples/lpcxpresso54s018m/driver_examples/dma/m2m_polling" type="xml">
            <files mask="dma_m2m_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_dma_memory_to_memory" name="dma_memory_to_memory" brief="The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example fordebugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso54s018m/driver_examples/dma/memory_to_memory">
          <external path="examples/lpcxpresso54s018m/driver_examples/dma/memory_to_memory" type="xml">
            <files mask="dma_memory_to_memory_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_dma_wrap_transfer" name="dma_wrap_transfer" brief="The DMA wrap transfer example is a simple demonstration program that uses the SDK software.It executes a wrap transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA wrap feature." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dma" path="examples/lpcxpresso54s018m/driver_examples/dma/wrap_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/dma/wrap_transfer" type="xml">
            <files mask="dma_wrap_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_dmic_dma" name="dmic_dma" brief="This example shows how to use DMA to transfer data from DMIC to memory." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/dmic" path="examples/lpcxpresso54s018m/driver_examples/dmic/dmic_dma">
          <external path="examples/lpcxpresso54s018m/driver_examples/dmic/dmic_dma" type="xml">
            <files mask="dmic_dma_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_emc_sdram" name="emc_sdram" brief="The emc_sdram example shows how to access the SDRAM.In this example, user shall initialize the EMC (external memory controller), initialize theEMC dynamic memory controller before access the external SDRAM.If the sdram example fails, please make sure to check the following points:1. Please take refer to the board.readme to check the jumper settings on your board.2. Please take refer to the EMC chapter in API RM to do the delay calibration to found the best delay for your board, then update the delay to the EMC clock delay control registers in the system configure module registers." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/emc" path="examples/lpcxpresso54s018m/driver_examples/emc/sdram">
          <external path="examples/lpcxpresso54s018m/driver_examples/emc/sdram" type="xml">
            <files mask="emc_sdram_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_enet_txrx_ptp1588_transfer" name="enet_txrx_ptp1588_transfer" brief="The enet_rxtx_ptp1588_transfer example shows the way to use ENET driver to   receive and transmit frame in the 1588 feature required cases.1. This example shows how to initialize the ENET.2. How to get the time stamp of the PTP 1588 timer.3. How to use Get the ENET transmit and receive frame time stamp.The example transmits 20 number PTP event frame, shows the timestamp of the transmitted frame.The length, source MAC address and destination MAC address of the received frame will be print. The time stamp of the received timestamp will be print when the PTP message frame is received(the outside loopback cable can be used to see the right rx time-stamping log since we send the ptp message). " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/enet" path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_ptp1588_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_ptp1588_transfer" type="xml">
            <files mask="enet_txrx_ptp1588_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_enet_txrx_rxinterrupt" name="enet_txrx_rxinterrupt" brief="The enet_rxtx_rxinterrupt example shows the simplest way to use ENET functional tx/rx API for simple frame receive and transmit.1. This example shows how to initialize the ENET.2. How to use ENET to receive frame in interrupt irq handler and to transmit frame.The example transmits 20 number broadcast frame, print the number of recieved frames. To avoidthe receive number overflow, the transmit/receive loop with automatically break when 20 numberare received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/enet" path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_rxinterrupt">
          <external path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_rxinterrupt" type="xml">
            <files mask="enet_txrx_rxinterrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_enet_txrx_rxpoll" name="enet_txrx_rxpoll" brief="The enet_rxtx_rxinterrupt example shows the simplest way to use ENET functional tx/rx API for simple frame receive and transmit.1. This example shows how to initialize the ENET.2. How to use ENET to receive frame in polling and to transmit frame.The example transmits 20 number broadcast frame, print the number and the mac address of the recieved frames." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/enet" path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_rxpoll">
          <external path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_rxpoll" type="xml">
            <files mask="enet_txrx_rxpoll_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_enet_txrx_transfer_rxinterrupt" name="enet_txrx_transfer_rxinterrupt" brief="The enet_rxtx_rxinterrupt example shows the simplest way to use ENET transactional tx/rx API for simple frame receive and transmit.1. This example shows how to initialize the ENET.2. How to use ENET to receive frame in interrupt irq handler and to transmit frame.The example transmits 20 number broadcast frame, print the number of recieved frames. To avoidthe receive number overflow, the transmit/receive loop with automatically break when 20 numberare received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/enet" path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_transfer_rxinterrupt">
          <external path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_transfer_rxinterrupt" type="xml">
            <files mask="enet_txrx_transfer_rxinterrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_enet_txrx_transfer_rxpoll" name="enet_txrx_transfer_rxpoll" brief="The enet_rxtx_rxinterrupt example shows the simplest way to use ENET transactional tx/rx API for simple frame receive and transmit.1. This example shows how to initialize the ENET.2. How to use ENET to receive frame in polling and to transmit frame.The example transmits 20 number broadcast frame, print the number and the mac address of the recieved frames." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/enet" path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_transfer_rxpoll">
          <external path="examples/lpcxpresso54s018m/driver_examples/enet/txrx_transfer_rxpoll" type="xml">
            <files mask="enet_txrx_transfer_rxpoll_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_fmeas" name="fmeas" brief="This example shows how to use SDK drivers to use the Frequency Measure feature of SYSCON module on LPC devices.It shows how to measure a target frequency using a (faster) reference frequency. The example uses the internal main clock as the reference frequency to measure the frequencies of the RTC, watchdog oscillator, and internal RC oscillator." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso54s018m/driver_examples/fmeas">
          <external path="examples/lpcxpresso54s018m/driver_examples/fmeas" type="xml">
            <files mask="fmeas_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_event" name="freertos_event" brief="This document explains the freertos_event example. It shows how task waits for an event (defined setof bits in event group). This event can be set by any other process or interrupt in the system.The example application creates three tasks. Two write tasks write_task_1 and write_task_2continuously setting event bit 0 and bit 1.Read_task is waiting for any event bit and printing actual state on console. Event bits areautomatically cleared after read task is entered.Three possible states can occurre:Both bits are set.zBit B0 is set.Bit B1 is set." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_event">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_event" type="xml">
            <files mask="freertos_event_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_generic" name="freertos_generic" brief="This document explains the freertos_generic example. It is based on code FreeRTOS documentation fromhttp://www.freertos.org/Hardware-independent-RTOS-example.html. It shows combination of severaltasks with queue, software timer, tick hook and semaphore.The example application creates three tasks. The prvQueueSendTask periodically sending data toxQueue queue. The prvQueueReceiveTask is waiting for incoming message and counting number ofreceived messages. Task prvEventSemaphoreTask is waiting for xEventSemaphore semaphore given fromvApplicationTickHook. Tick hook give semaphore every 500 ms.Other hook types used for RTOS and resource statistics are also demonstrated in example:* vApplicationIdleHook* vApplicationStackOverflowHook* vApplicationMallocFailedHook" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_generic">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_generic" type="xml">
            <files mask="freertos_generic_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_hello" name="freertos_hello" brief="The Hello World project is a simple demonstration program that uses the SDK UART drivere incombination with FreeRTOS. The purpose of this demo is to show how to use the debug console and toprovide a simple project for debugging and further development.The example application creates one task called hello_task. This task print &quot;Hello world.&quot; messagevia debug console utility and suspend itself." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_hello">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_hello" type="xml">
            <files mask="freertos_hello_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_i2c" name="freertos_i2c" brief="The freertos_i2c example shows an application using RTOS tasks with I2C driver:The example supports 2 different connections:On board connection and board to board connection.With one board connection, 2 I2C instances of the same board are used. One i2c instance used as I2C master and another I2C instance used as I2C slave .    Default settings in freertos_i2c.c (in folder boards/&lt;board&gt;/rtos_examples/freertos_i2c) is applied.    Two tasks are created. One task is associated with an I2C master operation and another task deals with I2C slave operation.    1. I2C master task sends data to I2C slave task.    2. I2C master task reads data sent back from I2C slave task.    The transmit data and the receive data of both I2C master task and I2C slave task are printed out on terminal.With board to board connection, one I2C instance on one board is used as I2C master and the I2C instance on other board is used as I2C slave. Tasks are created to run on each board to handle I2C communication.    File freertos_i2c.c should have following definitions:    #define EXAMPLE_CONNECT_I2C BOARD_TO_BOARD    For board used as I2C master:        #define I2C_MASTER_SLAVE isMASTER    For board used as I2C slave:        #define I2C_MASTER_SLAVE isSLAVE" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_i2c">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_i2c" type="xml">
            <files mask="freertos_i2c_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_mutex" name="freertos_mutex" brief="This document explains the freertos_mutex example. It shows how mutex manage access to commonresource (terminal output).The example application creates two identical instances of write_task. Each task will lock the mutexbefore printing and unlock it after printing to ensure that the outputs from tasks are not mixedtogether.The test_task accept output message during creation as function parameter. Output message have twoparts. If xMutex is unlocked, the write_task_1 acquire xMutex and print first part of message. Thenrescheduling is performed. In this moment scheduler check if some other task could run, but secondtask write_task+_2 is blocked because xMutex is already locked by first write task. The firstwrite_task_1 continue from last point by printing of second message part. Finaly the xMutex isunlocked and second instance of write_task_2 is executed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_mutex">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_mutex" type="xml">
            <files mask="freertos_mutex_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_queue" name="freertos_queue" brief="This document explains the freertos_queue example. This example introduce simple logging mechanismbased on message passing.Example could be devided in two parts. First part is logger. It contain three tasks:log_add().....Add new message into the log. Call xQueueSend function to pass new message into              message queue.log_init()....Initialize logger (create logging task and message queue log_queue).log_task()....Task responsible for printing of log output.Second part is application of this simple logging mechanism. Each of two tasks write_task_1 andwrite_task_2 print 5 messages into log." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_queue">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_queue" type="xml">
            <files mask="freertos_queue_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_sem" name="freertos_sem" brief="This document explains the freertos_sem example, what to expect when running it and a briefintroduction to the API. The freertos_sem example code shows how semaphores works. Two differenttasks are synchronized in bilateral rendezvous model.The example uses four tasks. One producer_task and three consumer_tasks. The producer_task starts bycreating of two semaphores (xSemaphore_producer and xSemaphore_consumer). These semaphores controlaccess to virtual item. The synchronization is based on bilateral rendezvous pattern. Both ofconsumer and producer must be prepared to enable transaction." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_sem">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_sem" type="xml">
            <files mask="freertos_sem_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_spi" name="freertos_spi" brief="The freertos_spi example shows how to use SPI driver in FreeRTOS:In this example , one spi instance is used as SPI master with blocking and another spi instance is used as SPI slave.1. SPI master sends/receives data using task blocking calls to/from SPI slave. (SPI Slave uses interrupt to receive/sendthe data)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_spi">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_spi" type="xml">
            <files mask="freertos_spi_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_swtimer" name="freertos_swtimer" brief="This document explains the freertos_swtimer example. It shows usage of software timer and itscallback.The example application creates one software timer SwTimer. The timer’s callback SwTimerCallback isperiodically executed and text “Tick.” is printed to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_swtimer">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_swtimer" type="xml">
            <files mask="freertos_swtimer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_tickless" name="freertos_tickless" brief="This document explains the freertos_tickless example. It shows the CPU enter at sleep mode and then&#10;it is waked up by expired time delay that using RTC module or occur any a hardware interrupt.&#10;&#10;" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_tickless">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_tickless" type="xml">
            <files mask="freertos_tickless_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_freertos_usart" name="freertos_usart" brief="The USART example for FreeRTOS demonstrates the possibility to use the USART driver in the RTOS.The example uses single instance of USART IP and writes string into, then reads back chars.After every 4B received, these are sent back on USART." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="rtos_examples" path="examples/lpcxpresso54s018m/rtos_examples/freertos_usart">
          <external path="examples/lpcxpresso54s018m/rtos_examples/freertos_usart" type="xml">
            <files mask="freertos_usart_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_gint" name="gint" brief="This example shows how to use SDK drivers to use the Group GPIO input interrupt peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso54s018m/driver_examples/gint">
          <external path="examples/lpcxpresso54s018m/driver_examples/gint" type="xml">
            <files mask="gint_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs. The example use LEDs and buttons to demonstrates GPIO API for port and pin manipulation (init, set,clear, and toggle)." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/lpcxpresso54s018m/driver_examples/gpio/led_output">
          <external path="examples/lpcxpresso54s018m/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_hello_world" name="hello_world" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso54s018m/demo_apps/hello_world">
          <external path="examples/lpcxpresso54s018m/demo_apps/hello_world" type="xml">
            <files mask="hello_world_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_hello_world_qspi_xip" name="hello_world_qspi_xip" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso54s018m/demo_apps/hello_world_qspi_xip">
          <external path="examples/lpcxpresso54s018m/demo_apps/hello_world_qspi_xip" type="xml">
            <files mask="hello_world_qspi_xip_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2c_dma_b2b_transfer_master" name="i2c_dma_b2b_transfer_master" brief="The i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso54s018m/driver_examples/i2c/dma_b2b_transfer/master">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2c/dma_b2b_transfer/master" type="xml">
            <files mask="i2c_dma_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2c_dma_b2b_transfer_slave" name="i2c_dma_b2b_transfer_slave" brief="The i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso54s018m/driver_examples/i2c/dma_b2b_transfer/slave">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2c/dma_b2b_transfer/slave" type="xml">
            <files mask="i2c_dma_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso54s018m/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso54s018m/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2c_polling_b2b_master" name="i2c_polling_b2b_master" brief="The i2c_polling_b2b_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso54s018m/driver_examples/i2c/polling_b2b/master">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2c/polling_b2b/master" type="xml">
            <files mask="i2c_polling_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2c_polling_b2b_slave" name="i2c_polling_b2b_slave" brief="The i2c_polling_b2b_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2c" path="examples/lpcxpresso54s018m/driver_examples/i2c/polling_b2b/slave">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2c/polling_b2b/slave" type="xml">
            <files mask="i2c_polling_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2s_dma_record_playback" name="i2s_dma_record_playback" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2s" path="examples/lpcxpresso54s018m/driver_examples/i2s/dma_record_playback">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2s/dma_record_playback" type="xml">
            <files mask="i2s_dma_record_playback_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2s_dma_transfer" name="i2s_dma_transfer" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2s" path="examples/lpcxpresso54s018m/driver_examples/i2s/dma_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2s/dma_transfer" type="xml">
            <files mask="i2s_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2s_interrupt_record_playback" name="i2s_interrupt_record_playback" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2s" path="examples/lpcxpresso54s018m/driver_examples/i2s/interrupt_record_playback">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2s/interrupt_record_playback" type="xml">
            <files mask="i2s_interrupt_record_playback_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_i2s_interrupt_transfer" name="i2s_interrupt_transfer" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/i2s" path="examples/lpcxpresso54s018m/driver_examples/i2s/interrupt_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/i2s/interrupt_transfer" type="xml">
            <files mask="i2s_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_iap_basic" name="iap_basic" brief="The IAP project is a simple demonstration program of the SDK IAP driver. It reads part id, boot code version, unique id and reinvoke ISP. A message a printed on the UART terminal as various bascial iap operations are performed." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso54s018m/driver_examples/iap/iap_basic">
          <external path="examples/lpcxpresso54s018m/driver_examples/iap/iap_basic" type="xml">
            <files mask="iap_basic_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_lcdc_cursor" name="lcdc_cursor" brief="The lcdc_cursor example shows how to use LCD hardware cursor.In this example, a 32x32 cursor is shown. The cursor's position is changed atthe end of every frame.The background is:+------------------------------------------------++                                                ++                    Red                         ++                                                ++            +--------------------+              ++            +                    +              ++            +      Blank         +              ++            +                    +              ++            +--------------------+              ++                                                ++                                                ++                                                ++------------------------------------------------+" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdc" path="examples/lpcxpresso54s018m/driver_examples/lcdc/lcdc_cursor">
          <external path="examples/lpcxpresso54s018m/driver_examples/lcdc/lcdc_cursor" type="xml">
            <files mask="lcdc_cursor_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_lcdc_tft" name="lcdc_tft" brief="The lcdc_tft example shows how to use LCD driver to drive TFT panel.In this example, the cursor palette is used. A rectangle is shown in the panel,its color and position are changed every frame." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/lcdc" path="examples/lpcxpresso54s018m/driver_examples/lcdc/lcdc_tft">
          <external path="examples/lpcxpresso54s018m/driver_examples/lcdc/lcdc_tft" type="xml">
            <files mask="lcdc_tft_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_led_blinky" name="led_blinky" brief="The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso54s018m/demo_apps/led_blinky">
          <external path="examples/lpcxpresso54s018m/demo_apps/led_blinky" type="xml">
            <files mask="led_blinky_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_lpc_adc_basic" name="lpc_adc_basic" brief="The lpc_adc_basic example shows how to use LPC ADC driver in the simplest way.In this example, the internal temperature sensor is used to created the input analog signal. When user type in any key from the keyboard, the software trigger API is called to start the conversion. Then it polls the conversion sequence A's flag till the conversion is completed. When the conversion is completed, just print the conversion result to terminal.Project Information1.what are ADC conversion sequences?  A conversion sequence is a single pass through a series of A/D conversions performed on a selected set of  A/D channels. Software can set-up two independent conversion sequences, either of which can be triggered   by software or by a transition on one of the hardware triggers. Each sequence can be triggered by a different   hardware trigger. One of these conversion sequences is referred to as the A sequence and the other as the B  sequence. It is not necessary to employ both sequences. An optional single-step mode allows advancing through  the channels of a sequence one at a time on each successive occurrence of a trigger. The user can select whether  a trigger on the B sequence can interrupt an already-in-progress A sequence. The B sequence, however, can never be  interrupted by an A trigger.  2. How to use software-triggered conversion?   There are two ways that software can trigger a conversion sequence:      1. Start Bit: The first way to software-trigger an sequence is by setting the START bit in         the corresponding SEQn_CTRL register. The response to this is identical to         occurrence of a hardware trigger on that sequence. Specifically, one cycle of         conversions through that conversion sequence will be immediately triggered except         as indicated above. (In this example, we use this way.)      2. Burst Mode: The other way to initiate conversions is to set the BURST bit in the         SEQn_CTRL register. As long as this bit is 1 the designated conversion sequence will         be continuously and repetitively cycled through. Any new software or hardware trigger         on this sequence will be ignored.  Program Flow1.This example demonstrates how to configure the A sequences with polling, assigning one channel with software  trigger, you can configure channel via &quot;DEMO_ADC_SAMPLE_CHANNEL_NUMBER&quot;.  2.Before configuration of the ADC begins, the ADC is put through a self-calibration cycle.    3.After ADC channels are assigned to each of the sequences, the software trigger is chosen. Setting   SEQA_CTRL_START to '1' will trigger sequence A.  4.After ADC channels are assigned to each of the sequences, if the user enters any key via terminal, software trigger will start. 5.Read the corresponding DATAVALID field with polling to judge whether the conversion completes and the result is ready.  If the result is ready, the example will printf result information to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc" path="examples/lpcxpresso54s018m/driver_examples/adc/lpc_adc_basic">
          <external path="examples/lpcxpresso54s018m/driver_examples/adc/lpc_adc_basic" type="xml">
            <files mask="lpc_adc_basic_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_lpc_adc_burst" name="lpc_adc_burst" brief="The lpc_adc_burst example shows how to use LPC ADC driver with the burst mode.In this example, the internal temperature sensor is used to created the input analog signal.When user type in any key from the keyboard, the burst mode is enabled. Then the conversion sequence A would be started automatically, till the burst would be disabled in conversion completed ISR. Project Information1.what are ADC conversion sequences?  A conversion sequence is a single pass through a series of A/D conversions performed on a selected set of  A/D channels. Software can set-up two independent conversion sequences, either of which can be triggered   by software or by a transition on one of the hardware triggers. Each sequence can be triggered by a different   hardware trigger. One of these conversion sequences is referred to as the A sequence and the other as the B  sequence. It is not necessary to employ both sequences. An optional single-step mode allows advancing through  the channels of a sequence one at a time on each successive occurrence of a trigger. The user can select whether  a trigger on the B sequence can interrupt an already-in-progress A sequence. The B sequence, however, can never be  interrupted by an A trigger.  2. How to use software-triggered conversion?   There are two ways that software can trigger a conversion sequence:      1. Start Bit: The first way to software-trigger an sequence is by setting the START bit in         the corresponding SEQn_CTRL register. The response to this is identical to         occurrence of a hardware trigger on that sequence. Specifically, one cycle of         conversions through that conversion sequence will be immediately triggered except         as indicated above.       2. Burst Mode: The other way to initiate conversions is to set the BURST bit in the         SEQn_CTRL register. As long as this bit is 1 the designated conversion sequence will         be continuously and repetitively cycled through. Any new software or hardware trigger         on this sequence will be ignored. (In this example, we use this way.)         3. What kinds of interrupt do ADC have?   There are four interrupts that can be generated by the ADC:     • Conversion-Complete or Sequence-Complete interrupts for sequences A and B     • Threshold-Compare Out-of-Range Interrupt     • Data Overrun Interrupt   Any of these interrupt requests may be individually enabled or disabled in the INTEN register.  Program Flow1.This example demonstrates how to configure the A sequences with burst mode, you can configure channel via   &quot;DEMO_ADC_SAMPLE_CHANNEL_NUMBER&quot;.  2.Before configuration of the ADC begins, the ADC is put through a self-calibration cycle.  3.Enable the Conversion-Complete or Sequence-Complete interrupt for sequences A.  4.After ADC channels are assigned to each of the sequences, if the user enters any key via terminal, burst mode will start.    5.When the first conversion completes, the interrupt would be triggered. The ISR will stop the burst mode and print conversion result   to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc" path="examples/lpcxpresso54s018m/driver_examples/adc/lpc_adc_burst">
          <external path="examples/lpcxpresso54s018m/driver_examples/adc/lpc_adc_burst" type="xml">
            <files mask="lpc_adc_burst_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_lpc_adc_dma" name="lpc_adc_dma" brief="The lpc_adc_dma example shows how to use LPC ADC driver with DMA.In this example, the internal temperature sensor is used to created the input analog signal. When user type in any key from the keyboard, the software trigger API is called to start the conversion. When the ADC conversion is completed, it would trigger the DMA to move the ADC conversion result from ADC conversion data register to user indicated memory. Then the main loop waits for the transfer to be done and print the result to terminal.Project Information1.what are ADC conversion sequences?  A conversion sequence is a single pass through a series of A/D conversions performed on a selected set of  A/D channels. Software can set-up two independent conversion sequences, either of which can be triggered   by software or by a transition on one of the hardware triggers. Each sequence can be triggered by a different   hardware trigger. One of these conversion sequences is referred to as the A sequence and the other as the B  sequence. It is not necessary to employ both sequences. An optional single-step mode allows advancing through  the channels of a sequence one at a time on each successive occurrence of a trigger. The user can select whether  a trigger on the B sequence can interrupt an already-in-progress A sequence. The B sequence, however, can never be  interrupted by an A trigger.  2. How to use software-triggered conversion?   There are two ways that software can trigger a conversion sequence:      1. Start Bit: The first way to software-trigger an sequence is by setting the START bit in         the corresponding SEQn_CTRL register. The response to this is identical to         occurrence of a hardware trigger on that sequence. Specifically, one cycle of         conversions through that conversion sequence will be immediately triggered except         as indicated above. (In this example, we use this way.)      2. Burst Mode: The other way to initiate conversions is to set the BURST bit in the         SEQn_CTRL register. As long as this bit is 1 the designated conversion sequence will         be continuously and repetitively cycled through. Any new software or hardware trigger         on this sequence will be ignored.          3. How to use DMA to work with ADC?   The sequence-A or sequence-B conversion/sequence-complete interrupts may also be   used to generate a DMA trigger. To trigger a DMA transfer, the same conditions must be   met as the conditions for generating an interrupt.   Remark: If the DMA is used, the ADC interrupt must be disabled in the NVIC.   Program Flow1.This example demonstrates how to configure the A sequences with interrupt, assigning one channel with software  trigger, you can configure channel via &quot;DEMO_ADC_SAMPLE_CHANNEL_NUMBER&quot;.  2.Before configuration of the ADC begins, the ADC is put through a self-calibration cycle.  3.Configure the DMA and DMAMUX to work with ADC sequences.4.Enable the Conversion-Complete or Sequence-Complete DMA for sequences A.  5.After ADC channels are assigned to each of the sequences, if the user enters any key via terminal, software trigger will start.    6.When the conversion completes, the DMA would be requested.7.When the DMA transfer completes, DMA will trigger a interrupt. ISR would set the &quot;bDmaTransferDone&quot; to 'true'. Then main function will   print conversion result to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc" path="examples/lpcxpresso54s018m/driver_examples/adc/lpc_adc_dma">
          <external path="examples/lpcxpresso54s018m/driver_examples/adc/lpc_adc_dma" type="xml">
            <files mask="lpc_adc_dma_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_lpc_adc_interrupt" name="lpc_adc_interrupt" brief="The lpc_adc_interrupt example shows how to use interrupt with LPC ADC driver.In this example, the internal temperature sensor is used to created the input analog signal. When user type in any key from the keyboard, the software trigger API is called to start the conversion. Then it polls the flag variable which would be asserted when the conversion completed ISR is executed. Then just print the conversion result to terminal.Project Information1.what are ADC conversion sequences?  A conversion sequence is a single pass through a series of A/D conversions performed on a selected set of  A/D channels. Software can set-up two independent conversion sequences, either of which can be triggered   by software or by a transition on one of the hardware triggers. Each sequence can be triggered by a different   hardware trigger. One of these conversion sequences is referred to as the A sequence and the other as the B  sequence. It is not necessary to employ both sequences. An optional single-step mode allows advancing through  the channels of a sequence one at a time on each successive occurrence of a trigger. The user can select whether  a trigger on the B sequence can interrupt an already-in-progress A sequence. The B sequence, however, can never be  interrupted by an A trigger.  2. How to use software-triggered conversion?   There are two ways that software can trigger a conversion sequence:      1. Start Bit: The first way to software-trigger an sequence is by setting the START bit in         the corresponding SEQn_CTRL register. The response to this is identical to         occurrence of a hardware trigger on that sequence. Specifically, one cycle of         conversions through that conversion sequence will be immediately triggered except         as indicated above. (In this example, we use this way.)      2. Burst Mode: The other way to initiate conversions is to set the BURST bit in the         SEQn_CTRL register. As long as this bit is 1 the designated conversion sequence will         be continuously and repetitively cycled through. Any new software or hardware trigger         on this sequence will be ignored.          3. What kinds of interrupt do ADC have?   There are four interrupts that can be generated by the ADC:     • Conversion-Complete or Sequence-Complete interrupts for sequences A and B     • Threshold-Compare Out-of-Range Interrupt     • Data Overrun Interrupt   Any of these interrupt requests may be individually enabled or disabled in the INTEN register.  Program Flow1.This example demonstrates how to configure the A sequences with interrupt, assigning one channel with software  trigger, you can configure channel via &quot;DEMO_ADC_SAMPLE_CHANNEL_NUMBER&quot;.  2.Before configuration of the ADC begins, the ADC is put through a self-calibration cycle.  3.Enable the Conversion-Complete or Sequence-Complete interrupt for sequences A.  4.After ADC channels are assigned to each of the sequences, if the user enters any key via terminal, software trigger will start.    5.When the conversion completes, the interrupt would be triggered. The ISR will print conversion result to terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/adc" path="examples/lpcxpresso54s018m/driver_examples/adc/lpc_adc_interrupt">
          <external path="examples/lpcxpresso54s018m/driver_examples/adc/lpc_adc_interrupt" type="xml">
            <files mask="lpc_adc_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_mcan_interrupt_transfer" name="mcan_interrupt_transfer" brief="The mcan_interrupt example shows how to use MCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when users press space key in terminal. Endpoint B receives the message, printsthe message content to terminal and echoes back the message. Endpoint A will increase the receivedmessage and wait for the next transmission the users initiate." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mcan" path="examples/lpcxpresso54s018m/driver_examples/mcan/interrupt_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/mcan/interrupt_transfer" type="xml">
            <files mask="mcan_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_mcan_loopback" name="mcan_loopback" brief="The mcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrate this example, only one board is needed. The example will config Tx Buffer to sendand Rx Fifo to receive. After that, the example will send a CAN Message throuth internal loopbackinterconnect and print out the Message payload to the terminal." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mcan" path="examples/lpcxpresso54s018m/driver_examples/mcan/loopback">
          <external path="examples/lpcxpresso54s018m/driver_examples/mcan/loopback" type="xml">
            <files mask="mcan_loopback_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_mmccard_freertos" name="mmccard_freertos" brief="The MMCCARD FreeRTOS project is a demonstration program that uses the SDK software. It reads/writes/erases the MMC card continusly. The purpose of this example is to show how to use MMCCARD driverwith FreeRTOS in SDK software to access MMC card.Note:User can use MMC plus card or emmc(on board IC, but not recommand use emmc socket,due to high speed timing restriction)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/mmccard_freertos" path="examples/lpcxpresso54s018m/sdmmc_examples/mmccard_freertos">
          <external path="examples/lpcxpresso54s018m/sdmmc_examples/mmccard_freertos" type="xml">
            <files mask="mmccard_freertos_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_mmccard_interrupt" name="mmccard_interrupt" brief="The MMCCARD Interrupt project is a demonstration program that uses the SDK software. It reads/writes/erases the MMC card continusly. The purpose of this example is to show how to use MMCCARD driver andshow how to use interrupt based transfer API in SDK software driver to access MMC card.Note:User can use MMC plus card or emmc(on board IC, but not recommand use emmc socket,due to high speed timing restriction)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/mmccard" path="examples/lpcxpresso54s018m/sdmmc_examples/mmccard_interrupt">
          <external path="examples/lpcxpresso54s018m/sdmmc_examples/mmccard_interrupt" type="xml">
            <files mask="mmccard_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_mmccard_polling" name="mmccard_polling" brief="The MMCCARD Polling project is a demonstration program that uses the SDK software. It reads/writes/erases the MMC card continusly. The purpose of this example is to show how to use MMCCARD driver andshow how to use polling based transfer API in SDK software driver to access MMC card.Note:User can use MMC plus card or emmc(on board IC, but not recommand use emmc socket,due to high speed timing restriction)" toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/mmccard" path="examples/lpcxpresso54s018m/sdmmc_examples/mmccard_polling">
          <external path="examples/lpcxpresso54s018m/sdmmc_examples/mmccard_polling" type="xml">
            <files mask="mmccard_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_mrt_example" name="mrt_example" brief="The MRT project is a simple demonstration program of the SDK MRT driver. It sets up the MRThardware block to trigger a periodic interrupt after every 250 milliseconds. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/mrt" path="examples/lpcxpresso54s018m/driver_examples/mrt">
          <external path="examples/lpcxpresso54s018m/driver_examples/mrt" type="xml">
            <files mask="mrt_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_otp" name="otp" brief="The OTP example project is a demonstration program that uses the KSDK software to access OTP ROM API.It just prints the version of API at the moment." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso54s018m/driver_examples/otp">
          <external path="examples/lpcxpresso54s018m/driver_examples/otp" type="xml">
            <files mask="otp_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_pint_pattern_match" name="pint_pattern_match" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pint" path="examples/lpcxpresso54s018m/driver_examples/pint/pattern_match">
          <external path="examples/lpcxpresso54s018m/driver_examples/pint/pattern_match" type="xml">
            <files mask="pint_pattern_match_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_pint_pin_interrupt" name="pint_pin_interrupt" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/pint" path="examples/lpcxpresso54s018m/driver_examples/pint/pin_interrupt">
          <external path="examples/lpcxpresso54s018m/driver_examples/pint/pin_interrupt" type="xml">
            <files mask="pint_pin_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_power_manager_lpc_xip" name="power_manager_lpc_xip" brief="The power_manager_lpc application shows the usage of normal power mode control APIs for entering the three kinds of low power mode: Sleep mode, Deep Sleep mode and Sleep Power Down mode. When the application runs to each low power mode, the device would cut off the power for specific modules to save energy. The device can be also waken up by prepared wakeup source from external event.&#10;Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions. 鈥?Configure all pins as GPIO with pull-up resistor disabled in the IOCON block. 鈥?Configure GPIO pins as outputs using the GPIO DIR register. 鈥?Write 1 to the GPIO CLR register to drive the outputs LOW. 鈥?All peripherals disabled." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso54s018m/demo_apps/power_manager_lpc_xip">
          <external path="examples/lpcxpresso54s018m/demo_apps/power_manager_lpc_xip" type="xml">
            <files mask="power_manager_lpc_xip_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_puf" name="puf" brief="This driver example project demonstrates how to use driver for the PUF controller which provides a secure key storage." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/puf" path="examples/lpcxpresso54s018m/driver_examples/puf">
          <external path="examples/lpcxpresso54s018m/driver_examples/puf" type="xml">
            <files mask="puf_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_rit_example" name="rit_example" brief="The RIT project is a simple demonstration program of the SDK RIT driver. It sets up the RIThardware block to trigger a periodic interrupt at 1 second period interval to toggel a specifiedLED on board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/rit" path="examples/lpcxpresso54s018m/driver_examples/rit">
          <external path="examples/lpcxpresso54s018m/driver_examples/rit" type="xml">
            <files mask="rit_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_rng_random" name="rng_random" brief="The RNG example project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal. 32 32-bit numbers are read and skipped per one 32-bit number read and used.This is to get a better entropy as suggested by user manual." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/rng" path="examples/lpcxpresso54s018m/driver_examples/rng/random">
          <external path="examples/lpcxpresso54s018m/driver_examples/rng/random" type="xml">
            <files mask="rng_random_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_rtc_example" name="rtc_example" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/rtc" path="examples/lpcxpresso54s018m/driver_examples/rtc">
          <external path="examples/lpcxpresso54s018m/driver_examples/rtc" type="xml">
            <files mask="rtc_example_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_sctimer_16bit_counter" name="sctimer_16bit_counter" brief="The SCTimer 16-bit counter project is a demonstration program of the SDK SCTimer driver operation when using the SCTimer counteras two 16-bit counters.The example toggles an output per counter when a match occurs." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/lpcxpresso54s018m/driver_examples/sctimer/16bit_counter">
          <external path="examples/lpcxpresso54s018m/driver_examples/sctimer/16bit_counter" type="xml">
            <files mask="sctimer_16bit_counter_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_sctimer_multi_state_pwm" name="sctimer_multi_state_pwm" brief="The SCTImer multi-state project is a demonstration program of the SCTimer state machine. It shows how to set up events to be triggered in a certain stateand transitioning between states.State 0 has 2 events that generate a PWM signal, it also has an event linked to an input signal to transition to State 1.State 1 has 4 events that generate 2 PWM signals, it also has an event linked to an input signal to transition to State 0." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/lpcxpresso54s018m/driver_examples/sctimer/multi_state_pwm">
          <external path="examples/lpcxpresso54s018m/driver_examples/sctimer/multi_state_pwm" type="xml">
            <files mask="sctimer_multi_state_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_sctimer_pwm_with_dutycyle_change" name="sctimer_pwm_with_dutycyle_change" brief="This SCTIMer project is a demonstration program of the SDK SCTimer driver's PWM generation. It sets up a PWM signaland periodically updates the PWM signals dutycycle." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/lpcxpresso54s018m/driver_examples/sctimer/pwm_with_dutycyle_change">
          <external path="examples/lpcxpresso54s018m/driver_examples/sctimer/pwm_with_dutycyle_change" type="xml">
            <files mask="sctimer_pwm_with_dutycyle_change_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_sctimer_simple_pwm" name="sctimer_simple_pwm" brief="The SCTimer project is a simple demonstration program of the SDK SCTimer's driver capabiltiy to generate PWM signals." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/sctimer" path="examples/lpcxpresso54s018m/driver_examples/sctimer/simple_pwm">
          <external path="examples/lpcxpresso54s018m/driver_examples/sctimer/simple_pwm" type="xml">
            <files mask="sctimer_simple_pwm_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_sdcard_interrupt" name="sdcard_interrupt" brief="The SDCARD Interrupt project is a demonstration program that uses the SDK software. It reads/writes/erases the SD card continusly. The purpose of this example is to show how to use SDCARD driver andshow how to use interrupt based transfer API in SDHC driver in SDK software to access SD card.Note: If DATA3 is used as the card detect PIN, please make sure DATA3 is pull down, no matter internal or external, at the same time, make sure the card can pull DATA3 up, then host can detect card through DATA3.And SDHC do not support detect card through CD by host, card can be detected through DATA3 or GPIO.No matter detect card through host or gpio, make sure the pinmux configuration is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/sdcard_interrupt" path="examples/lpcxpresso54s018m/sdmmc_examples/sdcard_interrupt">
          <external path="examples/lpcxpresso54s018m/sdmmc_examples/sdcard_interrupt" type="xml">
            <files mask="sdcard_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_sdcard_polling" name="sdcard_polling" brief="The SDCARD Polling project is a demonstration program that uses the SDK software. It reads/writes/erases the SD card continusly. The purpose of this example is to show how to use SDCARD driver andshow how to use polling based transfer API in SDHC driver in SDK software to access SD card.Note: If DATA3 is used as the card detect PIN, please make sure DATA3 is pull down, no matter internal or external, at the same time, make sure the card can pull DATA3 up, then host can detect card through DATA3.And SDHC do not support detect card through CD by host, card can be detected through DATA3 or GPIO.No matter detect card through host or gpio, make sure the pinmux configuration is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples/sdcard_polling" path="examples/lpcxpresso54s018m/sdmmc_examples/sdcard_polling">
          <external path="examples/lpcxpresso54s018m/sdmmc_examples/sdcard_polling" type="xml">
            <files mask="sdcard_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_sdio" name="sdio" brief="The SDIO project is a demonstration program that uses the SDK software. It reads/writes the SDIO card reigister. The purpose of this example is to show how to use SDio driver and this is a very simple example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="sdmmc_examples" path="examples/lpcxpresso54s018m/sdmmc_examples/sdio">
          <external path="examples/lpcxpresso54s018m/sdmmc_examples/sdio" type="xml">
            <files mask="sdio_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_sha" name="sha" brief="The SHA Example project is a demonstration program that uses the KSDK software to generate SHA checksums." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples" path="examples/lpcxpresso54s018m/driver_examples/sha">
          <external path="examples/lpcxpresso54s018m/driver_examples/sha" type="xml">
            <files mask="sha_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso54s018m/demo_apps/shell">
          <external path="examples/lpcxpresso54s018m/demo_apps/shell" type="xml">
            <files mask="shell_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_dma_transfer" name="spi_dma_transfer" brief="The spi_dma example shows how to use spi driver with DMA:In this example, one spi instance as master and another spi instance as slave. Master sends a piece of data to slave,and check if the data slave received is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/dma_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/dma_transfer" type="xml">
            <files mask="spi_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_half_duplex_dma_master" name="spi_half_duplex_dma_master" brief="The spi_half_duplex_dma_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.Besides, master will transfer data in DMA way. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/dma/master">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/dma/master" type="xml">
            <files mask="spi_half_duplex_dma_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_half_duplex_dma_slave" name="spi_half_duplex_dma_slave" brief="The spi_half_duplex_dma transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses dma mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/dma/slave">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/dma/slave" type="xml">
            <files mask="spi_half_duplex_dma_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_half_duplex_int_master" name="spi_half_duplex_int_master" brief="The spi_half_duplex_int_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.Besides, master will transfer data in interrupt way. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/int/master">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/int/master" type="xml">
            <files mask="spi_half_duplex_int_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_half_duplex_int_slave" name="spi_half_duplex_int_slave" brief="The spi_half_duplex_int_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/int/slave">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/int/slave" type="xml">
            <files mask="spi_half_duplex_int_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_half_duplex_polling_master" name="spi_half_duplex_polling_master" brief="The spi_half_duplex_polling_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the othere board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.Besides, master will transfer data in polling way. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/polling/master">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/polling/master" type="xml">
            <files mask="spi_half_duplex_polling_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_half_duplex_polling_slave" name="spi_half_duplex_polling_slave" brief="The spi_half_duplex_polling_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/polling/slave">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/half_duplex_transfer/polling/slave" type="xml">
            <files mask="spi_half_duplex_polling_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_interrupt" name="spi_interrupt" brief="The spi_interrupt example shows how to use spi functional API to do interrupt transfer:In this example, one spi instance as master and another spi instance as slave. Master sends a piece of data to slave,and check if the data slave received is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt" type="xml">
            <files mask="spi_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_interrupt_b2b_master" name="spi_interrupt_b2b_master" brief="The spi_interrupt_b2b_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and checkif the data master received is correct. This example needs to work with spi_interrupt_b2b_slave example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt_b2b/master">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt_b2b/master" type="xml">
            <files mask="spi_interrupt_b2b_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_interrupt_b2b_slave" name="spi_interrupt_b2b_slave" brief="The spi_interrupt_b2b_slave example shows how to use spi functional API to do interrupt transfer as a slave:In this example, the spi instance as slave. Slave receives data froma master and send a peiece of data to master,and check if the data slave received is correct. This example needs to work with spi_interrupt_b2b_master example." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt_b2b/slave">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt_b2b/slave" type="xml">
            <files mask="spi_interrupt_b2b_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_interrupt_b2b_transfer_master" name="spi_interrupt_b2b_transfer_master" brief="The spi_interrupt_board2board_master example shows how to use spi driver as master to do board to board transfer withinterrupt:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt_b2b_transfer/master">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt_b2b_transfer/master" type="xml">
            <files mask="spi_interrupt_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_interrupt_b2b_transfer_slave" name="spi_interrupt_b2b_transfer_slave" brief="The spi_interrupt_board2board_slave example shows how to use spi driver as slave to do board to board transfer with interrupt:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt_b2b_transfer/slave">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="spi_interrupt_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_polling_b2b_transfer_master" name="spi_polling_b2b_transfer_master" brief="The spi_polling_board2board_master example shows how to use spi driver as master to do board to board transfer with polling:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/polling_b2b_transfer/master">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/polling_b2b_transfer/master" type="xml">
            <files mask="spi_polling_b2b_transfer_master_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spi_polling_b2b_transfer_slave" name="spi_polling_b2b_transfer_slave" brief="The spi_polling_board2board_slave example shows how to use spi driver as slave to do board to board transfer withpolling:Notice: The SPI slave of this example uses interrupt mode, as there is no polling mode for SPI slave.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spi" path="examples/lpcxpresso54s018m/driver_examples/spi/polling_b2b_transfer/slave">
          <external path="examples/lpcxpresso54s018m/driver_examples/spi/polling_b2b_transfer/slave" type="xml">
            <files mask="spi_polling_b2b_transfer_slave_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spifi_dma_transfer" name="spifi_dma_transfer" brief="The SPIFI DMA Example project is a demonstration program that uses the KSDK software to program external serialflash using DMA and read through AHB bus." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spifi" path="examples/lpcxpresso54s018m/driver_examples/spifi/dma_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/spifi/dma_transfer" type="xml">
            <files mask="spifi_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_spifi_polling_transfer" name="spifi_polling_transfer" brief="The SPIFI Polling Example project is a demonstration program that uses the KSDK software to program external serialflash using polling and read through AHB bus." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/spifi" path="examples/lpcxpresso54s018m/driver_examples/spifi/polling_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/spifi/polling_transfer" type="xml">
            <files mask="spifi_polling_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_touch_cursor" name="touch_cursor" brief="The touch_cursor demo shows how to use LCD hardware cursor and position it using touch panel.In this example, a 32x32 cursor is shown. The cursor's position is changed in reaction to detected touch." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso54s018m/demo_apps/touch_cursor">
          <external path="examples/lpcxpresso54s018m/demo_apps/touch_cursor" type="xml">
            <files mask="touch_cursor_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_usart_dma_double_buffer_transfer" name="usart_dma_double_buffer_transfer" brief="This example shows how to use the DMA driver to implement a double buffer receive scheme from the USARTThe example shows the double buffer constructed using two descriptors (g_pingpong_desc). These descriptors are cycled from one to the other.Things to note- The descriptors of the ping pong transfer need to be aligned to size 16- The inital transfer will perform the same job as first descriptor of ping pong, so the first linkeage is to go to g_pingpong_desc[1]- g_pingpong_desc[1] then chains the g_pingpong_desc[0] as the next descriptor- The properties are set up such that g_pingpong_desc[0] (and the initial configuration uses INTA to signal back to the callback)- g_pingpong_desc[1] uses INTB to signal to the callback- The scheduled callback uses this information to know which data was last writtenA note on PerformanceThe intent of this example is to illustrate how a double-buffer scheme can be implemented using the dma. The performance of this example will be limited to how quickly the echo printer can read-out the data from the ping pong buffer and display it. This means that the example will work well if characters are entered at a rate where the DMA callback to echo the string can keep up with the input stream. Connecting the USARTRX to a continuous fast speed will cause the DMA to fall behind. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso54s018m/driver_examples/usart/dma_double_buffer_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/usart/dma_double_buffer_transfer" type="xml">
            <files mask="usart_dma_double_buffer_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_usart_dma_rb_transfer" name="usart_dma_rb_transfer" brief="The usart_dma ring buffer example shows how to use usart driver with DMA:In this example, one usart instance connect to PC through usart, the board will send back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso54s018m/driver_examples/usart/dma_rb_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/usart/dma_rb_transfer" type="xml">
            <files mask="usart_dma_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_usart_dma_transfer" name="usart_dma_transfer" brief="The usart_dma example shows how to use usart driver with DMA:In this example, one usart instance connect to PC through usart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso54s018m/driver_examples/usart/dma_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/usart/dma_transfer" type="xml">
            <files mask="usart_dma_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_usart_interrupt" name="usart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso54s018m/driver_examples/usart/interrupt">
          <external path="examples/lpcxpresso54s018m/driver_examples/usart/interrupt" type="xml">
            <files mask="usart_interrupt_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_usart_interrupt_rb_transfer" name="usart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso54s018m/driver_examples/usart/interrupt_rb_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/usart/interrupt_rb_transfer" type="xml">
            <files mask="usart_interrupt_rb_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_usart_interrupt_transfer" name="usart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso54s018m/driver_examples/usart/interrupt_transfer">
          <external path="examples/lpcxpresso54s018m/driver_examples/usart/interrupt_transfer" type="xml">
            <files mask="usart_interrupt_transfer_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_usart_polling" name="usart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/usart" path="examples/lpcxpresso54s018m/driver_examples/usart/polling">
          <external path="examples/lpcxpresso54s018m/driver_examples/usart/polling" type="xml">
            <files mask="usart_polling_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_utick_wakeup_xip" name="utick_wakeup_xip" brief="The purpose of this demo is to show wakeup from deep sleep mode using MicroTick timer.The demo sets the MicroTick Timer as a wake up source and puts the device in deep-sleep mode. The MicroTick timer wakes up the device. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso54s018m/demo_apps/utick_wakeup_xip">
          <external path="examples/lpcxpresso54s018m/demo_apps/utick_wakeup_xip" type="xml">
            <files mask="utick_wakeup_xip_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_utick_wakeup_xip_peripheral" name="utick_wakeup_xip_peripheral" brief="The purpose of this demo is to show wakeup from deep sleep mode using MicroTick timer.The demo sets the MicroTick Timer as a wake up source and puts the device in deep-sleep mode. The MicroTick timer wakes up the device. " toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="demo_apps" path="examples/lpcxpresso54s018m/demo_apps/utick_wakeup_xip_peripheral">
          <external path="examples/lpcxpresso54s018m/demo_apps/utick_wakeup_xip_peripheral" type="xml">
            <files mask="utick_wakeup_xip_peripheral_v3_8.xml"/>
          </external>
        </example>
        <example id="lpcxpresso54s018m_wwdt_qspi_xip" name="wwdt_qspi_xip" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 5 times of refreshing the watchdog, a timeout reset is generated." toolchain="armgcc mcuxpresso" compiler="compiler_gcc" category="driver_examples/wwdt" path="examples/lpcxpresso54s018m/driver_examples/wwdt">
          <external path="examples/lpcxpresso54s018m/driver_examples/wwdt" type="xml">
            <files mask="wwdt_qspi_xip_v3_8.xml"/>
          </external>
        </example>
      </examples>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <drivers>
            <driver id_refs="PROGRAM_FLASH_lpcxpresso54s018m">
              <driverBinary path="core/devices/LPC54S018M/mcuxpresso" type="binary">
                <files mask="LPC540xx_SPIFI_SFDP.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
    </board>
  </boards>
  <devices>
    <device id="LPC54S018J2M" name="LPC54S018M" version="1.0.0" full_name="LPC54S018J2M" family="LPC540xx" platform="LPC">
      <description>Power-Efficient Microcontrollers (MCUs) with Advanced Peripherals Based on Arm Cortex-M4 Core and Security</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
        <metadata key="compatible_device.segger" value="LPC54S018J4M"/>
      </metadataSet>
      <core id="core0_LPC54S018J2M" name="core0" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_LPC54S018J2M" name="PROGRAM_FLASH" addr="10000000" size="00200000" type="Flash" access="RO"/>
        <memoryBlock id="SRAMX_LPC54S018J2M" name="SRAMX" addr="00000000" size="00030000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_0_1_2_3_LPC54S018J2M" name="SRAM_0_1_2_3" addr="20000000" size="00028000" type="RAM" access="RW"/>
        <memoryBlock id="USB_RAM_LPC54S018J2M" name="USB_RAM" addr="40100000" size="00002000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="2048" ram_size_kb="352"/>
      <package id="LPC54S018J2MET180" name="LPC54S018J2MET180"/>
      <evaluation_boards>
        <evaluation_board name="lpcxpresso54s018m"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.LPC54S018J2M" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.LPC54S018J2M" name="internal.has_swo" value="true"/>
            <params id="misc.options.LPC54S018J2M" name="misc.options" value="--bootromstall 0x40000040"/>
            <params id="vector.catch.release.LPC54S018J2M" name="vector.catch" value="true"/>
            <params id="flash.driver.reset.release.LPC54S018J2M" name="flash.driver.reset" value="SOFT"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_LPC54S018J2M">
              <driverBinary path="core/devices/LPC54S018M/mcuxpresso" type="binary">
                <files mask="LPC540xx_SPIFI_SFDP.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
    <device id="LPC54S018J4M" name="LPC54S018M" version="1.0.0" full_name="LPC54S018J4M" family="LPC540xx" platform="LPC">
      <description>Power-Efficient Microcontrollers (MCUs) with Advanced Peripherals Based on Arm Cortex-M4 Core and Security</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
        <metadata key="compatible_device.segger" value="LPC54S018J4M"/>
      </metadataSet>
      <core id="core0_LPC54S018J4M" name="core0" fpu="true" type="cm4"/>
      <memory>
        <memoryBlock id="PROGRAM_FLASH_LPC54S018J4M" name="PROGRAM_FLASH" addr="10000000" size="00400000" type="Flash" access="RO"/>
        <memoryBlock id="SRAMX_LPC54S018J4M" name="SRAMX" addr="00000000" size="00030000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_0_1_2_3_LPC54S018J4M" name="SRAM_0_1_2_3" addr="20000000" size="00028000" type="RAM" access="RW"/>
        <memoryBlock id="USB_RAM_LPC54S018J4M" name="USB_RAM" addr="40100000" size="00002000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="4096" ram_size_kb="352"/>
      <package id="LPC54S018J4MET180" name="LPC54S018J4MET180"/>
      <evaluation_boards>
        <evaluation_board name="lpcxpresso54s018m"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.LPC54S018J4M" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.LPC54S018J4M" name="internal.has_swo" value="true"/>
            <params id="misc.options.LPC54S018J4M" name="misc.options" value="--bootromstall 0x40000040"/>
            <params id="vector.catch.release.LPC54S018J4M" name="vector.catch" value="true"/>
            <params id="flash.driver.reset.release.LPC54S018J4M" name="flash.driver.reset" value="SOFT"/>
          </params>
          <drivers>
            <driver id_refs="PROGRAM_FLASH_LPC54S018J4M">
              <driverBinary path="core/devices/LPC54S018M/mcuxpresso" type="binary">
                <files mask="LPC540xx_SPIFI_SFDP.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.lpcxpresso54s018m.LPC54S018M" name="lpcxpresso54s018m" brief="Board_project_template lpcxpresso54s018m" version="1.0.0" full_name="Board_project_template lpcxpresso54s018m" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/lpcxpresso54s018m/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="component.usart_adapter.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_gpio.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.power.LPC54S018M"/>
          <component_dependency value="platform.drivers.clock.LPC54S018M"/>
          <component_dependency value="platform.drivers.emc.LPC54S018M"/>
          <component_dependency value="device.LPC54S018M_startup.LPC54S018M"/>
          <any_of>
            <all>
              <component_dependency value="component.serial_manager.LPC54S018M"/>
              <component_dependency value="utility.debug_console.LPC54S018M"/>
            </all>
            <component_dependency value="utility.debug_console_lite.LPC54S018M"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.LPC54S018M" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.LPC54S018M"/>
          <component_dependency value="platform.Include_dsp.LPC54S018M"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.LPC54S018M" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC54S018M" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.LPC54S018M" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.LPC54S018M" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.LPC54S018M" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.LPC54S018M" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.LPC54S018M" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.LPC54S018M" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.LPC54S018M" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.LPC54S018M" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.LPC54S018M" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.LPC54S018M" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC54S018M" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.LPC54S018M" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.LPC54S018M" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.LPC54S018M" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.LPC54S018M" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_common_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm4.LPC54S018M" name="CMSIS_Include_core_cm4" brief="Cmsis_include_core_cm4" version="5.3.0" full_name="Cmsis_include_core_cm4" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.LPC54S018M"/>
          <component_dependency value="platform.Include_dsp.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_core_cm4_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.LPC54S018M" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="CMSIS_Include_dsp_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.LPC54S018M" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.LPC54S018M.LPC54S018M" name="LPC54S018M" brief="Devices_project_template LPC54S018M" version="1.0.0" full_name="Devices_project_template LPC54S018M" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/LPC54S018M/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="component.usart_adapter.LPC54S018M"/>
          <component_dependency value="device.LPC54S018M_startup.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_gpio.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_iocon.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.power.LPC54S018M"/>
          <component_dependency value="platform.drivers.reset.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.clock.LPC54S018M"/>
          <component_dependency value="platform.drivers.emc.LPC54S018M"/>
          <any_of>
            <all>
              <component_dependency value="component.serial_manager.LPC54S018M"/>
              <component_dependency value="utility.debug_console.LPC54S018M"/>
            </all>
            <component_dependency value="utility.debug_console_lite.LPC54S018M"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.LPC54S018M" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/LPC54S018M/template" project_base_path="board">
      <dependencies>
        <component_dependency value="platform.drivers.lpc_dma.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.LPC54S018M" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.LPC54S018M" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.timer_manager.LPC54S018M"/>
          <component_dependency value="component.lpc_gpio_adapter.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_cs42888_adapter.LPC54S018M" name="codecs_cs42888_adapter" brief="Component cs42888 adapter for multi codecs" version="2.2.1" full_name="Component codec_cs42888_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42888_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42888_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_da7212_adapter.LPC54S018M" name="codecs_da7212_adapter" brief="Component da7212 adapter for multi codecs" version="2.2.0" full_name="Component codec_da7212_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_da7212_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_da7212_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_i2c.LPC54S018M" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/codec/i2c" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.flexcomm_i2c_adapter.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_codec_i2c_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_sgtl_adapter.LPC54S018M" name="codecs_sgtl_adapter" brief="Component sgtl5000 adapter for multi codecs" version="2.2.0" full_name="Component codec_sgtl_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_sgtl_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sgtl_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_wm8904_adapter.LPC54S018M" name="codecs_wm8904_adapter" brief="Component wm8904 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8904_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8904.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8904_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8904_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_wm8960_adapter.LPC54S018M" name="codecs_wm8960_adapter" brief="Component wm8960 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8960_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8960_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8960_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.LPC54S018M" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.osa.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.cs42888_adapter.LPC54S018M" name="codec_cs42888_adapter" brief="Component cs42888 adapter for single codec" version="2.2.1" full_name="Component cs42888_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/cs42888" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ctimer_adapter.LPC54S018M" name="ctimer_adapter" brief="Component ctimer_adapter" version="1.0.0" full_name="Component ctimer_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.ctimer.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_ctimer_adapter_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.da7212_adapter.LPC54S018M" name="codec_da7212_adapter" brief="Component da7212 adapter for single codec" version="2.2.0" full_name="Component da7212_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/da7212" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.flexcomm_i2c_adapter.LPC54S018M" name="flexcomm_i2c_adapter" brief="Component flexcomm_i2c_adapter" version="1.0.0" full_name="Component flexcomm_i2c_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_flexcomm_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_flexcomm_i2c_adapter_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gint_adapter.LPC54S018M" name="gint_adapter" brief="Component gint_adapter" version="1.0.0" full_name="Component gint_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <component_dependency value="platform.drivers.gint.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gint.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.LPC54S018M" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.timer_manager.LPC54S018M"/>
          <component_dependency value="component.lpc_gpio_adapter.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.LPC54S018M" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_lists_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.LPC54S018M" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="utility.debug_console.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.LPC54S018M" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.log.LPC54S018M"/>
          <component_dependency value="utility.debug_console.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.LPC54S018M" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.log.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpc_crc_adapter.LPC54S018M" name="lpc_crc_adapter" brief="Component lpc_crc_adapter" version="1.0.0" full_name="Component lpc_crc_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_crc.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpc_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpc_gpio_adapter.LPC54S018M" name="lpc_gpio_adapter" brief="Component lpc_gpio_adapter" version="1.0.0" full_name="Component lpc_gpio_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.lpc_gpio.LPC54S018M"/>
          <component_dependency value="platform.drivers.inputmux.LPC54S018M"/>
          <component_dependency value="platform.drivers.pint.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpc_gpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.LPC54S018M" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.lists.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.LPC54S018M" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.lists.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash.common.LPC54S018M" name="mflash common" brief="mflash common" version="1.0.0" full_name="statically allocated file system for mflash" devices="LPC54S018J2M LPC54S018J4M" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <source relative_path="./" type="c_include">
        <files mask="mflash_common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash.lpc54s018m.LPC54S018M" name="mflash lpc54s018m" brief="mflash lpc54s018m" version="1.0.0" full_name="mflash lpc54s018m" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/flash/mflash/lpc54s018m" project_base_path="flash/mflash/lpc54s018m">
      <dependencies>
        <all>
          <component_dependency value="component.mflash.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.spifi.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="mflash_drv.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="mflash_drv.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mflash_file.LPC54S018M" name="mflash file" brief="mflash file" version="1.0.0" full_name="statically allocated file system for mflash" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="false" type="software_component" package_base_path="core/components/flash/mflash" project_base_path="flash/mflash">
      <dependencies>
        <component_dependency value="component.mflash.lpc54s018m.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="mflash_file.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="mflash_file.c"/>
      </source>
      <source relative_path="./" type="doc">
        <files mask="readme.txt" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mrt_adapter.LPC54S018M" name="mrt_adapter" brief="Component mrt_adapter" version="1.0.0" full_name="Component mrt_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.mrt.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_mrt.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.LPC54S018M" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.lists.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.LPC54S018M" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.LPC54S018M" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source condition="middleware.freertos-kernel.LPC54S018M" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_free_rtos.h"/>
      </source>
      <source condition="middleware.freertos-kernel.LPC54S018M" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_osa_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.LPC54S018M" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.lists.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_osa_bm_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_free_rtos.LPC54S018M" name="osa_free_rtos" brief="Component osa_free_rtos" version="1.0.0" full_name="Component osa_free_rtos" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.lists.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_free_rtos.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_free_rtos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_osa_free_rtos_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.LPC54S018M" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="utility.debug_console.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_ctimer_adapter.LPC54S018M" name="pwm_ctimer_adapter" brief="Component pwm_ctimer_adapter" version="1.0.0" full_name="Component pwm_ctimer_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.ctimer.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_ctimer.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.rng_adapter.LPC54S018M" name="rng_adapter" brief="Component rng_adapter" version="1.0.0" full_name="Component rng_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.rng.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.LPC54S018M" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.lists.LPC54S018M"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.LPC54S018M"/>
            <component_dependency value="component.serial_manager_swo.LPC54S018M"/>
            <component_dependency value="component.serial_manager_virtual.LPC54S018M"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_swo.LPC54S018M" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.serial_manager.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_swo.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_swo.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.LPC54S018M" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.usart_adapter.LPC54S018M"/>
          <component_dependency value="component.serial_manager.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_serial_manager_uart_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.LPC54S018M" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.sgtl_adapter.LPC54S018M" name="codec_sgtl_adapter" brief="Component sgtl5000 adapter for single codec" version="2.2.0" full_name="Component sgtl_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/sgtl5000" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.LPC54S018M" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.LPC54S018M" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.LPC54S018M" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.lists.LPC54S018M"/>
          <any_of>
            <component_dependency value="component.ctimer_adapter.LPC54S018M"/>
            <component_dependency value="component.mrt_adapter.LPC54S018M"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.usart_adapter.LPC54S018M" name="usart_adapter" brief="Component usart_adapter" version="1.0.0" full_name="usart_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_usart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_usart_adapter_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wm8904_adapter.LPC54S018M" name="codec_wm8904_adapter" brief="Component wm8904 adapter for single codec" version="2.2.0" full_name="Component wm8904_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/wm8904" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8904.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="component_wm8904_adapter_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wm8960_adapter.LPC54S018M" name="codec_wm8960_adapter" brief="Component wm8960 adapter for single codecs" version="2.2.0" full_name="Component wm8960_adapter" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/wm8960" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.LPC54S018M"/>
          <component_dependency value="driver.codec.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.LPC54S018M_CMSIS.LPC54S018M" name="LPC54S018M_CMSIS" brief="Device LPC54S018M_cmsis" version="1.0.0" full_name="Device LPC54S018M_cmsis" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/LPC54S018M" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.Include_core_cm4.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="LPC54S018M.h"/>
        <files mask="LPC54S018M_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_LPC54S018M_CMSIS_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="device.LPC54S018M_debugger.LPC54S018M" name="LPC54S018M_debugger" brief="Device LPC54S018M_debugger" version="1.0.0" full_name="Device LPC54S018M_debugger" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="debugger" package_base_path="core/devices/LPC54S018M" project_base_path="LPC54S018M">
      <source relative_path="./" type="xml">
        <files mask="LPC54S018M.xml"/>
      </source>
    </component>
    <component id="platform.devices.LPC54S018M_linker.LPC54S018M" name="LPC54S018M_linker" brief="Device LPC54S018M_linker" version="1.0.0" full_name="Device LPC54S018M_linker" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="linker" package_base_path="core/devices/LPC54S018M" project_base_path="LPC54S018M">
      <source toolchain="armgcc" relative_path="gcc" type="linker">
        <files mask="LPC54S018J2M_ram.ld"/>
        <files mask="LPC54S018J2M_spifi_flash.ld"/>
        <files mask="LPC54S018J4M_ram.ld"/>
        <files mask="LPC54S018J4M_spifi_flash.ld"/>
      </source>
    </component>
    <component id="device.LPC54S018M_startup.LPC54S018M" name="LPC54S018M_startup" brief="Device LPC54S018M_startup" version="1.1.0" full_name="Device LPC54S018M_startup" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/LPC54S018M" project_base_path="startup">
      <dependencies>
        <component_dependency value="device.LPC54S018M_system.LPC54S018M"/>
      </dependencies>
      <source toolchain="armgcc" relative_path="gcc" project_relative_path="./" type="asm_include">
        <files mask="startup_LPC54S018M.S"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_c">
        <files mask="startup_lpc54s018m.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" project_relative_path="./" type="src_cpp">
        <files mask="startup_lpc54s018m.cpp"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_LPC54S018M_startup_LPC54S018M.cmake" hidden="true"/>
      </source>
    </component>
    <component id="device.LPC54S018M_system.LPC54S018M" name="LPC54S018M_system" brief="Device LPC54S018M_system" version="1.0.0" full_name="Device LPC54S018M_system" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/LPC54S018M" project_base_path="device">
      <dependencies>
        <component_dependency value="device.LPC54S018M_CMSIS.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="system_LPC54S018M.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="system_LPC54S018M.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="device_LPC54S018M_system_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="docs.LPC54S018M.LPC54S018M" name="LPC54S018M" brief="Docs lpc54s018m" version="1.0.0" full_name="Docs lpc54s018m" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for LPCXpresso54S018M.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for LPCXpresso54S018M.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.aes.LPC54S018M" name="aes" brief="AES Driver" version="2.0.2" full_name="AES Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/aes" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_aes.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_aes.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_aes_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.LPC54S018M" name="clock" brief="Clock Driver" version="2.2.0" full_name="Clock Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/devices/LPC54S018M/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.power.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_clock_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.codec.LPC54S018M" name="codec" brief="Driver codec" version="2.2.1" full_name="Driver codec" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <any_of>
            <component_dependency value="component.wm8904_adapter.LPC54S018M"/>
            <component_dependency value="component.codec_cs42888_adapter.LPC54S018M"/>
            <component_dependency value="component.codec_da7212_adapter.LPC54S018M"/>
            <component_dependency value="component.codec_sgtl_adapter.LPC54S018M"/>
            <component_dependency value="component.codec_wm8960_adapter.LPC54S018M"/>
            <component_dependency value="component.codec_wm8904_adapter.LPC54S018M"/>
            <component_dependency value="component.cs42888_adapter.LPC54S018M"/>
            <component_dependency value="component.da7212_adapter.LPC54S018M"/>
            <component_dependency value="component.sgtl_adapter.LPC54S018M"/>
            <component_dependency value="component.wm8960_adapter.LPC54S018M"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_codec_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.LPC54S018M" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.LPC54S018M"/>
          <component_dependency value="device.LPC54S018M_CMSIS.LPC54S018M"/>
          <component_dependency value="platform.drivers.reset.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_common_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.cs42888.LPC54S018M" name="cs42888" brief="Driver cs42888" version="2.1.2" full_name="Driver cs42888" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/codec/cs42888" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.codec_i2c.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42888.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42888.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ctimer.LPC54S018M" name="ctimer" brief="CTimer Driver" version="2.2.1" full_name="CTimer Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/ctimer" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ctimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ctimer_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dialog7212.LPC54S018M" name="dialog7212" brief="Driver dialog7212" version="2.2.2" full_name="Driver dialog7212" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/codec/da7212" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.codec_i2c.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dialog7212.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dialog7212.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmic.LPC54S018M" name="dmic" brief="DMIC Driver" version="2.3.0" full_name="DMIC Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/dmic" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dmic.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmic.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dmic_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmic_dma.LPC54S018M" name="dmic_dma" brief="DMIC DMA Driver" version="2.3.0" full_name="DMIC DMA Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/dmic" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dmic.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dmic_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmic_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_dmic_dma_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dmic_hwvad.LPC54S018M" name="dmic_hwvad" brief="DMIC HWVAD Driver" version="2.3.0" full_name="DMIC HWVAD Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/dmic" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dmic.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dmic.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dmic.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.emc.LPC54S018M" name="emc" brief="EMC Driver" version="2.0.4" full_name="EMC Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/emc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_emc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_emc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_emc_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm.LPC54S018M" name="flexcomm" brief="FLEXCOMM Driver" version="2.0.2" full_name="FLEXCOMM Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexcomm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexcomm.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2c.LPC54S018M" name="i2c" brief="I2C Driver" version="2.1.0" full_name="FLEXCOMM I2C Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_i2c_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2c_dma.LPC54S018M" name="i2c_dma" brief="I2C Driver" version="2.1.0" full_name="FLEXCOMM I2C DMA Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_i2c_dma_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2c_freertos.LPC54S018M" name="i2c_freertos" brief="I2C Driver" version="2.0.8" full_name="FLEXCOMM I2C FREERTOS Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_i2c.LPC54S018M"/>
          <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2c_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2c_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_i2c_freertos_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2s.LPC54S018M" name="flexcomm_i2s" brief="I2S Driver" version="2.2.2" full_name="FLEXCOMM I2S Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2s.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2s.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_i2s_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_i2s_dma.LPC54S018M" name="flexcomm_i2s_dma" brief="I2S Driver" version="2.2.2" full_name="FLEXCOMM I2S DMA Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm_i2s.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_i2s_dma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_i2s_dma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_i2s_dma_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_spi.LPC54S018M" name="spi" brief="SPI Driver" version="2.2.1" full_name="FLEXCOMM SPI Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_spi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_spi_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_spi_dma.LPC54S018M" name="spi_dma" brief="SPI Driver" version="2.1.1" full_name="FLEXCOMM SPI DMA Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_spi.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_spi_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_spi_dma_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_spi_freertos.LPC54S018M" name="spi_freertos" brief="SPI Driver" version="2.1.0" full_name="FLEXCOMM SPI FREERTOS Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_spi.LPC54S018M"/>
          <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spi_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spi_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_spi_freertos_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_usart.LPC54S018M" name="usart" brief="USART Driver" version="2.4.0" full_name="FLEXCOMM USART Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_usart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_usart_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_usart_dma.LPC54S018M" name="usart_dma" brief="USART Driver" version="2.3.1" full_name="FLEXCOMM USART DMA Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usart_dma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_usart_dma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_usart_dma_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcomm_usart_freertos.LPC54S018M" name="usart_freertos" brief="USART Driver" version="2.3.1" full_name="FLEXCOMM USART FREERTOS Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/flexcomm" project_base_path="drivers/freertos">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.flexcomm.LPC54S018M"/>
          <component_dependency value="platform.drivers.flexcomm_usart.LPC54S018M"/>
          <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_usart_freertos.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_usart_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_flexcomm_usart_freertos_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.fmeas.LPC54S018M" name="fmeas" brief="FMEAS Driver" version="2.1.1" full_name="FMEAS Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/fmeas" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_fmeas.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_fmeas.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_fmeas_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.fro_calib.LPC54S018M" name="fro_calib" brief="FRO calibration Lib" version="2.0.1" full_name="Driver fro_calib" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/devices/LPC54S018M" project_base_path="LPC54S018M">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="drivers" type="c_include">
        <files mask="fsl_fro_calib.h"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" type="lib">
        <files mask="libfro_calib_hardabi.a"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" type="lib">
        <files mask="libfro_calib_hardabi.a"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" type="other">
        <files mask="libfro_calib_softabi.a" hidden="true"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" type="other">
        <files mask="libfro_calib_softabi.a"/>
      </source>
      <include_paths>
        <include_path relative_path="drivers" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.ft5406.LPC54S018M" name="ft5406" brief="Driver ft5406" version="1.0.0" full_name="Driver ft5406" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="false" type="board_component" package_base_path="core/components/ft5406" project_base_path="touchpanel">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ft5406.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ft5406.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_ft5406_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gint.LPC54S018M" name="gint" brief="GINT Driver" version="2.0.3" full_name="GINT Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/gint" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gint.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gint.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_gint_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.iap.LPC54S018M" name="iap" brief="IAP Driver" version="2.0.4" full_name="IAP Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/iap" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iap.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_iap.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_iap_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.inputmux.LPC54S018M" name="inputmux" brief="INPUTMUX Driver" version="2.0.3" full_name="INPUTMUX Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/inputmux" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="platform.drivers.inputmux_connections.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_inputmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_inputmux_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.inputmux_connections.LPC54S018M" name="inputmux_connections" brief="Inputmux_connections Driver" version="2.0.1" full_name="Inputmux_connections Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/devices/LPC54S018M/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_inputmux_connections.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_inputmux_connections_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_adc.LPC54S018M" name="adc" brief="ADC Driver" version="2.5.0" full_name="ADC Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/lpc_adc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_adc_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_crc.LPC54S018M" name="lpc_crc" brief="CRC Driver" version="2.1.1" full_name="CRC Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/lpc_crc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_crc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_crc_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_dma.LPC54S018M" name="dma" brief="DMA Driver" version="2.4.2" full_name="DMA Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/lpc_dma" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_dma_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_enet.LPC54S018M" name="lpc_enet" brief="enet Driver" version="2.1.5" full_name="enet Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/lpc_enet" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_enet.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_enet.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_enet_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_gpio.LPC54S018M" name="gpio" brief="GPIO Driver" version="2.1.7" full_name="GPIO Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/lpc_gpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_gpio_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_iocon.LPC54S018M" name="iocon" brief="IOCON Driver" version="2.1.2" full_name="IOCON Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/lpc_iocon" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_iocon.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_iocon_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_lcdc.LPC54S018M" name="lcdc" brief="LCDC Driver" version="2.0.2" full_name="LCDC Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/lpc_lcdc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lcdc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lcdc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_lcdc_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpc_rtc.LPC54S018M" name="lpc_rtc" brief="RTC Driver" version="2.1.2" full_name="RTC Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/lpc_rtc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_lpc_rtc_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mcan.LPC54S018M" name="mcan" brief="MCAN Driver" version="2.1.3" full_name="MCAN Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/mcan" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mcan.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mcan.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mcan_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.mdio-common.LPC54S018M" name="mdio-common" brief="Driver mdio-common" version="2.0.0" full_name="Driver mdio-common" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="board_component" package_base_path="core/components/phy" project_base_path="mdio">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mdio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mdio-common_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.mdio-lpc-enet.LPC54S018M" name="mdio-lpc-enet" brief="Driver mdio-lpc-enet" version="2.0.0" full_name="Driver mdio-lpc-enet" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="board_component" package_base_path="core/components/phy/mdio/lpc_enet" project_base_path="mdio">
      <dependencies>
        <all>
          <component_dependency value="driver.mdio-common.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_enet.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_enet_mdio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_enet_mdio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mdio-lpc-enet_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mrt.LPC54S018M" name="mrt" brief="MRT Driver" version="2.0.3" full_name="MRT Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/mrt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mrt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mrt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_mrt_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.otp.LPC54S018M" name="otp" brief="OTP Driver" version="2.0.0" full_name="OTP Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/otp" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_otp.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_otp_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.phy-common.LPC54S018M" name="phy-common" brief="Driver phy-common" version="2.0.0" full_name="Driver phy-common" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/phy" project_base_path="phy">
      <dependencies>
        <component_dependency value="driver.mdio-common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phy.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_phy-common_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.phy-device-lan8720a.LPC54S018M" name="phy-device-lan8720a" brief="Driver phy-device-lan8720a" version="2.0.0" full_name="Driver phy-device-lan8720a" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="board_component" package_base_path="core/components/phy/device/phylan8720a" project_base_path="phy">
      <dependencies>
        <component_dependency value="driver.phy-common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phylan8720a.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_phylan8720a.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_phy-device-lan8720a_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.pint.LPC54S018M" name="pint" brief="PINT Driver" version="2.1.8" full_name="PINT Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/pint" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_pint.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_pint.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_pint_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.power.LPC54S018M" name="power" brief="Power driver" version="2.0.0" full_name="power" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/devices/LPC54S018M" project_base_path="LPC54S018M">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="drivers" type="c_include">
        <files mask="fsl_power.h"/>
      </source>
      <source relative_path="drivers" type="src">
        <files mask="fsl_power.c"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" type="lib" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M">
        <files mask="libpower_hardabi.a"/>
      </source>
      <source toolchain="mcuxpresso" relative_path="mcuxpresso" type="other" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M">
        <files mask="libpower_softabi.a"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" type="lib" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M">
        <files mask="libpower_hardabi.a"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" type="other" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M">
        <files mask="libpower_softabi.a" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_power_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="drivers" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.puf.LPC54S018M" name="PUF" brief="PUF Driver" version="2.1.3" full_name="PUF Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/puf" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_puf.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_puf.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_puf_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.reset.LPC54S018M" name="reset" brief="Reset Driver" version="2.0.1" full_name="Reset Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/devices/LPC54S018M/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_reset.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_reset.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_reset_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rit.LPC54S018M" name="rit" brief="RIT Driver" version="2.1.1" full_name="RIT Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/lpc_rit" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rit.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rit.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rit_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rng.LPC54S018M" name="rng" brief="RNG Driver" version="2.0.0" full_name="RNG Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/rng" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rng.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_rng_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sctimer.LPC54S018M" name="sctimer" brief="SCT Driver" version="2.3.0" full_name="SCT Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/sctimer" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sctimer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sctimer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sctimer_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sdif.LPC54S018M" name="sdif" brief="sdif Driver" version="2.0.15" full_name="sdif Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/sdif" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_sdif.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sdif.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sdif_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.sgtl5000.LPC54S018M" name="sgtl5000" brief="Driver sgtl5000" version="2.1.1" full_name="Driver sgtl5000" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/codec/sgtl5000" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.codec_i2c.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sgtl5000.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sgtl5000.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sha.LPC54S018M" name="sha" brief="SHA Driver" version="2.2.2" full_name="SHA Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/sha" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sha.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sha.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_sha_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.spifi.LPC54S018M" name="spifi" brief="SPIFI Driver" version="2.0.3" full_name="SPIFI Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/spifi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spifi.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spifi.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_spifi_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.spifi_dma.LPC54S018M" name="spifi_dma" brief="SPIFI Driver" version="2.0.3" full_name="SPIFI DMA Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/spifi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.spifi.LPC54S018M"/>
          <component_dependency value="platform.drivers.lpc_dma.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_spifi_dma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_spifi_dma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_spifi_dma_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.utick.LPC54S018M" name="utick" brief="UTICK Driver" version="2.0.4" full_name="UTICK Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/utick" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_utick.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_utick.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_utick_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8904.LPC54S018M" name="wm8904" brief="Driver wm8904" version="2.4.3" full_name="Driver wm8904" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/codec/wm8904" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.codec_i2c.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8904.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8904.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wm8904_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8960.LPC54S018M" name="wm8960" brief="Driver wm8960" version="2.1.3" full_name="Driver wm8960" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="software_component" package_base_path="core/components/codec/wm8960" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
          <component_dependency value="component.codec_i2c.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8960.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8960.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wwdt.LPC54S018M" name="wwdt" brief="WWDT Driver" version="2.1.9" full_name="WWDT Driver" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="driver" package_base_path="core/drivers/wwdt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wwdt.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wwdt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="driver_wwdt_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.LPC54S018M" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_baremetal_LPC54S018M.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.LPC54S018M" name="FreeRTOS kernel" brief="FreeRTOS kernel" version="202007.00.0" full_name="FreeRTOS kernel" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="OS" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <defines>
        <define name="FSL_RTOS_FREE_RTOS" value=""/>
        <define name="SDK_OS_FREE_RTOS" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="middleware.freertos-kernel.extension.LPC54S018M"/>
          <component_dependency value="middleware.freertos-kernel.template.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="event_groups.c"/>
        <files mask="croutine.c"/>
        <files mask="list.c"/>
        <files mask="queue.c"/>
        <files mask="stream_buffer.c"/>
        <files mask="tasks.c"/>
        <files mask="timers.c"/>
      </source>
      <source relative_path="include" type="c_include">
        <files mask="croutine.h"/>
        <files mask="StackMacros.h"/>
        <files mask="atomic.h"/>
        <files mask="deprecated_definitions.h"/>
        <files mask="event_groups.h"/>
        <files mask="FreeRTOS.h"/>
        <files mask="list.h"/>
        <files mask="message_buffer.h"/>
        <files mask="mpu_prototypes.h"/>
        <files mask="mpu_wrappers.h"/>
        <files mask="portable.h"/>
        <files mask="projdefs.h"/>
        <files mask="queue.h"/>
        <files mask="semphr.h"/>
        <files mask="stack_macros.h"/>
        <files mask="stream_buffer.h"/>
        <files mask="task.h"/>
        <files mask="timers.h"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM4F" type="src" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M">
        <files mask="port.c"/>
      </source>
      <source toolchain="armgcc mcuxpresso" compiler="compiler_gcc" relative_path="portable/GCC/ARM_CM4F" type="c_include" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/MemMang" type="other">
        <files mask="ReadMe.url"/>
      </source>
      <source relative_path="portable" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="portable/GCC/ARM_CM4F" toolchain="armgcc mcuxpresso" type="c_include" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.armv8m.LPC54S018M" name="FreeRTOS port ARMv8M" brief="FreeRTOS port ARMv8M" version="202007.00.0" full_name="FreeRTOS port ARMv8M" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
      </dependencies>
      <source relative_path="portable/ARMv8M" type="script">
        <files mask="copy_files.py"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="src">
        <files mask="port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="src">
        <files mask="portasm.c"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="asm_include">
        <files mask="portasm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include">
        <files mask="portmacro.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="c_include">
        <files mask="portasm.h"/>
      </source>
      <source relative_path="portable/ARMv8M/non_secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/GCC/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context/portable/IAR/ARM_CM33" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="src">
        <files mask="secure_heap.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/heap" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/init" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure/macros" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
      <source relative_path="portable/ARMv8M/secure" type="doc">
        <files mask="ReadMe.txt"/>
      </source>
      <include_paths>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/GCC/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure/portable/IAR/ARM_CM33_NTZ" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/non_secure" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/context" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/heap" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/init" type="c_include"/>
        <include_path relative_path="portable/ARMv8M/secure/macros" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.extension.LPC54S018M" name="FreeRTOS NXP extension" brief="FreeRTOS NXP extension" version="202007.00.0" full_name="FreeRTOS NXP extension" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="include" type="c_include">
        <files mask="freertos_tasks_c_additions.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_extension_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.heap_1.LPC54S018M" name="FreeRTOS heap 1" brief="FreeRTOS heap 1" version="202007.00.0" full_name="FreeRTOS heap 1" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_2.LPC54S018M" name="FreeRTOS heap 2" brief="FreeRTOS heap 2" version="202007.00.0" full_name="FreeRTOS heap 2" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_2.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_3.LPC54S018M" name="FreeRTOS heap 3" brief="FreeRTOS heap 3" version="202007.00.0" full_name="FreeRTOS heap_3" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_3.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_4.LPC54S018M" name="FreeRTOS heap 4" brief="FreeRTOS heap 4" version="202007.00.0" full_name="FreeRTOS heap 4" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_freertos-kernel_heap_4_LPC54S018M.cmake" hidden="true"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_5.LPC54S018M" name="FreeRTOS heap 5" brief="FreeRTOS heap 5" version="202007.00.0" full_name="FreeRTOS heap 5" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_5.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.heap_newlib.LPC54S018M" name="FreeRTOS heap newlib" brief="FreeRTOS heap newlib" version="202007.00.0" full_name="FreeRTOS heap newlib" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel extensions" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
      </dependencies>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_useNewlib.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.mpu_wrappers.LPC54S018M" name="FreeRTOS MPU wrappers" brief="FreeRTOS MPU wrappers" version="202007.00.0" full_name="FreeRTOS MPU wrappers" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <dependencies>
        <component_dependency value="middleware.freertos-kernel.LPC54S018M"/>
      </dependencies>
      <source relative_path="portable/Common" type="src">
        <files mask="mpu_wrappers.c"/>
      </source>
    </component>
    <component id="middleware.freertos-kernel.template.LPC54S018M" name="FreeRTOS configuration template" brief="Template configuration file to be edited by user. Provides also memory allocator (heap_x), change variant if needed." version="202007.00.0" full_name="FreeRTOS configuration template" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel" user_visible="false" type="project_template" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="template/ARM_CM4F" type="c_include" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M">
        <files mask="FreeRTOSConfig.h"/>
      </source>
      <source exclude="true" relative_path="portable/MemMang" type="src">
        <files mask="heap_1.c"/>
        <files mask="heap_2.c"/>
        <files mask="heap_3.c"/>
        <files mask="heap_5.c"/>
        <files mask="heap_useNewlib.c"/>
      </source>
      <source relative_path="portable/MemMang" type="src">
        <files mask="heap_4.c"/>
      </source>
      <include_paths>
        <include_path relative_path="template/ARM_CM4F" type="c_include" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M"/>
      </include_paths>
    </component>
    <component id="middleware.freertos-kernel.unused.LPC54S018M" name="FreeRTOS unused" brief="FreeRTOS unused" version="202007.00.0" full_name="FreeRTOS unused" devices="LPC54S018J2M LPC54S018J4M" category="Operating System/FreeRTOS kernel" user_visible="false" type="other" package_base_path="rtos/freertos/freertos_kernel" project_base_path="freertos">
      <source relative_path="./" type="doc">
        <files mask="History.txt"/>
        <files mask="readme.txt"/>
      </source>
      <source relative_path="./" type="other">
        <files mask="Quick_Start_Guide.url"/>
      </source>
      <source relative_path="include" type="doc">
        <files mask="stdint.readme"/>
      </source>
      <source relative_path="License" type="doc">
        <files mask="license.txt"/>
      </source>
      <source relative_path="portable/ARMClang" type="doc">
        <files mask="Use-the-GCC-ports.txt"/>
      </source>
    </component>
    <component id="middleware.sdmmc.common.LPC54S018M" name="sdmmc_common" brief="Middleware sdmmc common" version="2.3.0" full_name="SDMMC common stack" devices="LPC54S018J2M LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="false" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <source relative_path="common" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdmmc_spec.h"/>
        <files mask="fsl_sdmmc_common.h"/>
      </source>
      <source relative_path="common" project_relative_path="src" type="src">
        <files mask="fsl_sdmmc_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_common_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="common" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.sdif.LPC54S018M" name="sdmmc_host_sdif" brief="Middleware sdmmc host sdif" version="2.3.1" full_name="Middleware sdmmc host sdif" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <any_of>
          <component_dependency value="middleware.sdmmc.host.sdif.interrupt.LPC54S018M"/>
          <component_dependency value="middleware.sdmmc.host.sdif.polling.LPC54S018M"/>
          <component_dependency value="middleware.sdmmc.host.sdif.freertos.LPC54S018M"/>
        </any_of>
      </dependencies>
      <source relative_path="host/sdif" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/sdif" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_host_sdif_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/sdif" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.sdif.freertos.LPC54S018M" name="sdmmc_host_sdif_freertos" brief="Middleware sdmmc host sdif freertos" version="2.3.1" full_name="Middleware sdmmc host sdif freertos" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.LPC54S018M"/>
          <component_dependency value="middleware.sdmmc.osa.freertos.LPC54S018M"/>
          <component_dependency value="platform.drivers.sdif.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="host/sdif" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/sdif/non_blocking" project_relative_path="host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source relative_path="host/sdif" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_host_sdif_freertos_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/sdif" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.sdif.interrupt.LPC54S018M" name="sdmmc_host_sdif_interrupt" brief="Middleware sdmmc host sdif interrupt" version="2.3.1" full_name="Middleware sdmmc host sdif interrupt" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.LPC54S018M"/>
          <component_dependency value="middleware.sdmmc.osa.bm.LPC54S018M"/>
          <component_dependency value="platform.drivers.sdif.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="host/sdif" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/sdif/non_blocking" project_relative_path="host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source relative_path="host/sdif" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_host_sdif_interrupt_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/sdif" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.host.sdif.polling.LPC54S018M" name="sdmmc_host_sdif_polling" brief="Middleware sdmmc host sdif polling" version="2.3.1" full_name="Middleware sdmmc host sdif polling" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.LPC54S018M"/>
          <component_dependency value="middleware.sdmmc.osa.bm.LPC54S018M"/>
          <component_dependency value="platform.drivers.sdif.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="host/sdif" project_relative_path="host" type="c_include">
        <files mask="fsl_sdmmc_host.h"/>
      </source>
      <source relative_path="host/sdif/blocking" project_relative_path="host" type="src">
        <files mask="fsl_sdmmc_host.c"/>
      </source>
      <source relative_path="host/sdif" project_relative_path="host" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_host_sdif_polling_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="host/sdif" project_relative_path="host" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.mmc.LPC54S018M" name="mmc" brief="Middleware sdmmc mmc" version="2.4.1" full_name="SDMMC mmc stack" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.LPC54S018M"/>
          <component_dependency value="middleware.sdmmc.host.sdif.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="mmc" project_relative_path="src" type="src">
        <files mask="fsl_mmc.c"/>
      </source>
      <source relative_path="mmc" project_relative_path="inc" type="c_include">
        <files mask="fsl_mmc.h"/>
      </source>
      <source relative_path="mmc" project_relative_path="./mmc" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_mmc_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="mmc" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.osa.bm.LPC54S018M" name="sdmmc_osa_bm" brief="Middleware sdmmc osa_bm" version="2.3.0" full_name="SDMMC common stack" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <component_dependency value="component.osa_bm.LPC54S018M"/>
      </dependencies>
      <source relative_path="osa" type="c_include">
        <files mask="fsl_sdmmc_osa.h"/>
      </source>
      <source relative_path="osa" type="src">
        <files mask="fsl_sdmmc_osa.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_osa_bm_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="osa" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.osa.freertos.LPC54S018M" name="sdmmc_osa_freertos" brief="Middleware sdmmc osa_freertos" version="2.3.0" full_name="SDMMC common stack" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <component_dependency value="component.osa_free_rtos.LPC54S018M"/>
      </dependencies>
      <source relative_path="osa" type="c_include">
        <files mask="fsl_sdmmc_osa.h"/>
      </source>
      <source relative_path="osa" type="src">
        <files mask="fsl_sdmmc_osa.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_osa_freertos_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="osa" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sd.LPC54S018M" name="sd" brief="Middleware sdmmc sd" version="2.3.3" full_name="SDMMC sd stack" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.LPC54S018M"/>
          <component_dependency value="middleware.sdmmc.host.sdif.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="sd" project_relative_path="src" type="src">
        <files mask="fsl_sd.c"/>
      </source>
      <source relative_path="sd" project_relative_path="inc" type="c_include">
        <files mask="fsl_sd.h"/>
      </source>
      <source relative_path="sd" project_relative_path="./sd" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_sd_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="sd" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.sdmmc.sdio.LPC54S018M" name="sdio" brief="Middleware sdmmc sdio" version="2.3.2" full_name="SDMMC sdio stack" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="Memories/SDMMC Stack" user_visible="true" type="middleware" package_base_path="middleware/sdmmc" project_base_path="sdmmc">
      <dependencies>
        <all>
          <component_dependency value="middleware.sdmmc.common.LPC54S018M"/>
          <component_dependency value="middleware.sdmmc.host.sdif.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="sdio" project_relative_path="src" type="src">
        <files mask="fsl_sdio.c"/>
      </source>
      <source relative_path="sdio" project_relative_path="inc" type="c_include">
        <files mask="fsl_sdio.h"/>
      </source>
      <source relative_path="sdio" project_relative_path="./sdio" type="doc">
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_sdmmc_sdio_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="sdio" project_relative_path="inc" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.common_header.LPC54S018M" name="USB Common Header" brief="Middleware usb common_header" version="2.7.0" full_name="USB Common Header" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="USB/USB Common Header" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <component_dependency value="component.osa.LPC54S018M"/>
      </dependencies>
      <source relative_path="include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_usb_common_header_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.usb.device.common_header.LPC54S018M" name="USB Device Common Header" brief="Middleware usb device common_header" version="2.7.0" full_name="USB Device Common Header" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" category="USB/USB Device" user_visible="true" type="middleware" package_base_path="middleware/usb" project_base_path="usb">
      <dependencies>
        <all>
          <component_dependency value="component.osa.LPC54S018M"/>
          <component_dependency value="middleware.usb.common_header.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="device" project_relative_path="device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source relative_path="device" project_relative_path="device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="middleware_usb_device_common_header_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="device" project_relative_path="device/include" type="c_include"/>
        <include_path relative_path="device" project_relative_path="device/source" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.misc_utilities.LPC54S018M" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="LPC54S018J2M LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utilities_misc_utilities_LPC54S018M.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.LPC54S018M" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_LPC54S018M.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.LPC54S018M" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_assert_lite_LPC54S018M.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.LPC54S018M" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.LPC54S018M" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.usart_adapter.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_debug_console_lite_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.notifier.LPC54S018M" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/devices/LPC54S018M/utilities" project_base_path="utilities/utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.LPC54S018M"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.LPC54S018M" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="LPC54S018J2M LPC54S018J4M" device_cores="core0_LPC54S018J2M core0_LPC54S018J4M" user_visible="true" type="utilities" package_base_path="core/devices/LPC54S018M/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.LPC54S018M"/>
          <component_dependency value="component.lists.LPC54S018M"/>
          <component_dependency value="platform.drivers.common.LPC54S018M"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace">
        <files mask="utility_shell_LPC54S018M.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
