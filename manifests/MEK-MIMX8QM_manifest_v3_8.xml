<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_SUPER" name="SDKVersion 2.9.0 SuperSet" brief="This is SDK version 2.9.0 manifest file." format_version="3.8" api_version="2.0.0" configuration="37bbf4eb706f3814bfad8f3a27525c83" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.8.xsd">
  <!--Timestamp (UTC): 2021-03-23 11:41:19.465442-->
  <!--This manifest is generated based on sdk repo commit: b1eede1d406d3392a45a06abc2494c2b87a1853b-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
    <define name="CPU_$|package|_$|core_name|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="QSPI_FLASH_MIMX8QM6xxxFF"/>
  </externalDefinitions>
  <ksdk id="MCUXpressoSDK290" name="MCUXpressoSDK290" version="2.9.0"/>
  <compilers>
    <compiler id="compiler_gcc" name="gcc" type="gcc"/>
  </compilers>
  <toolchainSettings>
    <toolchainSetting id="com.nxp.mcuxpresso" name="mcuxpresso" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" toolchain="mcuxpresso">
      <option id="gnu.cpp.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.c.compiler.option.optimization.flags" type="string" user_name="">
        <value>-fno-common</value>
      </option>
      <option id="gnu.cpp.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.cpp.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="com.crt.advproject.link.flashconfigenable" type="boolean" user_name="">
        <value>true</value>
      </option>
      <option id="gnu.c.link.option.nostdlibs" type="boolean" user_name="">
        <value>true</value>
      </option>
    </toolchainSetting>
  </toolchainSettings>
  <toolchains>
    <toolchain id="armgcc" name="GCC_ARM_Embedded" version="9.3.1" full_name="GCC ARM Embedded" compiler="compiler_gcc" type="armgcc" vendor="GCC ARM Embedded" vendor_url="http://launchpad.net/gcc-arm-embedded"/>
    <toolchain id="mcuxpresso" name="MCUXpresso_IDE" version="11.3.0" full_name="MCUXpresso IDE" compiler="compiler_gcc" type="mcuxpresso" vendor="NXP Semiconductors" vendor_url="http://www.nxp.com">
      <debug>
        <debug_configuration id="com.crt.advproject.config.exe.release" name="Release Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.release.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.release.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.crt.advproject.config.exe.debug" name="Debug Configuration" probe="LinkServer">
          <scripts>
            <script type="init" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>
set remotetimeout 60000
##target_extended_remote##
set mem inaccessible-by-default ${mem.access}
mon ondisconnect ${ondisconnect}
set arm force-mode thumb
${load}</script>
            </script>
            <script type="run" silent="false" emulators="${gdb.stub} -mi -info-emu">
              <script>${run}</script>
            </script>
          </scripts>
          <params>
            <params id="vector.catch.debug.mcuxpresso" name="vector.catch" value="false"/>
            <params id="internal.cache.debug.mcuxpresso" name="internal.cache" value="Disable"/>
          </params>
        </debug_configuration>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.debug" name="Debug Configuration" probe="Segger"/>
        <debug_configuration id="com.nxp.mcuxpresso.core.debug.support.segger.release" name="Release Configuration" probe="Segger"/>
      </debug>
    </toolchain>
  </toolchains>
  <boards>
    <board id="mekmimx8qm" name="MEK-MIMX8QM" href="https://www.nxp.com/pip/MCIMX8QM-CPU" version="1.0.0" package="MIMX8QM6AVUFF">
      <description>i.MX 8QuadMax Multisensory Enablement Kit (MEK)</description>
      <image path="core/boards/mekmimx8qm" type="image">
        <files mask="mekmimx8qm.png"/>
      </image>
      <examples>
        <example id="mekmimx8qm_canfd_interrupt_transfer_m40" name="canfd_interrupt_transfer_m40" brief="The canfd_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/canfd" path="examples/mekmimx8qm/driver_examples/canfd/interrupt_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/canfd/interrupt_transfer/cm4_core0" type="xml">
            <files mask="canfd_interrupt_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_canfd_loopback_m40" name="canfd_loopback_m40" brief="The canfd_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/canfd" path="examples/mekmimx8qm/driver_examples/canfd/loopback/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/canfd/loopback/cm4_core0" type="xml">
            <files mask="canfd_loopback_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_canfd_loopback_transfer_m40" name="canfd_loopback_transfer_m40" brief="The canfd_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/canfd" path="examples/mekmimx8qm/driver_examples/canfd/loopback_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/canfd/loopback_transfer/cm4_core0" type="xml">
            <files mask="canfd_loopback_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_dma3_memory_to_memory_m40" name="dma3_memory_to_memory_m40" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/mekmimx8qm/driver_examples/edma/memory_to_memory/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/edma/memory_to_memory/cm4_core0" type="xml">
            <files mask="dma3_memory_to_memory_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_dma3_scatter_gather_m40" name="dma3_scatter_gather_m40" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/mekmimx8qm/driver_examples/edma/scatter_gather/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/edma/scatter_gather/cm4_core0" type="xml">
            <files mask="dma3_scatter_gather_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_enet_txrx_multiring_transfer_m40" name="enet_txrx_multiring_transfer_m40" brief="The enet_txrx_multiring_transfer example shows the way to use ENET driver to   receive and transmit avb frame in the avb feature supported multi-ring platforms. this example is only supported in multi-ring platform.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to transmit frames in avb supported multiple-ring platforms.The example transmits 30 number frames. For simple demo, we create frames with some special definition.1. Build transmission frames with broadcast mac address.2. Build different frames for each ring: 10 normal ethernet frame, 10 similar IEC 61883-6 type frames,10 similar IEC 61883-8 type frames and the two IEC 1722 avb frames are set with different vlan priority . Notice, To simply show how to use three different rings in rx/tx on one board. This example set PHY local loop and you will see there will be PHY init auto-negotiation fail and this is normal. because phy can not finishauto-negotiation when phy is in loop back mode. However, the auto-negotiation fail has no impact on this loop back example, so just forget about the failure auto-negotiation." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="examples/mekmimx8qm/driver_examples/enet/txrx_multiring_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/enet/txrx_multiring_transfer/cm4_core0" type="xml">
            <files mask="enet_txrx_multiring_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_enet_txrx_ptp1588_transfer_m40" name="enet_txrx_ptp1588_transfer_m40" brief="The enet_rxtx_ptp1588 example shows the way to use ENET driver to   receive and transmit frame in the 1588 feature required cases.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.3. How to add to the multicast group to receive PTP 1588 message.4. How to get the time stamp of the PTP 1588 timer.4. How to use Get the ENET transmit and receive frame time stamp.The example transmits 20 number PTP event frame, shows the timestamp of the transmitted frame.The length, source MAC address and destination MAC address of the received frame will be print. The time stamp of the received timestamp will be print when the PTP message frame is received. Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. you can change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="examples/mekmimx8qm/driver_examples/enet/txrx_ptp1588_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/enet/txrx_ptp1588_transfer/cm4_core0" type="xml">
            <files mask="enet_txrx_ptp1588_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_enet_txrx_transfer_m40" name="enet_txrx_transfer_m40" brief="The enet_rxtx example shows the simplest way to use ENET driver for simple frame receive and transmit.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.The example transmits 20 number broadcast frame, print the frame length, source MAC addressand destination MAC address when receive frame.Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. youcan change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="examples/mekmimx8qm/driver_examples/enet/txrx_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/enet/txrx_transfer/cm4_core0" type="xml">
            <files mask="enet_txrx_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_esai_edma_transfer_m40" name="esai_edma_transfer_m40" brief="The esai_edma_transfer example shows how to use esai driver with edma:In this example, one esai instance playbacks the audio data recorded by the same esai instance using edma." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/esai" path="examples/mekmimx8qm/driver_examples/esai/edma_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/esai/edma_transfer/cm4_core0" type="xml">
            <files mask="esai_edma_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_esai_interrupt_transfer_m40" name="esai_interrupt_transfer_m40" brief="The esai_interrupt_transfer example shows how to use esai driver with interrupt:In this example, one esai instance playbacks the audio data recorded by the same esai instance using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/esai" path="examples/mekmimx8qm/driver_examples/esai/interrupt_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/esai/interrupt_transfer/cm4_core0" type="xml">
            <files mask="esai_interrupt_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexcan_interrupt_transfer_m40" name="flexcan_interrupt_transfer_m40" brief="The flexcan_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/mekmimx8qm/driver_examples/flexcan/interrupt_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/flexcan/interrupt_transfer/cm4_core0" type="xml">
            <files mask="flexcan_interrupt_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexcan_loopback_m40" name="flexcan_loopback_m40" brief="The flexcan_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/mekmimx8qm/driver_examples/flexcan/loopback/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/flexcan/loopback/cm4_core0" type="xml">
            <files mask="flexcan_loopback_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexcan_loopback_edma_transfer_m40" name="flexcan_loopback_edma_transfer_m40" brief="The flexcan_loopback_edma example shows how to use the EDMA version transactional driver to receiveCAN Message from Rx FIFO:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Tx Message Buffer and also setup Rx FIFO. After that, the example will send 4 CAN Messagesfrom Tx Message Buffer to Rx FIFO through internal loopback interconnect and read them out usingEDMA version FlexCAN transactional driver. The Sent and received message will be print out to terminalat last." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/mekmimx8qm/driver_examples/flexcan/loopback_edma_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/flexcan/loopback_edma_transfer/cm4_core0" type="xml">
            <files mask="flexcan_loopback_edma_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexcan_loopback_transfer_m40" name="flexcan_loopback_transfer_m40" brief="The flexcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/mekmimx8qm/driver_examples/flexcan/loopback_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/flexcan/loopback_transfer/cm4_core0" type="xml">
            <files mask="flexcan_loopback_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexspi_octal_polling_transfer_m40" name="flexspi_octal_polling_transfer_m40" brief="The flexspi_octal_polling_transfer example shows how to use flexspi driver with polling:In this example, flexspi will send data and operate the external octal flash connected with FLEXSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and program a page into the flash, at last check if the data in flash is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexspi" path="examples/mekmimx8qm/driver_examples/flexspi/octal/polling_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/flexspi/octal/polling_transfer/cm4_core0" type="xml">
            <files mask="flexspi_octal_polling_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_ftm_timer_m40" name="ftm_timer_m40" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/mekmimx8qm/driver_examples/ftm/timer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/ftm/timer/cm4_core0" type="xml">
            <files mask="ftm_timer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_hello_world_m40" name="hello_world_m40" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="examples/mekmimx8qm/demo_apps/hello_world/cm4_core0">
          <external path="examples/mekmimx8qm/demo_apps/hello_world/cm4_core0" type="xml">
            <files mask="hello_world_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_igpio_led_output_m40" name="igpio_led_output_m40" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/mekmimx8qm/driver_examples/gpio/led_output/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/gpio/led_output/cm4_core0" type="xml">
            <files mask="igpio_led_output_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_intmux_m40" name="intmux_m40" brief="This example shows how to use INTMUX to route the internel interrupt to the system.In this example, one of the INTMUX input source(such as LPIT, TPM) is used to generate internel interrupt.The internel interrupt is outputted to system through INTMUX. Then the interrupt is handled by IRQSTEER, whichlocated outside of the CM4 subsystem." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/mekmimx8qm/driver_examples/intmux/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/intmux/cm4_core0" type="xml">
            <files mask="intmux_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpadc_interrupt_m40" name="lpadc_interrupt_m40" brief="The lpadc_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/mekmimx8qm/driver_examples/lpadc/interrupt/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpadc/interrupt/cm4_core0" type="xml">
            <files mask="lpadc_interrupt_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpadc_polling_m40" name="lpadc_polling_m40" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/mekmimx8qm/driver_examples/lpadc/polling/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpadc/polling/cm4_core0" type="xml">
            <files mask="lpadc_polling_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_edma_b2b_xfer_master_m40" name="lpi2c_edma_b2b_xfer_master_m40" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/edma_b2b_transfer/master/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/edma_b2b_transfer/master/cm4_core0" type="xml">
            <files mask="lpi2c_edma_b2b_xfer_master_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_edma_b2b_xfer_slave_m40" name="lpi2c_edma_b2b_xfer_slave_m40" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/edma_b2b_transfer/slave/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/edma_b2b_transfer/slave/cm4_core0" type="xml">
            <files mask="lpi2c_edma_b2b_xfer_slave_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_interrupt_b2b_xfer_master_m40" name="lpi2c_interrupt_b2b_xfer_master_m40" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm4_core0" type="xml">
            <files mask="lpi2c_interrupt_b2b_xfer_master_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_interrupt_b2b_xfer_slave_m40" name="lpi2c_interrupt_b2b_xfer_slave_m40" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm4_core0" type="xml">
            <files mask="lpi2c_interrupt_b2b_xfer_slave_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_polling_b2b_master_m40" name="lpi2c_polling_b2b_master_m40" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/polling_b2b/master/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/polling_b2b/master/cm4_core0" type="xml">
            <files mask="lpi2c_polling_b2b_master_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_polling_b2b_slave_m40" name="lpi2c_polling_b2b_slave_m40" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/polling_b2b/slave/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/polling_b2b/slave/cm4_core0" type="xml">
            <files mask="lpi2c_polling_b2b_slave_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_read_accel_value_xfer_m40" name="lpi2c_read_accel_value_xfer_m40" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/read_accel_value_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/read_accel_value_transfer/cm4_core0" type="xml">
            <files mask="lpi2c_read_accel_value_xfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpit_single_channel_m40" name="lpit_single_channel_m40" brief="The LPIT single channel project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/mekmimx8qm/driver_examples/lpit/single_channel/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpit/single_channel/cm4_core0" type="xml">
            <files mask="lpit_single_channel_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_edma_b2b_xfer_master_m40" name="lpspi_edma_b2b_xfer_master_m40" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/edma_b2b_transfer/master/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/edma_b2b_transfer/master/cm4_core0" type="xml">
            <files mask="lpspi_edma_b2b_xfer_master_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_edma_b2b_xfer_slave_m40" name="lpspi_edma_b2b_xfer_slave_m40" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/edma_b2b_transfer/slave/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/edma_b2b_transfer/slave/cm4_core0" type="xml">
            <files mask="lpspi_edma_b2b_xfer_slave_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_interrupt_b2b_master_m40" name="lpspi_interrupt_b2b_master_m40" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b/master/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b/master/cm4_core0" type="xml">
            <files mask="lpspi_interrupt_b2b_master_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_interrupt_b2b_slave_m40" name="lpspi_interrupt_b2b_slave_m40" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b/slave/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b/slave/cm4_core0" type="xml">
            <files mask="lpspi_interrupt_b2b_slave_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_interrupt_b2b_xfer_master_m40" name="lpspi_interrupt_b2b_xfer_master_m40" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b_transfer/master/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b_transfer/master/cm4_core0" type="xml">
            <files mask="lpspi_interrupt_b2b_xfer_master_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_interrupt_b2b_xfer_slave_m40" name="lpspi_interrupt_b2b_xfer_slave_m40" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm4_core0" type="xml">
            <files mask="lpspi_interrupt_b2b_xfer_slave_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_polling_b2b_xfer_master_m40" name="lpspi_polling_b2b_xfer_master_m40" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/polling_b2b_transfer/master/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/polling_b2b_transfer/master/cm4_core0" type="xml">
            <files mask="lpspi_polling_b2b_xfer_master_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_polling_b2b_xfer_slave_m40" name="lpspi_polling_b2b_xfer_slave_m40" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/polling_b2b_transfer/slave/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/polling_b2b_transfer/slave/cm4_core0" type="xml">
            <files mask="lpspi_polling_b2b_xfer_slave_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_edma_transfer_m40" name="lpuart_edma_transfer_m40" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/edma_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/edma_transfer/cm4_core0" type="xml">
            <files mask="lpuart_edma_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_interrupt_m40" name="lpuart_interrupt_m40" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/interrupt/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/interrupt/cm4_core0" type="xml">
            <files mask="lpuart_interrupt_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_interrupt_rb_transfer_m40" name="lpuart_interrupt_rb_transfer_m40" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/interrupt_rb_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/interrupt_rb_transfer/cm4_core0" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_interrupt_transfer_m40" name="lpuart_interrupt_transfer_m40" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/interrupt_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/interrupt_transfer/cm4_core0" type="xml">
            <files mask="lpuart_interrupt_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_polling_m40" name="lpuart_polling_m40" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/polling/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/polling/cm4_core0" type="xml">
            <files mask="lpuart_polling_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_mmcau_m40" name="mmcau_m40" brief="Memory-Mapped Cryptographic Acceleration Unit (MMCAU)This project is a demonstration program that uses the KSDK software for encryption/decryption sampledata using AES-CBC, DES3-CBC and Hash algorithms MD5, SHA1 and SHA256." toolchain="armgcc" compiler="compiler_gcc" category="mmcau_examples" path="examples/mekmimx8qm/mmcau_examples/mmcau_api/cm4_core0">
          <external path="examples/mekmimx8qm/mmcau_examples/mmcau_api/cm4_core0" type="xml">
            <files mask="mmcau_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_mu_interrupt_core0" name="mu_interrupt_core0" brief="The mu_interrupt example shows how to use MU driver in interrupt way:In this example:1. Core 0 send message to Core 1 in interrupt mode via MU module.2. Core 1 send message back to Core 0 in interrupt mode.3. Core 0 receive message sent from Core 1 in interrupt mode." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mu" linked_projects="mekmimx8qm_mu_interrupt_core1" path="examples/mekmimx8qm/driver_examples/mu/interrupt/core0">
          <external path="examples/mekmimx8qm/driver_examples/mu/interrupt/core0" type="xml">
            <files mask="mu_interrupt_core0_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_mu_polling_core0" name="mu_polling_core0" brief="The mu_polling example shows how to use MU driver in polling way:In this example:1. Core 0 send message to Core 1 in polling mode via MU module.2. Core 1 send message back to Core 0 in polling mode.3. Core 0 receive message sent from Core 1 in polling mode." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mu" linked_projects="mekmimx8qm_mu_polling_core1" path="examples/mekmimx8qm/driver_examples/mu/polling/core0">
          <external path="examples/mekmimx8qm/driver_examples/mu/polling/core0" type="xml">
            <files mask="mu_polling_core0_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_rgpio_led_output_m40" name="rgpio_led_output_m40" brief="The RGPIO Example project is a demonstration program that uses the SDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/rgpio" path="examples/mekmimx8qm/driver_examples/rgpio/led_output/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/rgpio/led_output/cm4_core0" type="xml">
            <files mask="rgpio_led_output_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sai_edma_transfer_m40" name="sai_edma_transfer_m40" brief="The sai_edma_transfer example shows how to use sai driver with EDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM using EDMA channel." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mekmimx8qm/driver_examples/sai/edma_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/sai/edma_transfer/cm4_core0" type="xml">
            <files mask="sai_edma_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sai_interrupt_m40" name="sai_interrupt_m40" brief="The sai_interrupt example shows how to use sai functional API to implement interrupt playback:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mekmimx8qm/driver_examples/sai/interrupt/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/sai/interrupt/cm4_core0" type="xml">
            <files mask="sai_interrupt_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sai_interrupt_transfer_m40" name="sai_interrupt_transfer_m40" brief="The sai_interrupt_transfer example shows how to use sai driver with interrupt:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mekmimx8qm/driver_examples/sai/interrupt_transfer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/sai/interrupt_transfer/cm4_core0" type="xml">
            <files mask="sai_interrupt_transfer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sema42_dual_core_core0" name="sema42_dual_core_core0" brief="The sema42 example shows how to use SEMA42 driver to lock and unlock a sema gate:In this example:1. Firstly, Core 0 turn on LED  and lock a sema gate then boot up Core 1 wake up.2. Core 1 must be wait until Core 0 unlocks this sema gate to lock it.3. After user press any key in terminal window, the sema gate will be unlocked by core 0,then core 1 will lock it and turn off the LEDIf the board does not have LED to show the status, then core 1 will send a flagto core 0 when core 1 has locked the sema gate. Core 0 outputs the success logafter it received the flag." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sema42" linked_projects="mekmimx8qm_sema42_dual_core_core1" path="examples/mekmimx8qm/driver_examples/sema42/dual_core/core0">
          <external path="examples/mekmimx8qm/driver_examples/sema42/dual_core/core0" type="xml">
            <files mask="sema42_dual_core_core0_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sema42_uboot_m40" name="sema42_uboot_m40" brief="The sema42 uboot example shows how to use SEMA42 driver to lock and unlock a sema gate.This example should work together with uboot. This example runs on Cortex-M core,the uboot runs on the Cortex-A core." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sema42" path="examples/mekmimx8qm/driver_examples/sema42/uboot/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/sema42/uboot/cm4_core0" type="xml">
            <files mask="sema42_uboot_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tpm_combine_pwm_m40" name="tpm_combine_pwm_m40" brief="The TPM project is a demonstration program of generating a combined PWM signal by the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The example also show's the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the TPM pins, the user will seea change in LED brightness if user enter different values.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/mekmimx8qm/driver_examples/tpm/combine_pwm/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/tpm/combine_pwm/cm4_core0" type="xml">
            <files mask="tpm_combine_pwm_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tpm_dual_edge_capture_m40" name="tpm_dual_edge_capture_m40" brief="The TPM project is a demonstration program of the SDK TPM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a TPM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/mekmimx8qm/driver_examples/tpm/dual_edge_capture/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/tpm/dual_edge_capture/cm4_core0" type="xml">
            <files mask="tpm_dual_edge_capture_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tpm_input_capture_m40" name="tpm_input_capture_m40" brief="The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/mekmimx8qm/driver_examples/tpm/input_capture/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/tpm/input_capture/cm4_core0" type="xml">
            <files mask="tpm_input_capture_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tpm_output_compare_m40" name="tpm_output_compare_m40" brief="The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/mekmimx8qm/driver_examples/tpm/output_compare/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/tpm/output_compare/cm4_core0" type="xml">
            <files mask="tpm_output_compare_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tpm_pwm_twochannel_m40" name="tpm_pwm_twochannel_m40" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/mekmimx8qm/driver_examples/tpm/pwm_twochannel/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/tpm/pwm_twochannel/cm4_core0" type="xml">
            <files mask="tpm_pwm_twochannel_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tpm_simple_pwm_m40" name="tpm_simple_pwm_m40" brief="The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/mekmimx8qm/driver_examples/tpm/simple_pwm/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/tpm/simple_pwm/cm4_core0" type="xml">
            <files mask="tpm_simple_pwm_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tpm_timer_m40" name="tpm_timer_m40" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/mekmimx8qm/driver_examples/tpm/timer/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/tpm/timer/cm4_core0" type="xml">
            <files mask="tpm_timer_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tstmr_m40" name="tstmr_m40" brief="The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/mekmimx8qm/driver_examples/tstmr/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/tstmr/cm4_core0" type="xml">
            <files mask="tstmr_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_wdog32_m40" name="wdog32_m40" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/mekmimx8qm/driver_examples/wdog32/cm4_core0">
          <external path="examples/mekmimx8qm/driver_examples/wdog32/cm4_core0" type="xml">
            <files mask="wdog32_m40_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_canfd_interrupt_transfer_m41" name="canfd_interrupt_transfer_m41" brief="The canfd_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/canfd" path="examples/mekmimx8qm/driver_examples/canfd/interrupt_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/canfd/interrupt_transfer/cm4_core1" type="xml">
            <files mask="canfd_interrupt_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_canfd_loopback_m41" name="canfd_loopback_m41" brief="The canfd_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/canfd" path="examples/mekmimx8qm/driver_examples/canfd/loopback/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/canfd/loopback/cm4_core1" type="xml">
            <files mask="canfd_loopback_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_canfd_loopback_transfer_m41" name="canfd_loopback_transfer_m41" brief="The canfd_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/canfd" path="examples/mekmimx8qm/driver_examples/canfd/loopback_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/canfd/loopback_transfer/cm4_core1" type="xml">
            <files mask="canfd_loopback_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_dma3_memory_to_memory_m41" name="dma3_memory_to_memory_m41" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/mekmimx8qm/driver_examples/edma/memory_to_memory/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/edma/memory_to_memory/cm4_core1" type="xml">
            <files mask="dma3_memory_to_memory_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_dma3_scatter_gather_m41" name="dma3_scatter_gather_m41" brief="The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/edma" path="examples/mekmimx8qm/driver_examples/edma/scatter_gather/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/edma/scatter_gather/cm4_core1" type="xml">
            <files mask="dma3_scatter_gather_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_dpu_blitblend" name="dpu_blitblend" brief="In this project, the safety stream and content stream are both displayed.safety stream on the left part, content stream on the right part.The blit engine generates the frame buffers, the blend modes are differentfor safety stream and content stream.For each stream, there are 5 rectangles, 4 of them are fixed (red, green, blue,and white) and 1 of them is floating (yellow). When the floating rectangleoverlay occurs, the blend modes are different for safety stream and contentstream. For the left part, the overlay color is fixed rectangle adds floatingrectangle. For the right part, the overlay color is fixed rectangle subtractsthe floating rectangle.In this project, the blit engine shadow register feature is used. Newconfiguration is written to the registers during the previous process isstill on-going. The pipline sequence completed interrupt is used to make sureall pending process finished when necessary." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dpu" path="examples/mekmimx8qm/driver_examples/dpu/blitblend/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/dpu/blitblend/cm4_core1" type="xml">
            <files mask="dpu_blitblend_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_dpu_character" name="dpu_character" brief="The DPU Character example shows how to use the DPU driver to show characters. In this example, the fetch decode is used to fetch frame buffer to show. Two frame buffers are used, CPU fills the inactive frame buffer DPU shows the active frame buffer. When the example runs, you can see character changing in the middle of the screen." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dpu" path="examples/mekmimx8qm/driver_examples/dpu/character/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/dpu/character/cm4_core1" type="xml">
            <files mask="dpu_character_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_dpu_fetch_decode" name="dpu_fetch_decode" brief="The DPU Fetch Decode example shows how to use the DPU driver to enable fetch decoderunit and the scaler. The fetch decoder output frame size is smaller than desiredoutput, so the scaler units are used for the frame size convert.In this example, the screen is divided to two parts, one for content stream, andthe other for safty stream.If this example runs success, rectangles will move in the screen." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dpu" path="examples/mekmimx8qm/driver_examples/dpu/fetch_decode/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/dpu/fetch_decode/cm4_core1" type="xml">
            <files mask="dpu_fetch_decode_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_dpu_rop" name="dpu_rop" brief="This example shows how to use the ROP unit in blit engine. In this project,there are three input frame buffers to the blit engine. The blit enginegenerates two frames using different ROP configurations, so the output framesare different.For landscape display panel:Output frame 0  +------------------+------------------+------------------+  |                  |                  |                  |  |   Red            |    Yellow        |      Green       |  |                  |                  |                  |  |                  |                  |                  |  |        +--------------------------------------+        |  |        |         |                  |         |        |  |        | Magenta |    White         |  Cyan   |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  +--------|---------+------------------+------------------+  |        |                                      |        |  | Black  |                                      | Black  |  |        |              Blue                    |        |  |        |                                      |        |  +--------+--------------------------------------+--------+Output frame 1  +------------------+------------------+------------------+  |                  |                  |                  |  |   Cyan           |    Blue          |    Magenta       |  |                  |                  |                  |  |                  |                  |                  |  |        +--------------------------------------+        |  |        |         |                  |         |        |  |        |  Green  |    Black         |  Red    |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  +--------|---------+------------------+------------------+  |        |                                      |        |  | White  |                                      | White  |  |        |              Yellow                  |        |  |        |                                      |        |  +--------+--------------------------------------+--------+For portrait display panel:Output frame 0  +------------------+------------------+------------------+  |                  |                  |                  |  |   Red            |    Yellow        |      Green       |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |        +--------------------------------------+        |  |        |         |                  |         |        |  |        | Magenta |    White         |  Cyan   |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  +--------|---------+------------------+------------------+  |        |                                      |        |  | Black  |                                      | Black  |  |        |              Blue                    |        |  |        |                                      |        |  |        |                                      |        |  |        |                                      |        |  |        |                                      |        |  +--------+--------------------------------------+--------+Output frame 1  +------------------+------------------+------------------+  |                  |                  |                  |  |   Cyan           |    Blue          |    Magenta       |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |                  |                  |                  |  |        +--------------------------------------+        |  |        |         |                  |         |        |  |        |  Green  |    Black         |  Red    |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  |        |         |                  |         |        |  +--------|---------+------------------+------------------+  |        |                                      |        |  | White  |                                      | White  |  |        |              Yellow                  |        |  |        |                                      |        |  |        |                                      |        |  |        |                                      |        |  |        |                                      |        |  +--------+--------------------------------------+--------+The two frames are shown one by one. Because the switch intervalis controlled by an software loop delay, so the interval might be differentfor debug target and release target.In this project, a new blit engine process is started only when the previousframe finished." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/dpu" path="examples/mekmimx8qm/driver_examples/dpu/rop/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/dpu/rop/cm4_core1" type="xml">
            <files mask="dpu_rop_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_enet_txrx_multiring_transfer_m41" name="enet_txrx_multiring_transfer_m41" brief="The enet_txrx_multiring_transfer example shows the way to use ENET driver to   receive and transmit avb frame in the avb feature supported multi-ring platforms. this example is only supported in multi-ring platform.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to transmit frames in avb supported multiple-ring platforms.The example transmits 30 number frames. For simple demo, we create frames with some special definition.1. Build transmission frames with broadcast mac address.2. Build different frames for each ring: 10 normal ethernet frame, 10 similar IEC 61883-6 type frames,10 similar IEC 61883-8 type frames and the two IEC 1722 avb frames are set with different vlan priority . Notice, To simply show how to use three different rings in rx/tx on one board. This example set PHY local loop and you will see there will be PHY init auto-negotiation fail and this is normal. because phy can not finishauto-negotiation when phy is in loop back mode. However, the auto-negotiation fail has no impact on this loop back example, so just forget about the failure auto-negotiation." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="examples/mekmimx8qm/driver_examples/enet/txrx_multiring_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/enet/txrx_multiring_transfer/cm4_core1" type="xml">
            <files mask="enet_txrx_multiring_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_enet_txrx_ptp1588_transfer_m41" name="enet_txrx_ptp1588_transfer_m41" brief="The enet_rxtx_ptp1588 example shows the way to use ENET driver to   receive and transmit frame in the 1588 feature required cases.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.3. How to add to the multicast group to receive PTP 1588 message.4. How to get the time stamp of the PTP 1588 timer.4. How to use Get the ENET transmit and receive frame time stamp.The example transmits 20 number PTP event frame, shows the timestamp of the transmitted frame.The length, source MAC address and destination MAC address of the received frame will be print. The time stamp of the received timestamp will be print when the PTP message frame is received. Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. you can change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="examples/mekmimx8qm/driver_examples/enet/txrx_ptp1588_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/enet/txrx_ptp1588_transfer/cm4_core1" type="xml">
            <files mask="enet_txrx_ptp1588_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_enet_txrx_transfer_m41" name="enet_txrx_transfer_m41" brief="The enet_rxtx example shows the simplest way to use ENET driver for simple frame receive and transmit.1. This example shows how to initialize the ENET MAC.2. How to use ENET MAC to receive and transmit frame.The example transmits 20 number broadcast frame, print the frame length, source MAC addressand destination MAC address when receive frame.Note, The RMII mode is used for default setting to initialize the ENET interface between MAC and the external PHY. youcan change it to MII mode as you wish. Please make sure the MII Mode setting in the MAC is synchronize to the settingin TWR-SERIAL board for the external PHY." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/enet" path="examples/mekmimx8qm/driver_examples/enet/txrx_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/enet/txrx_transfer/cm4_core1" type="xml">
            <files mask="enet_txrx_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_esai_edma_transfer_m41" name="esai_edma_transfer_m41" brief="The esai_edma_transfer example shows how to use esai driver with edma:In this example, one esai instance playbacks the audio data recorded by the same esai instance using edma." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/esai" path="examples/mekmimx8qm/driver_examples/esai/edma_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/esai/edma_transfer/cm4_core1" type="xml">
            <files mask="esai_edma_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_esai_interrupt_transfer_m41" name="esai_interrupt_transfer_m41" brief="The esai_interrupt_transfer example shows how to use esai driver with interrupt:In this example, one esai instance playbacks the audio data recorded by the same esai instance using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/esai" path="examples/mekmimx8qm/driver_examples/esai/interrupt_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/esai/interrupt_transfer/cm4_core1" type="xml">
            <files mask="esai_interrupt_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexcan_interrupt_transfer_m41" name="flexcan_interrupt_transfer_m41" brief="The flexcan_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/mekmimx8qm/driver_examples/flexcan/interrupt_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/flexcan/interrupt_transfer/cm4_core1" type="xml">
            <files mask="flexcan_interrupt_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexcan_loopback_m41" name="flexcan_loopback_m41" brief="The flexcan_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/mekmimx8qm/driver_examples/flexcan/loopback/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/flexcan/loopback/cm4_core1" type="xml">
            <files mask="flexcan_loopback_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexcan_loopback_edma_transfer_m41" name="flexcan_loopback_edma_transfer_m41" brief="The flexcan_loopback_edma example shows how to use the EDMA version transactional driver to receiveCAN Message from Rx FIFO:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Tx Message Buffer and also setup Rx FIFO. After that, the example will send 4 CAN Messagesfrom Tx Message Buffer to Rx FIFO through internal loopback interconnect and read them out usingEDMA version FlexCAN transactional driver. The Sent and received message will be print out to terminalat last." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/mekmimx8qm/driver_examples/flexcan/loopback_edma_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/flexcan/loopback_edma_transfer/cm4_core1" type="xml">
            <files mask="flexcan_loopback_edma_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexcan_loopback_transfer_m41" name="flexcan_loopback_transfer_m41" brief="The flexcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexcan" path="examples/mekmimx8qm/driver_examples/flexcan/loopback_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/flexcan/loopback_transfer/cm4_core1" type="xml">
            <files mask="flexcan_loopback_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_flexspi_octal_polling_transfer_m41" name="flexspi_octal_polling_transfer_m41" brief="The flexspi_octal_polling_transfer example shows how to use flexspi driver with polling:In this example, flexspi will send data and operate the external octal flash connected with FLEXSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and program a page into the flash, at last check if the data in flash is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/flexspi" path="examples/mekmimx8qm/driver_examples/flexspi/octal/polling_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/flexspi/octal/polling_transfer/cm4_core1" type="xml">
            <files mask="flexspi_octal_polling_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_ftm_timer_m41" name="ftm_timer_m41" brief="The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/ftm" path="examples/mekmimx8qm/driver_examples/ftm/timer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/ftm/timer/cm4_core1" type="xml">
            <files mask="ftm_timer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_hello_world_m41" name="hello_world_m41" brief="The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers and repeat what user input. The purpose of this demo is to show how to use the UART, and to provide a simple project for debugging and further development." toolchain="armgcc" compiler="compiler_gcc" category="demo_apps" path="examples/mekmimx8qm/demo_apps/hello_world/cm4_core1">
          <external path="examples/mekmimx8qm/demo_apps/hello_world/cm4_core1" type="xml">
            <files mask="hello_world_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_igpio_led_output_m41" name="igpio_led_output_m41" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/gpio" path="examples/mekmimx8qm/driver_examples/gpio/led_output/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/gpio/led_output/cm4_core1" type="xml">
            <files mask="igpio_led_output_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_intmux_m41" name="intmux_m41" brief="This example shows how to use INTMUX to route the internel interrupt to the system.In this example, one of the INTMUX input source(such as LPIT, TPM) is used to generate internel interrupt.The internel interrupt is outputted to system through INTMUX. Then the interrupt is handled by IRQSTEER, whichlocated outside of the CM4 subsystem." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/mekmimx8qm/driver_examples/intmux/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/intmux/cm4_core1" type="xml">
            <files mask="intmux_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_isi_mipi_csi2_rgb565" name="isi_mipi_csi2_rgb565" brief="This example shows how to use ISI to receive camera frame through MIPI CSI2.In this example, the camera input frame and ISI output frame are both RGB656format. The output frame is shown in the screen.NOTE:This example must run continously to get the right result, breaking during debugwill results to display tearing. Because the ISI driver maintains IP state throughISR, if the core is halted, then driver state does not match the IP state. Whenexiting debug, the core might be halted for a short while, so the tearing mayhappen when exiting debug.If the camera and LCD panel resolutions are not the same, then only part of thecamera frame will be shown." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/isi/mipi_csi2/rgb565" path="examples/mekmimx8qm/driver_examples/isi/mipi_csi2/rgb565/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/isi/mipi_csi2/rgb565/cm4_core1" type="xml">
            <files mask="isi_mipi_csi2_rgb565_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_isi_mipi_csi2_yuv422" name="isi_mipi_csi2_yuv422" brief="This example shows how to use ISI to receive camera frame through MIPI CSI2.In this example, the camera input frame is YUV422 format and ISI output frameis RGB656 format. The output frame is shown in the screen.NOTE:This example must run continously to get the right result, breaking during debugwill results to display tearing. Because the ISI driver maintains IP state throughISR, if the core is halted, then driver state does not match the IP state. Whenexiting debug, the core might be halted for a short while, so the tearing mayhappen when exiting debug.If the camera and LCD panel resolutions are not the same, then only part of thecamera frame will be shown." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/isi/mipi_csi2/yuv422" path="examples/mekmimx8qm/driver_examples/isi/mipi_csi2/yuv422/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/isi/mipi_csi2/yuv422/cm4_core1" type="xml">
            <files mask="isi_mipi_csi2_yuv422_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpadc_interrupt_m41" name="lpadc_interrupt_m41" brief="The lpadc_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/mekmimx8qm/driver_examples/lpadc/interrupt/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpadc/interrupt/cm4_core1" type="xml">
            <files mask="lpadc_interrupt_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpadc_polling_m41" name="lpadc_polling_m41" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpadc" path="examples/mekmimx8qm/driver_examples/lpadc/polling/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpadc/polling/cm4_core1" type="xml">
            <files mask="lpadc_polling_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_edma_b2b_xfer_master_m41" name="lpi2c_edma_b2b_xfer_master_m41" brief="The lpi2c_edma_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with EDMA:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/edma_b2b_transfer/master/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/edma_b2b_transfer/master/cm4_core1" type="xml">
            <files mask="lpi2c_edma_b2b_xfer_master_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_edma_b2b_xfer_slave_m41" name="lpi2c_edma_b2b_xfer_slave_m41" brief="The lpi2c_edma_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with a EDMA master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/edma_b2b_transfer/slave/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/edma_b2b_transfer/slave/cm4_core1" type="xml">
            <files mask="lpi2c_edma_b2b_xfer_slave_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_interrupt_b2b_xfer_master_m41" name="lpi2c_interrupt_b2b_xfer_master_m41" brief="The lpi2c_interrupt_b2b_transfer_master example shows how to use lpi2c driver as master to do board to board transfer with interrupt:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/interrupt_b2b_transfer/master/cm4_core1" type="xml">
            <files mask="lpi2c_interrupt_b2b_xfer_master_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_interrupt_b2b_xfer_slave_m41" name="lpi2c_interrupt_b2b_xfer_slave_m41" brief="The lpi2c_interrupt_b2b_transfer_slave example shows how to use lpi2c driver as slave to do board to board transfer with interrupt:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/interrupt_b2b_transfer/slave/cm4_core1" type="xml">
            <files mask="lpi2c_interrupt_b2b_xfer_slave_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_polling_b2b_master_m41" name="lpi2c_polling_b2b_master_m41" brief="The lpi2c_polling_b2b_master example shows how to use lpi2c driver as master to do board to board transfer using polling method:In this example, one lpi2c instance as master and another lpi2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/polling_b2b/master/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/polling_b2b/master/cm4_core1" type="xml">
            <files mask="lpi2c_polling_b2b_master_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_polling_b2b_slave_m41" name="lpi2c_polling_b2b_slave_m41" brief="The lpi2c_polling_b2b_slave example shows how to use lpi2c driver as slave to do board to board transfer with a polling master:In this example, one lpi2c instance as slave and another lpi2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/polling_b2b/slave/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/polling_b2b/slave/cm4_core1" type="xml">
            <files mask="lpi2c_polling_b2b_slave_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpi2c_read_accel_value_xfer_m41" name="lpi2c_read_accel_value_xfer_m41" brief="The lpi2c_read_accel_value example shows how to use LPI2C driver to communicate with an lpi2c device: 1. How to use the lpi2c driver to read a lpi2c device who_am_I register. 2. How to use the lpi2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpi2c" path="examples/mekmimx8qm/driver_examples/lpi2c/read_accel_value_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpi2c/read_accel_value_transfer/cm4_core1" type="xml">
            <files mask="lpi2c_read_accel_value_xfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpit_single_channel_m41" name="lpit_single_channel_m41" brief="The LPIT single channel project is a simple example of the SDK LPIT driver. It sets up the LPIThardware block to trigger a periodic interrupt after every 1 second. When the LPIT interrupt is triggereda message a printed on the serial terminal and an LED is toggled on the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpit" path="examples/mekmimx8qm/driver_examples/lpit/single_channel/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpit/single_channel/cm4_core1" type="xml">
            <files mask="lpit_single_channel_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_edma_b2b_xfer_master_m41" name="lpspi_edma_b2b_xfer_master_m41" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/edma_b2b_transfer/master/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/edma_b2b_transfer/master/cm4_core1" type="xml">
            <files mask="lpspi_edma_b2b_xfer_master_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_edma_b2b_xfer_slave_m41" name="lpspi_edma_b2b_xfer_slave_m41" brief="The lpspi_edma_b2b_transfer example shows how to use LPSPI driver in edma way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_edma_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in edma . (LPSPI Slave using edma to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/edma_b2b_transfer/slave/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/edma_b2b_transfer/slave/cm4_core1" type="xml">
            <files mask="lpspi_edma_b2b_xfer_slave_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_interrupt_b2b_master_m41" name="lpspi_interrupt_b2b_master_m41" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_master.c' includes the LPSPI master code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b/master/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b/master/cm4_core1" type="xml">
            <files mask="lpspi_interrupt_b2b_master_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_interrupt_b2b_slave_m41" name="lpspi_interrupt_b2b_slave_m41" brief="The lpspi_interrupt_b2b example shows how to use LPSPI driver in interrupt way:In this example , we need two boards , one board used as LPSPI master and another board used as LPSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the LPSPI slave code.This example does not use the transactional API in LPSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b/slave/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b/slave/cm4_core1" type="xml">
            <files mask="lpspi_interrupt_b2b_slave_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_interrupt_b2b_xfer_master_m41" name="lpspi_interrupt_b2b_xfer_master_m41" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_master.c' includes the LPSPI master code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b_transfer/master/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b_transfer/master/cm4_core1" type="xml">
            <files mask="lpspi_interrupt_b2b_xfer_master_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_interrupt_b2b_xfer_slave_m41" name="lpspi_interrupt_b2b_xfer_slave_m41" brief="The lpspi_interrupt_b2b_transfer example shows how to use LPSPI driver in interrupt way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_interrupt_b2b_transfer_slave.c' includes the LPSPI slave code.This example uses the transactional API in LPSPI driver.1. LPSPI master send/received data to/from LPSPI slave in interrupt . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/interrupt_b2b_transfer/slave/cm4_core1" type="xml">
            <files mask="lpspi_interrupt_b2b_xfer_slave_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_polling_b2b_xfer_master_m41" name="lpspi_polling_b2b_xfer_master_m41" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_master.c' includes the LPSPI master code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/polling_b2b_transfer/master/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/polling_b2b_transfer/master/cm4_core1" type="xml">
            <files mask="lpspi_polling_b2b_xfer_master_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpspi_polling_b2b_xfer_slave_m41" name="lpspi_polling_b2b_xfer_slave_m41" brief="The lpspi_polling_b2b_transfer example shows how to use LPSPI driver in polling way:In this example , we need two boards, one board used as LPSPI master and another board used as LPSPI slave.The file 'lpspi_polling_b2b_transfer_slave.c' includes the LPSPI slave code.1. LPSPI master send/received data to/from LPSPI slave in polling . (LPSPI Slave using interrupt to receive/send the data)" toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpspi" path="examples/mekmimx8qm/driver_examples/lpspi/polling_b2b_transfer/slave/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpspi/polling_b2b_transfer/slave/cm4_core1" type="xml">
            <files mask="lpspi_polling_b2b_xfer_slave_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_edma_transfer_m41" name="lpuart_edma_transfer_m41" brief="The lpuart_edma Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/edma_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/edma_transfer/cm4_core1" type="xml">
            <files mask="lpuart_edma_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_interrupt_m41" name="lpuart_interrupt_m41" brief="The lpuart_functioncal_interrupt example shows how to use lpuart driver functionalAPI to receive data with interrupt method:In this example, one lpuart instance connect to PC, the board willsend back all characters that PC send to the board." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/interrupt/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/interrupt/cm4_core1" type="xml">
            <files mask="lpuart_interrupt_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_interrupt_rb_transfer_m41" name="lpuart_interrupt_rb_transfer_m41" brief="The lpuart_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/interrupt_rb_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/interrupt_rb_transfer/cm4_core1" type="xml">
            <files mask="lpuart_interrupt_rb_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_interrupt_transfer_m41" name="lpuart_interrupt_transfer_m41" brief="The lpuart_interrupt Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console in a group of 8 characters." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/interrupt_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/interrupt_transfer/cm4_core1" type="xml">
            <files mask="lpuart_interrupt_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_lpuart_polling_m41" name="lpuart_polling_m41" brief="The lpuart_polling Example project is to demonstrate usage of the KSDK lpuart driver.In the example, you can send characters to the console back and they will be printed out onto console instantly." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/lpuart" path="examples/mekmimx8qm/driver_examples/lpuart/polling/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/lpuart/polling/cm4_core1" type="xml">
            <files mask="lpuart_polling_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_mmcau_m41" name="mmcau_m41" brief="Memory-Mapped Cryptographic Acceleration Unit (MMCAU)This project is a demonstration program that uses the KSDK software for encryption/decryption sampledata using AES-CBC, DES3-CBC and Hash algorithms MD5, SHA1 and SHA256." toolchain="armgcc" compiler="compiler_gcc" category="mmcau_examples" path="examples/mekmimx8qm/mmcau_examples/mmcau_api/cm4_core1">
          <external path="examples/mekmimx8qm/mmcau_examples/mmcau_api/cm4_core1" type="xml">
            <files mask="mmcau_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_mu_interrupt_core1" name="mu_interrupt_core1" brief="The mu_interrupt example shows how to use MU driver in interrupt way:In this example:1. Core 0 send message to Core 1 in interrupt mode via MU module.2. Core 1 send message back to Core 0 in interrupt mode.3. Core 0 receive message sent from Core 1 in interrupt mode." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mu" path="examples/mekmimx8qm/driver_examples/mu/interrupt/core1">
          <external path="examples/mekmimx8qm/driver_examples/mu/interrupt/core1" type="xml">
            <files mask="mu_interrupt_core1_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_mu_polling_core1" name="mu_polling_core1" brief="The mu_polling example shows how to use MU driver in polling way:In this example:1. Core 0 send message to Core 1 in polling mode via MU module.2. Core 1 send message back to Core 0 in polling mode.3. Core 0 receive message sent from Core 1 in polling mode." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/mu" path="examples/mekmimx8qm/driver_examples/mu/polling/core1">
          <external path="examples/mekmimx8qm/driver_examples/mu/polling/core1" type="xml">
            <files mask="mu_polling_core1_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sai_edma_transfer_m41" name="sai_edma_transfer_m41" brief="The sai_edma_transfer example shows how to use sai driver with EDMA:In this example, one sai instance playbacks the audio data stored in flash/SRAM using EDMA channel." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mekmimx8qm/driver_examples/sai/edma_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/sai/edma_transfer/cm4_core1" type="xml">
            <files mask="sai_edma_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sai_interrupt_m41" name="sai_interrupt_m41" brief="The sai_interrupt example shows how to use sai functional API to implement interrupt playback:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mekmimx8qm/driver_examples/sai/interrupt/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/sai/interrupt/cm4_core1" type="xml">
            <files mask="sai_interrupt_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sai_interrupt_transfer_m41" name="sai_interrupt_transfer_m41" brief="The sai_interrupt_transfer example shows how to use sai driver with interrupt:In this example, one sai instance playbacks the audio data stored in flash/SRAM using interrupt." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sai" path="examples/mekmimx8qm/driver_examples/sai/interrupt_transfer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/sai/interrupt_transfer/cm4_core1" type="xml">
            <files mask="sai_interrupt_transfer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sema42_dual_core_core1" name="sema42_dual_core_core1" brief="The sema42 example shows how to use SEMA42 driver to lock and unlock a sema gate:In this example:1. Firstly, Core 0 turn on LED  and lock a sema gate then boot up Core 1 wake up.2. Core 1 must be wait until Core 0 unlocks this sema gate to lock it.3. After user press any key in terminal window, the sema gate will be unlocked by core 0,then core 1 will lock it and turn off the LEDIf the board does not have LED to show the status, then core 1 will send a flagto core 0 when core 1 has locked the sema gate. Core 0 outputs the success logafter it received the flag." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sema42" path="examples/mekmimx8qm/driver_examples/sema42/dual_core/core1">
          <external path="examples/mekmimx8qm/driver_examples/sema42/dual_core/core1" type="xml">
            <files mask="sema42_dual_core_core1_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_sema42_uboot_m41" name="sema42_uboot_m41" brief="The sema42 uboot example shows how to use SEMA42 driver to lock and unlock a sema gate.This example should work together with uboot. This example runs on Cortex-M core,the uboot runs on the Cortex-A core." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/sema42" path="examples/mekmimx8qm/driver_examples/sema42/uboot/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/sema42/uboot/cm4_core1" type="xml">
            <files mask="sema42_uboot_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tpm_timer_m41" name="tpm_timer_m41" brief="The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples/tpm" path="examples/mekmimx8qm/driver_examples/tpm/timer/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/tpm/timer/cm4_core1" type="xml">
            <files mask="tpm_timer_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_tstmr_m41" name="tstmr_m41" brief="The tstmr example shows the usage of TSTMR driver in application. The TSTMR module is a free running incrementing counter that starts running after system reset de-assertion and can be read at any time by the software for determining the software ticks.The TSTMR runs off the 1 MHz clock and resets on every system reset.In this example, it would output a time stamp information when the application is ready. And then, delay for 1 second with TSTMR_DelayUs() function. Before and after the delay, it would output the two time stamps information again." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/mekmimx8qm/driver_examples/tstmr/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/tstmr/cm4_core1" type="xml">
            <files mask="tstmr_m41_v3_8.xml"/>
          </external>
        </example>
        <example id="mekmimx8qm_wdog32_m41" name="wdog32_m41" brief="The WDOG32 Example project is to demonstrate usage of the KSDK wdog32 driver.In this example, fast testing is first implemented to test the wdog32.After this, refreshing the watchdog in None-window mode and window mode is executed.Note wdog32 is disabled in SystemInit function which means wdog32 is disabledafter chip emerges from reset." toolchain="armgcc" compiler="compiler_gcc" category="driver_examples" path="examples/mekmimx8qm/driver_examples/wdog32/cm4_core1">
          <external path="examples/mekmimx8qm/driver_examples/wdog32/cm4_core1" type="xml">
            <files mask="wdog32_m41_v3_8.xml"/>
          </external>
        </example>
      </examples>
    </board>
  </boards>
  <devices>
    <device id="MIMX8QM6xxxFF" name="MIMX8QM6" version="1.0.0" full_name="MIMX8QM6xxxFF" family="MIMX8QMx" platform="i.MX">
      <description>i.MX 8QuadMax</description>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
      </metadataSet>
      <core id="cm4_core0_MIMX8QM6xxxFF" name="cm4_core0" fpu="true" type="cm4" boot_role="primary_secondary"/>
      <core id="cm4_core1_MIMX8QM6xxxFF" name="cm4_core1" fpu="true" type="cm4" boot_role="primary_secondary"/>
      <memory>
        <memoryBlock id="SRAM_UPPER_MIMX8QM6xxxFF" name="SRAM_UPPER" addr="20000000" size="00020000" type="RAM" access="RW"/>
        <memoryBlock id="SRAM_LOWER_MIMX8QM6xxxFF" name="SRAM_LOWER" addr="1ffe0000" size="00020000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="0" ram_size_kb="256"/>
      <package id="MIMX8QM6AVUFF" name="MIMX8QM6AVUFF"/>
      <evaluation_boards>
        <evaluation_board name="mekmimx8qm"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.attach.slave.release.MIMX8QM6xxxFF" name="internal.attach.slave" value="true"/>
            <params id="internal.multi.swd.release.MIMX8QM6xxxFF" name="internal.multi.swd" value="true"/>
            <params id="internal.wiretype.release.MIMX8QM6xxxFF" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MIMX8QM6xxxFF" name="internal.has_swo" value="false"/>
          </params>
          <drivers>
            <driver id_refs="QSPI_FLASH_MIMX8QM6xxxFF">
              <driverBinary path="core/devices/MIMX8QM6/mcuxpresso" type="binary">
                <files mask="flash_driver_placeholder.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="project_template.mekmimx8qm.MIMX8QM6" name="mekmimx8qm" brief="Board_project_template mekmimx8qm" version="1.0.0" full_name="Board_project_template mekmimx8qm" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/boards/mekmimx8qm/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.devices.MIMX8QM6_CMSIS.MIMX8QM6"/>
          <component_dependency value="platform.devices.MIMX8QM6_startup.MIMX8QM6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QM6"/>
          <component_dependency value="platform.drivers.igpio.MIMX8QM6"/>
          <component_dependency value="component.lpuart_adapter.MIMX8QM6"/>
          <component_dependency value="component.lists.MIMX8QM6"/>
          <any_of>
            <all>
              <component_dependency value="platform.utilities.assert.MIMX8QM6"/>
              <component_dependency value="utility.debug_console.MIMX8QM6"/>
              <component_dependency value="component.serial_manager.MIMX8QM6"/>
            </all>
            <all>
              <component_dependency value="platform.utilities.assert_lite.MIMX8QM6"/>
              <component_dependency value="utility.debug_console_lite.MIMX8QM6"/>
            </all>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS.MIMX8QM6" name="CMSIS" brief="Cmsis" version="5.6.0" full_name="Cmsis" devices="MIMX8QM6xxxFF" user_visible="true" type="CMSIS" package_base_path="core/CMSIS" project_base_path="./">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver"/>
          <component_dependency value="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MIMX8QM6"/>
          <component_dependency value="platform.Include_dsp.MIMX8QM6"/>
          <component_dependency value="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" project_relative_path="CMSIS" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source relative_path="Include" type="c_include">
        <files mask="cmsis_compiler.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_cm35p.h"/>
        <files mask="core_cm4.h"/>
        <files mask="core_cm0plus.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="core_dsp.h"/>
        <files mask="core_cm1.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm7.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="core_sc000.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm0.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_cm33.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv81mml.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_cm3.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm23.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
      </source>
      <include_paths>
        <include_path relative_path="Include" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" brief="Cmsis_driver" version="2.7.1" full_name="Cmsis_driver" user_visible="true" type="CMSIS" package_base_path="core/CMSIS/Driver/DriverTemplates" project_base_path="Driver/DriverTemplates">
      <source relative_path="./" type="src">
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_SAI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_USBD.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MIMX8QM6" name="CAN" brief="Cmsis_driver_include can" version="1.2.0" full_name="Cmsis_driver_include can" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6" name="Common" brief="Cmsis_driver_include common" version="2.7.1" full_name="Cmsis_driver_include common" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <source relative_path="./" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8QM6" name="Ethernet" brief="Cmsis_driver_include ethernet" version="2.1.0" full_name="Cmsis_driver_include ethernet" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MIMX8QM6" name="Ethernet_MAC" brief="Cmsis_driver_include ethernet_mac" version="2.1.0" full_name="Cmsis_driver_include ethernet_mac" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MIMX8QM6" name="Ethernet_PHY" brief="Cmsis_driver_include ethernet_phy" version="2.1.0" full_name="Cmsis_driver_include ethernet_phy" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MIMX8QM6" name="Flash" brief="Cmsis_driver_include flash" version="2.2.0" full_name="Cmsis_driver_include flash" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.GPIO_CMSISInclude.MIMX8QM6" name="GPIO" brief="Cmsis_driver_include gpio" version="2.0.0" full_name="Cmsis_driver_include gpio" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_GPIO.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMX8QM6" name="I2C" brief="Cmsis_driver_include i2c" version="2.3.0" full_name="Cmsis_driver_include i2c" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MIMX8QM6" name="MCI" brief="Cmsis_driver_include mci" version="2.3.0" full_name="Cmsis_driver_include mci" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MIMX8QM6" name="NAND" brief="Cmsis_driver_include nand" version="2.3.0" full_name="Cmsis_driver_include nand" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MIMX8QM6" name="SAI" brief="Cmsis_driver_include sai" version="1.1.0" full_name="Cmsis_driver_include sai" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMX8QM6" name="SPI" brief="Cmsis_driver_include spi" version="2.2.0" full_name="Cmsis_driver_include spi" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMX8QM6" name="USART" brief="Cmsis_driver_include usart" version="2.3.0" full_name="Cmsis_driver_include usart" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8QM6" name="USB" brief="Cmsis_driver_include usb" version="2.2.0" full_name="Cmsis_driver_include usb" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MIMX8QM6" name="USB_Device" brief="Cmsis_driver_include usb_device" version="2.2.0" full_name="Cmsis_driver_include usb_device" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MIMX8QM6" name="USB_Host" brief="Cmsis_driver_include usb_host" version="2.2.0" full_name="Cmsis_driver_include usb_host" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.CMSIS_Driver_Include.WiFi_CMSISInclude.MIMX8QM6" name="WiFi" brief="Cmsis_driver_include wifi" version="1.0.0" full_name="Cmsis_driver_include wifi" devices="MIMX8QM6xxxFF" user_visible="false" type="CMSIS_driver" package_base_path="core/CMSIS/Driver/Include" project_base_path="CMSIS_driver">
      <dependencies>
        <component_dependency value="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="Driver_WiFi.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_common.MIMX8QM6" name="CMSIS_Include_common" brief="Cmsis_include_common" version="5.3.0" full_name="Cmsis_include_common" devices="MIMX8QM6xxxFF" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_armclang_ltm.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="cmsis_iccarm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="CMSIS_Include_common_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="CMSIS_Include_common_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_core_cm4.MIMX8QM6" name="CMSIS_Include_core_cm4" brief="Cmsis_include_core_cm4" version="5.3.0" full_name="Cmsis_include_core_cm4" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <dependencies>
        <all>
          <component_dependency value="platform.Include_common.MIMX8QM6"/>
          <component_dependency value="platform.Include_dsp.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="core_cm4.h"/>
        <files mask="mpu_armv7.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="CMSIS_Include_core_cm4_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="CMSIS_Include_core_cm4_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.Include_dsp.MIMX8QM6" name="CMSIS_Include_dsp" brief="Cmsis_include_dsp" version="1.7.0" full_name="Cmsis_include_dsp" devices="MIMX8QM6xxxFF" user_visible="true" type="CMSIS_Include" package_base_path="core/CMSIS/Include" project_base_path="CMSIS">
      <source relative_path="./" type="c_include">
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="CMSIS_Include_dsp_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="CMSIS_Include_dsp_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="COPY_BSD_License.MIMX8QM6" name="COPY_BSD_License" brief="COPY of BSD-3-Clause license" version="1.0.0" full_name="COPY of BSD-3-Clause license" devices="MIMX8QM6xxxFF" user_visible="true" type="other" package_base_path="core/./" project_base_path="src">
      <source relative_path="./" type="other">
        <files mask="COPYING-BSD-3"/>
      </source>
    </component>
    <component id="project_template.MIMX8QM6.MIMX8QM6" name="MIMX8QM6" brief="Devices_project_template MIMX8QM6" version="1.0.0" full_name="Devices_project_template MIMX8QM6" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" category="Board Support/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MIMX8QM6/project_template" project_base_path="board">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MIMX8QM6"/>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.devices.MIMX8QM6_CMSIS.MIMX8QM6"/>
          <component_dependency value="platform.devices.MIMX8QM6_startup.MIMX8QM6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QM6"/>
          <component_dependency value="platform.drivers.igpio.MIMX8QM6"/>
          <component_dependency value="platform.drivers.scfwapi.MIMX8QM6"/>
          <component_dependency value="component.lpuart_adapter.MIMX8QM6"/>
          <component_dependency value="component.lists.MIMX8QM6"/>
          <any_of>
            <all>
              <component_dependency value="platform.utilities.assert.MIMX8QM6"/>
              <component_dependency value="utility.debug_console.MIMX8QM6"/>
              <component_dependency value="component.serial_manager.MIMX8QM6"/>
            </all>
            <all>
              <component_dependency value="platform.utilities.assert_lite.MIMX8QM6"/>
              <component_dependency value="utility.debug_console_lite.MIMX8QM6"/>
            </all>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="RTE_Device.MIMX8QM6" name="RTE_Device" brief="Rte_device" version="1.0.0" full_name="Rte_device" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" category="Device/SDK Project Template" user_visible="true" type="project_template" package_base_path="core/devices/MIMX8QM6/template" project_base_path="board">
      <dependencies>
        <component_dependency value="platform.drivers.dma3.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="tools.MIMX8QM6" name="cmake_toolchain" brief="Cmake_toolchain" version="1.0.0" full_name="Cmake_toolchain" devices="MIMX8QM6xxxFF" user_visible="true" type="other" package_base_path="core/tools/cmake_toolchain_files" project_base_path="cmake_toolchain_files">
      <source relative_path="./" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="component.button.MIMX8QM6" name="button" brief="Component button" version="1.0.0" full_name="Component button" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/button" project_base_path="component/button">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.timer_manager.MIMX8QM6"/>
          <component_dependency value="component.igpio_adapter.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_button.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_button.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_cs42888_adapter.MIMX8QM6" name="codecs_cs42888_adapter" brief="Component cs42888 adapter for multi codecs" version="2.2.1" full_name="Component codec_cs42888_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42888_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42888_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_da7212_adapter.MIMX8QM6" name="codecs_da7212_adapter" brief="Component da7212 adapter for multi codecs" version="2.2.0" full_name="Component codec_da7212_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_da7212_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_da7212_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_i2c.MIMX8QM6" name="codec_i2c" brief="Component codec_i2c" version="2.1.0" full_name="Component codec_i2c" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/codec/i2c" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.lpi2c_adapter.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="component_codec_i2c_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="component_codec_i2c_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_sgtl_adapter.MIMX8QM6" name="codecs_sgtl_adapter" brief="Component sgtl5000 adapter for multi codecs" version="2.2.0" full_name="Component codec_sgtl_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_sgtl_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sgtl_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_wm8904_adapter.MIMX8QM6" name="codecs_wm8904_adapter" brief="Component wm8904 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8904_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8904.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8904_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8904_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.codec_wm8960_adapter.MIMX8QM6" name="codecs_wm8960_adapter" brief="Component wm8960 adapter for multi codecs" version="2.2.0" full_name="Component codec_wm8960_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8960_adapter.c"/>
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8960_adapter.h"/>
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.common_task.MIMX8QM6" name="common_task" brief="Component common_task" version="1.0.0" full_name="Component common_task" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/common_task" project_base_path="component/common_task">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.osa.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_common_task.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_common_task.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.cs42888_adapter.MIMX8QM6" name="codec_cs42888_adapter" brief="Component cs42888 adapter for single codec" version="2.2.1" full_name="Component cs42888_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/cs42888" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.cs42888.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="component_cs42888_adapter_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="component_cs42888_adapter_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.da7212_adapter.MIMX8QM6" name="codec_da7212_adapter" brief="Component da7212 adapter for single codec" version="2.2.0" full_name="Component da7212_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/da7212" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.dialog7212.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.flexspi_nor_flash_adapter.MIMX8QM6" name="flexspi_nor_flash_adapter" brief="Component flexspi_nor_flash_adapter" version="1.0.0" full_name="Component flexspi_nor_flash_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/internal_flash" project_base_path="component/internal_flash">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.flexspi.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_flash.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_flexspi_nor_flash.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.ftm_adapter.MIMX8QM6" name="ftm_adapter" brief="Component ftm_adapter" version="1.0.0" full_name="Component ftm_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.ftm.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_ftm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.gpt_adapter.MIMX8QM6" name="gpt_adapter" brief="Component gpt_adapter" version="1.0.0" full_name="Component gpt_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.gpt.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_gpt.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.igpio_adapter.MIMX8QM6" name="igpio_adapter" brief="Component igpio_adapter" version="1.0.0" full_name="Component igpio_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/gpio" project_base_path="component/gpio">
      <dependencies>
        <component_dependency value="platform.drivers.igpio.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_igpio.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.led.MIMX8QM6" name="led" brief="Component led" version="1.0.0" full_name="Component led" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/led" project_base_path="component/led">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.timer_manager.MIMX8QM6"/>
          <component_dependency value="component.igpio_adapter.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_led.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_led.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lists.MIMX8QM6" name="lists" brief="Component lists" version="1.0.0" full_name="Component lists" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/lists" project_base_path="component/lists">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_generic_list.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_generic_list.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="component_lists_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="component_lists_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.MIMX8QM6" name="log" brief="Component log" version="1.0.0" full_name="Component log" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="utility.debug_console.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log.h"/>
        <files mask="fsl_component_log_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.debugconsole.MIMX8QM6" name="log_backend_debug_console" brief="Component log backend debug console" version="1.0.0" full_name="Component log backend debug console" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.log.MIMX8QM6"/>
          <component_dependency value="utility.debug_console.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_debugconsole.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_debugconsole.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.log.backend.ringbuffer.MIMX8QM6" name="log_backend_ring_buffer" brief="Component log backend ring buffer" version="1.0.0" full_name="Component log backend ring buffer" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/log" project_base_path="component/log">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.log.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_component_log_backend_ringbuffer.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_log_backend_ringbuffer.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpi2c_adapter.MIMX8QM6" name="lpi2c_adapter" brief="Component lpi2c_adapter" version="1.0.0" full_name="Component lpi2c_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/i2c" project_base_path="component/i2c">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.lpi2c.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpi2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="component_lpi2c_adapter_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="component_lpi2c_adapter_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpit_adapter.MIMX8QM6" name="lpit_adapter" brief="Component lpit_adapter" version="1.0.0" full_name="Component lpit_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.lpit.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpit.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.lpuart_adapter.MIMX8QM6" name="lpuart_adapter" brief="Component lpuart_adapter" version="1.0.0" full_name="lpuart_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/components/uart" project_base_path="component/uart">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="component_lpuart_adapter_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="component_lpuart_adapter_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager.MIMX8QM6" name="mem_manager" brief="Component mem_manager" version="1.0.0" full_name="Component mem_manager" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.lists.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.mem_manager_light.MIMX8QM6" name="mem_manager_light" brief="Component mem_manager_light" version="1.0.0" full_name="Component mem_manager_light" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/mem_manager" project_base_path="component/mem_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.lists.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_mem_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_mem_manager_light.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa.MIMX8QM6" name="osa" brief="Component osa" version="1.0.0" full_name="Component osa" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.lists.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source condition="middleware.baremetal.MIMX8QM6" relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MIMX8QM6" relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.osa_bm.MIMX8QM6" name="osa_bm" brief="Component osa_bm" version="1.0.0" full_name="Component osa_bm" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="false" type="software_component" package_base_path="core/components/osa" project_base_path="component/osa">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.lists.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_os_abstraction.h"/>
        <files mask="fsl_os_abstraction_bm.h"/>
        <files mask="fsl_os_abstraction_config.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_os_abstraction_bm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.panic.MIMX8QM6" name="panic" brief="Component panic" version="1.0.0" full_name="Component panic" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/panic" project_base_path="component/panic">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="utility.debug_console.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_panic.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_panic.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_ftm_adapter.MIMX8QM6" name="pwm_ftm_adapter" brief="Component pwm_ftm_adapter" version="1.0.0" full_name="Component pwm_ftm_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.ftm.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_ftm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.pwm_tpm_adapter.MIMX8QM6" name="pwm_tpm_adapter" brief="Component pwm_tpm_adapter" version="1.0.0" full_name="Component pwm_tpm_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/pwm" project_base_path="component/pwm">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.tpm.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_pwm.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_pwm_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager.MIMX8QM6" name="serial_manager" brief="Component serial_manager" version="1.0.0" full_name="Serial Manager" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.lists.MIMX8QM6"/>
          <any_of>
            <component_dependency value="component.serial_manager_uart.MIMX8QM6"/>
            <component_dependency value="component.serial_manager_swo.MIMX8QM6"/>
            <component_dependency value="component.serial_manager_virtual.MIMX8QM6"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_manager.h"/>
        <files mask="fsl_component_serial_port_internal.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_manager.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="component_serial_manager_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="component_serial_manager_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_swo.MIMX8QM6" name="serial_manager_swo" brief="Component serial_manager_swo" version="1.0.0" full_name="Serial Manager Swo" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_SWO" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.serial_manager.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_swo.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_swo.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_uart.MIMX8QM6" name="serial_manager_uart" brief="Component serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_UART" value="1"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MIMX8QM6"/>
          <component_dependency value="component.serial_manager.MIMX8QM6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_uart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_uart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="component_serial_manager_uart_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="component_serial_manager_uart_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.serial_manager_virtual.MIMX8QM6" name="serial_manager_virtual" brief="Component serial_manager_virtual" version="1.0.0" full_name="Serial Manager Virtual" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/components/serial_manager" project_base_path="component/serial_manager">
      <defines>
        <define name="SERIAL_PORT_TYPE_VIRTUAL" value="1"/>
        <define name="DEBUG_CONSOLE_TRANSFER_NON_BLOCKING" value=""/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MIMX8QM6"/>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_serial_port_virtual.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_serial_port_virtual.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.sgtl_adapter.MIMX8QM6" name="codec_sgtl_adapter" brief="Component sgtl5000 adapter for single codec" version="2.2.0" full_name="Component sgtl_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/sgtl5000" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.sgtl5000.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_crc_adapter.MIMX8QM6" name="software_crc_adapter" brief="Component software_crc_adapter" version="1.0.0" full_name="Component software_crc_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/crc" project_base_path="component/crc">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_crc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_crc.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.software_rng_adapter.MIMX8QM6" name="software_rng_adapter" brief="Component software_rng_adapter" version="1.0.0" full_name="Component software_rng_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/rng" project_base_path="component/rng">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_rng.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_software_rng.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.timer_manager.MIMX8QM6" name="timer_manager" brief="Component timer_manager" version="1.0.0" full_name="Component timer_manager" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/timer_manager" project_base_path="component/timer_manager">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.lists.MIMX8QM6"/>
          <any_of>
            <component_dependency value="component.tpm_adapter.MIMX8QM6"/>
            <component_dependency value="component.lpit_adapter.MIMX8QM6"/>
            <component_dependency value="component.gpt_adapter.MIMX8QM6"/>
            <component_dependency value="component.ftm_adapter.MIMX8QM6"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_component_timer_manager.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_component_timer_manager.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.tpm_adapter.MIMX8QM6" name="tpm_adapter" brief="Component tpm_adapter" version="1.0.0" full_name="Component tpm_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/timer" project_base_path="component/timer">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.tpm.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adapter_timer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adapter_tpm.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wm8904_adapter.MIMX8QM6" name="codec_wm8904_adapter" brief="Component wm8904 adapter for single codec" version="2.2.0" full_name="Component wm8904_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/wm8904" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8904.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="component.wm8960_adapter.MIMX8QM6" name="codec_wm8960_adapter" brief="Component wm8960 adapter for single codecs" version="2.2.0" full_name="Component wm8960_adapter" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec/port/wm8960" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="driver.wm8960.MIMX8QM6"/>
          <component_dependency value="driver.codec.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_adapter.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_adapter.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="component_wm8960_adapter_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="component_wm8960_adapter_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.devices.MIMX8QM6_CMSIS.MIMX8QM6" name="MIMX8QM6_CMSIS" brief="Device MIMX8QM6_cmsis" version="1.0.0" full_name="Device MIMX8QM6_cmsis" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="CMSIS_Include" package_base_path="core/devices/MIMX8QM6" project_base_path="device">
      <dependencies>
        <component_dependency value="platform.Include_core_cm4.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_device_registers.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="MIMX8QM6_cm4_core0.h"/>
        <files mask="MIMX8QM6_cm4_core0_features.h"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="MIMX8QM6_cm4_core1.h"/>
        <files mask="MIMX8QM6_cm4_core1_features.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="device_MIMX8QM6_CMSIS_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="device_MIMX8QM6_CMSIS_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="./" type="c_include" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF"/>
      </include_paths>
    </component>
    <component id="platform.devices.MIMX8QM6_debugger.MIMX8QM6" name="MIMX8QM6_debugger" brief="Device MIMX8QM6_debugger" version="1.0.0" full_name="Device MIMX8QM6_debugger" devices="MIMX8QM6xxxFF" user_visible="true" type="debugger" package_base_path="core/devices/MIMX8QM6" project_base_path="MIMX8QM6">
      <source relative_path="./" type="xml" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="MIMX8QM6_cm4_core0.xml"/>
      </source>
      <source relative_path="./" type="xml" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="MIMX8QM6_cm4_core1.xml"/>
      </source>
    </component>
    <component id="platform.devices.MIMX8QM6_linker.MIMX8QM6" name="MIMX8QM6_linker" brief="Device MIMX8QM6_linker" version="1.0.0" full_name="Device MIMX8QM6_linker" devices="MIMX8QM6xxxFF" user_visible="true" type="linker" package_base_path="core/devices/MIMX8QM6" project_base_path="MIMX8QM6">
      <source toolchain="armgcc" relative_path="gcc" type="linker" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="MIMX8QM6xxxFF_cm4_core0_ram.ld"/>
        <files mask="MIMX8QM6xxxFF_cm4_core0_ddr_ram.ld"/>
        <files mask="MIMX8QM6xxxFF_cm4_core0_flash.ld"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" type="linker" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="MIMX8QM6xxxFF_cm4_core1_ram.ld"/>
        <files mask="MIMX8QM6xxxFF_cm4_core1_ddr_ram.ld"/>
        <files mask="MIMX8QM6xxxFF_cm4_core1_flash.ld"/>
      </source>
    </component>
    <component id="platform.devices.MIMX8QM6_startup.MIMX8QM6" name="MIMX8QM6_startup" brief="Device MIMX8QM6_startup" version="1.1.0" full_name="Device MIMX8QM6_startup" devices="MIMX8QM6xxxFF" category="Device/Startup" user_visible="true" type="startup" package_base_path="core/devices/MIMX8QM6" project_base_path="MIMX8QM6">
      <source relative_path="./" type="src" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="system_MIMX8QM6_cm4_core0.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="system_MIMX8QM6_cm4_core0.h"/>
      </source>
      <source relative_path="./" type="src" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="system_MIMX8QM6_cm4_core1.c"/>
      </source>
      <source relative_path="./" type="c_include" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="system_MIMX8QM6_cm4_core1.h"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" type="asm_include" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="startup_MIMX8QM6_cm4_core0.S"/>
      </source>
      <source toolchain="armgcc" relative_path="gcc" type="asm_include" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="startup_MIMX8QM6_cm4_core1.S"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="device_MIMX8QM6_startup_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="device_MIMX8QM6_startup_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF"/>
      </include_paths>
    </component>
    <component id="docs.MIMX8QM6.MIMX8QM6" name="MIMX8QM6" brief="Docs mimx8qm6" version="1.0.0" full_name="Docs mimx8qm6" devices="MIMX8QM6xxxFF" user_visible="true" type="documentation" package_base_path="core/docs" project_base_path="docs">
      <source relative_path="./" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for MEK-MIMX8QM.pdf"/>
        <files mask="MCUXpresso SDK Release Notes for MEK-MIMX8QM.pdf"/>
      </source>
    </component>
    <component id="platform.drivers.asmc.MIMX8QM6" name="asmc" brief="ASMC Driver" version="2.0.1" full_name="ASMC Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/asmc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_asmc.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_asmc.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_asmc_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_asmc_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.cache_lmem.MIMX8QM6" name="cache_lmem" brief="CACHE LMEM Driver" version="2.0.5" full_name="CACHE LMEM Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/cache/lmem" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_cache.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cache.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_cache_lmem_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_cache_lmem_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.camera-common.MIMX8QM6" name="camera-common" brief="Driver camera-common" version="1.0.0" full_name="Driver camera-common" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/camera" project_base_path="video">
      <dependencies>
        <component_dependency value="driver.video-common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_camera.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_camera-common_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.camera-device-common.MIMX8QM6" name="camera-device-common" brief="Driver camera-device-common" version="1.0.0" full_name="Driver camera-device-common" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/camera/device" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.camera-common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_camera_device.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_camera-device-common_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.camera-device-max9286.MIMX8QM6" name="camera-device-max9286" brief="Driver camera-device-max9286" version="1.0.2" full_name="Driver camera-device-max9286" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="board_component" package_base_path="core/components/video/camera/device/max9286" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMX8QM6"/>
          <component_dependency value="driver.camera-common.MIMX8QM6"/>
          <component_dependency value="driver.camera-device-common.MIMX8QM6"/>
          <component_dependency value="driver.video-i2c.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_max9286.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_max9286.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_camera-device-max9286_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.camera-device-ov5640.MIMX8QM6" name="camera-device-ov5640" brief="Driver camera-device-ov5640" version="1.0.1" full_name="Driver camera-device-ov5640" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="board_component" package_base_path="core/components/video/camera/device/ov5640" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMX8QM6"/>
          <component_dependency value="driver.camera-common.MIMX8QM6"/>
          <component_dependency value="driver.camera-device-common.MIMX8QM6"/>
          <component_dependency value="driver.camera-device-sccb.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ov5640.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ov5640.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_camera-device-ov5640_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.camera-device-sccb.MIMX8QM6" name="camera-device-sccb" brief="Driver camera-device-sccb" version="1.0.1" full_name="Driver camera-device-sccb" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/video/camera/device/sccb" project_base_path="video">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sccb.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sccb.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_camera-device-sccb_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.camera-receiver-common.MIMX8QM6" name="camera-receiver-common" brief="Driver camera-receiver-common" version="1.0.0" full_name="Driver camera-receiver-common" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/camera/receiver" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMX8QM6"/>
          <component_dependency value="driver.camera-common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_camera_receiver.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_camera-receiver-common_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.camera-receiver-isi.MIMX8QM6" name="camera-receiver-isi" brief="Driver camera-receiver-isi" version="1.0.1" full_name="Driver camera-receiver-isi" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/camera/receiver/isi" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.isi.MIMX8QM6"/>
          <component_dependency value="driver.camera-receiver-common.MIMX8QM6"/>
          <component_dependency value="driver.camera-common.MIMX8QM6"/>
          <component_dependency value="driver.video-common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_isi_camera_adapter.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_isi_camera_adapter.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_camera-receiver-isi_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.clock.MIMX8QM6" name="clock" brief="Clock Driver" version="2.4.0" full_name="Clock Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/devices/MIMX8QM6/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_clock.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_clock_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_clock_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.codec.MIMX8QM6" name="codec" brief="Driver codec" version="2.2.1" full_name="Driver codec" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/codec" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <any_of>
            <component_dependency value="component.wm8904_adapter.MIMX8QM6"/>
            <component_dependency value="component.codec_cs42888_adapter.MIMX8QM6"/>
            <component_dependency value="component.codec_da7212_adapter.MIMX8QM6"/>
            <component_dependency value="component.codec_sgtl_adapter.MIMX8QM6"/>
            <component_dependency value="component.codec_wm8960_adapter.MIMX8QM6"/>
            <component_dependency value="component.codec_wm8904_adapter.MIMX8QM6"/>
            <component_dependency value="component.cs42888_adapter.MIMX8QM6"/>
            <component_dependency value="component.da7212_adapter.MIMX8QM6"/>
            <component_dependency value="component.sgtl_adapter.MIMX8QM6"/>
            <component_dependency value="component.wm8960_adapter.MIMX8QM6"/>
          </any_of>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_codec_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_codec_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.common.MIMX8QM6" name="common" brief="COMMON Driver" version="2.2.9" full_name="COMMON Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/common" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.clock.MIMX8QM6"/>
          <component_dependency value="platform.devices.MIMX8QM6_CMSIS.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_common_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_common_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.cs42888.MIMX8QM6" name="cs42888" brief="Driver cs42888" version="2.1.2" full_name="Driver cs42888" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/codec/cs42888" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.codec_i2c.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_cs42888.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_cs42888.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_cs42888_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_cs42888_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.dialog7212.MIMX8QM6" name="dialog7212" brief="Driver dialog7212" version="2.2.2" full_name="Driver dialog7212" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/codec/da7212" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.codec_i2c.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dialog7212.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_dialog7212.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-adv7535.MIMX8QM6" name="display-adv7535" brief="Driver display-adv7535" version="1.0.1" full_name="Driver display-adv7535" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="board_component" package_base_path="core/components/video/display/adv7535" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="driver.video-i2c.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_adv7535.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_adv7535.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_display-adv7535_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-common.MIMX8QM6" name="display-common" brief="Driver display-common" version="1.0.0" full_name="Driver display-common" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/display" project_base_path="video">
      <dependencies>
        <component_dependency value="driver.video-common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_display.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_display-common_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-it6263.MIMX8QM6" name="display-it6263" brief="Driver display-it6263" version="1.0.1" full_name="Driver display-it6263" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="board_component" package_base_path="core/components/video/display/it6263" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.video-common.MIMX8QM6"/>
          <component_dependency value="driver.video-i2c.MIMX8QM6"/>
          <component_dependency value="driver.display-common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_it6263.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_it6263.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_display-it6263_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-mipi-dsi-cmd.MIMX8QM6" name="display-mipi-dsi-cmd" brief="Driver display-mipi-dsi-cmd" version="1.0.2" full_name="Driver display-mipi-dsi-cmd" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/video/display/mipi_dsi_cmd" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.mipi_dsi.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mipi_dsi_cmd.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mipi_dsi_cmd.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_display-mipi-dsi-cmd_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.display-rm67191.MIMX8QM6" name="display-rm67191" brief="Driver display-rm67191" version="1.1.0" full_name="Driver display-rm67191" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="board_component" package_base_path="core/components/video/display/rm67191" project_base_path="video">
      <dependencies>
        <all>
          <component_dependency value="driver.display-common.MIMX8QM6"/>
          <component_dependency value="driver.display-mipi-dsi-cmd.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rm67191.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rm67191.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_display-rm67191_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dma3.MIMX8QM6" name="dma" brief="EDMA Driver" version="2.2.2" full_name="EDMA Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/dma3" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.memory.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_dma3_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_dma3_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dpr.MIMX8QM6" name="dpr" brief="DPR Driver" version="2.0.1" full_name="DPR Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/dpr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dpr.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dpr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_dpr_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dpu.MIMX8QM6" name="dpu" brief="DPU Driver" version="2.1.1" full_name="DPU Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/dpu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_dpu.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dpu.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_dpu_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.dpu_irqsteer.MIMX8QM6" name="dpu_irqsteer" brief="DPU IRQSTEER Driver" version="2.0.0" full_name="DPU IRQSTEER Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/dpu_irqsteer" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_dpu_irqsteer.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_dpu_irqsteer_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.enet.MIMX8QM6" name="enet" brief="ENET Driver" version="2.3.4" full_name="ENET Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/enet" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.memory.MIMX8QM6"/>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_enet.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_enet.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_enet_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_enet_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.esai.MIMX8QM6" name="esai" brief="ESAI Driver" version="2.1.1" full_name="ESAI Driver" devices="MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/esai" project_base_path="drivers">
      <source relative_path="./" type="c_include">
        <files mask="fsl_esai.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_esai.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_esai_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_esai_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.esai_edma.MIMX8QM6" name="esai_edma" brief="ESAI Driver" version="2.1.1" full_name="ESAI EDMA Driver" devices="MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/esai" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.esai.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_esai_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_esai_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_esai_edma_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_esai_edma_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcan.MIMX8QM6" name="flexcan" brief="FLEXCAN Driver" version="2.6.0" full_name="FLEXCAN Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/flexcan" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexcan.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexcan.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_flexcan_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_flexcan_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexcan_edma.MIMX8QM6" name="flexcan_edma" brief="FLEXCAN Driver" version="2.6.0" full_name="FLEXCAN EDMA Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/flexcan" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QM6"/>
          <component_dependency value="platform.drivers.flexcan.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexcan_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_flexcan_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_flexcan_edma_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_flexcan_edma_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.flexspi.MIMX8QM6" name="flexspi" brief="FLEXSPI Driver" version="2.3.2" full_name="FLEXSPI Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/flexspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_flexspi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_flexspi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_flexspi_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_flexspi_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ftm.MIMX8QM6" name="ftm" brief="FTM Driver" version="2.3.0" full_name="FTM Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/ftm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_ftm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ftm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_ftm_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_ftm_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.gpt.MIMX8QM6" name="gpt" brief="GPT Driver" version="2.0.2" full_name="GPT Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/gpt" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_gpt.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpt.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_gpt_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_gpt_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.igpio.MIMX8QM6" name="gpio" brief="GPIO Driver" version="2.0.5" full_name="igpio" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/igpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_igpio_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_igpio_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.intmux.MIMX8QM6" name="intmux" brief="INTMUX Driver" version="2.0.4" full_name="INTMUX Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/intmux" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_intmux.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_intmux.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_intmux_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_intmux_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.irqsteer.MIMX8QM6" name="irqsteer" brief="IRQSTEER Driver" version="2.0.2" full_name="IRQSTEER Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/irqsteer" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_irqsteer.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_irqsteer.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_irqsteer_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_irqsteer_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.isi.MIMX8QM6" name="isi" brief="ISI Driver" version="2.0.2" full_name="ISI Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/isi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_isi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_isi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_isi_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.ldb.MIMX8QM6" name="ldb" brief="LDB Driver" version="2.0.2" full_name="LDB Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/ldb" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_ldb.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_ldb.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_ldb_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpadc.MIMX8QM6" name="lpadc" brief="LPADC Driver" version="2.3.0" full_name="LPADC Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/lpadc" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpadc.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpadc.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_lpadc_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_lpadc_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c.MIMX8QM6" name="i2c" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_lpi2c_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_lpi2c_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpi2c_edma.MIMX8QM6" name="i2c_edma" brief="LPI2C Driver" version="2.2.0" full_name="LPI2C Edma Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/lpi2c" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QM6"/>
          <component_dependency value="platform.drivers.lpi2c.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpi2c_edma.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpi2c_edma.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_lpi2c_edma_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_lpi2c_edma_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpit.MIMX8QM6" name="lpit" brief="LPIT Driver" version="2.0.2" full_name="LPIT Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/lpit" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpit.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpit.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_lpit_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_lpit_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi.MIMX8QM6" name="lpspi" brief="LPSPI Driver" version="2.1.0" full_name="LPSPI Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_lpspi_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_lpspi_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpspi_edma.MIMX8QM6" name="lpspi_edma" brief="LPSPI Driver" version="2.0.5" full_name="LPSPI Edma Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/lpspi" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QM6"/>
          <component_dependency value="platform.drivers.lpspi.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpspi_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpspi_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_lpspi_edma_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_lpspi_edma_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart.MIMX8QM6" name="lpuart" brief="LPUART Driver" version="2.4.1" full_name="LPUART Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_lpuart_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_lpuart_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.lpuart_edma.MIMX8QM6" name="lpuart_edma" brief="LPUART Driver" version="2.4.0" full_name="LPUART Edma Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/lpuart" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QM6"/>
          <component_dependency value="platform.drivers.lpuart.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_lpuart_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_lpuart_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_lpuart_edma_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_lpuart_edma_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.mdio-common.MIMX8QM6" name="mdio-common" brief="Driver mdio-common" version="2.0.0" full_name="Driver mdio-common" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="board_component" package_base_path="core/components/phy" project_base_path="mdio">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mdio.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_mdio-common_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_mdio-common_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.mdio-enet.MIMX8QM6" name="mdio-enet" brief="Driver mdio-enet" version="2.0.0" full_name="Driver mdio-enet" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="board_component" package_base_path="core/components/phy/mdio/enet" project_base_path="mdio">
      <dependencies>
        <all>
          <component_dependency value="driver.mdio-common.MIMX8QM6"/>
          <component_dependency value="platform.drivers.enet.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_enet_mdio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_enet_mdio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_mdio-enet_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_mdio-enet_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.memory.MIMX8QM6" name="memory" brief="MEMORY Driver" version="2.0.0" full_name="Memory Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/devices/MIMX8QM6/drivers" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_memory.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_memory_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_memory_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mipi_csi2rx.MIMX8QM6" name="mipi_csi2rx" brief="MIPI CSI2RX Driver" version="2.0.4" full_name="MIPI CSI2RX Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/mipi_csi2rx" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_mipi_csi2rx.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mipi_csi2rx.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_mipi_csi2rx_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mipi_dsi.MIMX8QM6" name="mipi_dsi" brief="MIPI DSI Driver" version="2.0.5" full_name="MIPI DSI Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/mipi_dsi" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_mipi_dsi.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mipi_dsi.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_mipi_dsi_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.mu.MIMX8QM6" name="mu" brief="MU Driver" version="2.0.6" full_name="MU Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/mu" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_mu.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mu.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_mu_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_mu_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.phy-common.MIMX8QM6" name="phy-common" brief="Driver phy-common" version="2.0.0" full_name="Driver phy-common" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/phy" project_base_path="phy">
      <dependencies>
        <component_dependency value="driver.mdio-common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phy.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_phy-common_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_phy-common_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.phy-device-ar8031.MIMX8QM6" name="phy-device-ar8031" brief="Driver phy-device-ar8031" version="2.0.0" full_name="Driver phy-device-ar8031" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="board_component" package_base_path="core/components/phy/device/phyar8031" project_base_path="phy">
      <dependencies>
        <component_dependency value="driver.phy-common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_phyar8031.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_phyar8031.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_phy-device-ar8031_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_phy-device-ar8031_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.prg.MIMX8QM6" name="prg" brief="PRG Driver" version="2.0.1" full_name="PRG Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/prg" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_prg.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_prg.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_prg_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.rgpio.MIMX8QM6" name="gpio" brief="RGPIO Driver" version="2.0.3" full_name="RGPIO Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/rgpio" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_rgpio.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_rgpio.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_rgpio_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_rgpio_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai.MIMX8QM6" name="sai" brief="SAI Driver" version="2.3.2" full_name="SAI Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/sai" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_sai_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_sai_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sai_edma.MIMX8QM6" name="sai_edma" brief="SAI EDMA Driver" version="2.3.1" full_name="SAI EDMA Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/sai" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.dma3.MIMX8QM6"/>
          <component_dependency value="platform.drivers.sai.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sai_edma.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sai_edma.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_sai_edma_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_sai_edma_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sc_event.MIMX8QM6" name="sc_event" brief="SC Event Driver" version="2.0.1" full_name="RTC Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/devices/MIMX8QM6/drivers" project_base_path="drivers">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.mu.MIMX8QM6"/>
          <component_dependency value="platform.drivers.scfwapi.MIMX8QM6"/>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sc_event.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sc_event.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_sc_event_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_sc_event_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.scfwapi.MIMX8QM6" name="scfw_api" brief="SCFW API Driver" version="1.20.0" full_name="SCFW API Driver" devices="MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/devices/MIMX8QM6/scfw_api" project_base_path="scfw_api">
      <source relative_path="main" type="c_include">
        <files mask="imx8qm_pads.h"/>
        <files mask="ipc.h"/>
        <files mask="rpc.h"/>
        <files mask="scfw.h"/>
        <files mask="types.h"/>
      </source>
      <source relative_path="main" type="src">
        <files mask="ipc_imx8qm.c"/>
      </source>
      <source relative_path="svc/irq" type="c_include">
        <files mask="irq_api.h"/>
        <files mask="irq_rpc.h"/>
      </source>
      <source relative_path="svc/irq" type="src">
        <files mask="irq_rpc_clnt.c"/>
      </source>
      <source relative_path="svc/misc" type="c_include">
        <files mask="misc_api.h"/>
        <files mask="misc_rpc.h"/>
      </source>
      <source relative_path="svc/misc" type="src">
        <files mask="misc_rpc_clnt.c"/>
      </source>
      <source relative_path="svc/pad" type="c_include">
        <files mask="pad_api.h"/>
        <files mask="pad_rpc.h"/>
      </source>
      <source relative_path="svc/pad" type="src">
        <files mask="pad_rpc_clnt.c"/>
      </source>
      <source relative_path="svc/pm" type="c_include">
        <files mask="pm_api.h"/>
        <files mask="pm_rpc.h"/>
      </source>
      <source relative_path="svc/pm" type="src">
        <files mask="pm_rpc_clnt.c"/>
      </source>
      <source relative_path="svc/rm" type="c_include">
        <files mask="rm_api.h"/>
        <files mask="rm_rpc.h"/>
      </source>
      <source relative_path="svc/rm" type="src">
        <files mask="rm_rpc_clnt.c"/>
      </source>
      <source relative_path="svc/seco" type="c_include">
        <files mask="seco_api.h"/>
        <files mask="seco_rpc.h"/>
      </source>
      <source relative_path="svc/seco" type="src">
        <files mask="seco_rpc_clnt.c"/>
      </source>
      <source relative_path="svc/timer" type="c_include">
        <files mask="timer_api.h"/>
        <files mask="timer_rpc.h"/>
      </source>
      <source relative_path="svc/timer" type="src">
        <files mask="timer_rpc_clnt.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_scfw_api_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_scfw_api_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="main" type="c_include"/>
        <include_path relative_path="svc/irq" type="c_include"/>
        <include_path relative_path="svc/misc" type="c_include"/>
        <include_path relative_path="svc/pad" type="c_include"/>
        <include_path relative_path="svc/pm" type="c_include"/>
        <include_path relative_path="svc/rm" type="c_include"/>
        <include_path relative_path="svc/seco" type="c_include"/>
        <include_path relative_path="svc/timer" type="c_include"/>
        <include_path relative_path="./" type="c_include"/>
        <include_path relative_path="svc" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.sema42.MIMX8QM6" name="sema42" brief="SEMA42 Driver" version="2.0.2" full_name="SEMA42 Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/sema42" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sema42.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sema42.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_sema42_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_sema42_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.sgtl5000.MIMX8QM6" name="sgtl5000" brief="Driver sgtl5000" version="2.1.1" full_name="Driver sgtl5000" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/codec/sgtl5000" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.codec_i2c.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_sgtl5000.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_sgtl5000.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.srtm.MIMX8QM6" name="srtm" brief="Driver srtm" version="1.0.0" full_name="Driver srtm" devices="MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/srtm" project_base_path="srtm">
      <source relative_path="include" type="c_include">
        <files mask="srtm_channel.h"/>
        <files mask="srtm_defs.h"/>
        <files mask="srtm_dispatcher.h"/>
        <files mask="srtm_message.h"/>
        <files mask="srtm_peercore.h"/>
        <files mask="srtm_service.h"/>
      </source>
      <source relative_path="srtm" type="src">
        <files mask="srtm_channel.c"/>
        <files mask="srtm_dispatcher.c"/>
        <files mask="srtm_message.c"/>
        <files mask="srtm_peercore.c"/>
        <files mask="srtm_service.c"/>
      </source>
      <source relative_path="srtm" type="c_include">
        <files mask="srtm_channel_struct.h"/>
        <files mask="srtm_dispatcher_struct.h"/>
        <files mask="srtm_message_struct.h"/>
        <files mask="srtm_peercore_struct.h"/>
        <files mask="srtm_service_struct.h"/>
        <files mask="srtm_heap.h"/>
        <files mask="srtm_message_pool.h"/>
        <files mask="srtm_list.h"/>
        <files mask="srtm_mutex.h"/>
        <files mask="srtm_sem.h"/>
      </source>
      <source relative_path="port" type="src">
        <files mask="srtm_message_pool.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_srtm_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="include" type="c_include"/>
        <include_path relative_path="srtm" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.srtm.freertos.MIMX8QM6" name="freertos" brief="Driver srtm freertos" version="1.0.0" full_name="Driver srtm freertos" devices="MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/srtm/port" project_base_path="srtm/port">
      <dependencies>
        <component_dependency value="driver.srtm.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="srtm_heap_freertos.c"/>
        <files mask="srtm_mutex_freertos.c"/>
        <files mask="srtm_sem_freertos.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_srtm_freertos_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.drivers.tpm.MIMX8QM6" name="tpm" brief="TPM Driver" version="2.0.7" full_name="TPM Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/tpm" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_tpm.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tpm.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_tpm_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_tpm_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.tstmr.MIMX8QM6" name="tstmr" brief="TSTMR Driver" version="2.0.0" full_name="TSTMR Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/tstmr" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_tstmr.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_tstmr_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_tstmr_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.video-common.MIMX8QM6" name="video-common" brief="Driver video-common" version="1.0.2" full_name="Driver video-common" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/video" project_base_path="video">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_video_common.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_video_common.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_video-common_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.video-i2c.MIMX8QM6" name="video-i2c" brief="Driver video-i2c" version="1.0.1" full_name="Driver video-i2c" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="abstraction_layer" package_base_path="core/components/video/i2c" project_base_path="video">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_video_i2c.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_video_i2c.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_video-i2c_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.drivers.wdog32.MIMX8QM6" name="wdog" brief="WDOG32 Driver" version="2.0.4" full_name="WDOG32 Driver" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="driver" package_base_path="core/drivers/wdog32" project_base_path="drivers">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wdog32.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wdog32.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_wdog32_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_wdog32_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8904.MIMX8QM6" name="wm8904" brief="Driver wm8904" version="2.4.3" full_name="Driver wm8904" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/codec/wm8904" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.codec_i2c.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8904.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8904.c"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="driver.wm8960.MIMX8QM6" name="wm8960" brief="Driver wm8960" version="2.1.3" full_name="Driver wm8960" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="software_component" package_base_path="core/components/codec/wm8960" project_base_path="codec">
      <dependencies>
        <all>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
          <component_dependency value="component.codec_i2c.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="fsl_wm8960.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_wm8960.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="driver_wm8960_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="driver_wm8960_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.baremetal.MIMX8QM6" name="baremetal" brief="Middleware baremetal" version="1.0.0" full_name="Baremetal" devices="MIMX8QM6xxxFF" user_visible="true" type="OS" package_base_path="core/middleware" project_base_path="middleware">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="middleware.mmcau.cm4_cm7.MIMX8QM6" name="mmcau_cm4_cm7" brief="MMCAU library for ARM Cortex M4/M7 core" version="2.0.1" full_name="Kinetis MMCAU security function library for Arm Cortex-M4 and Cortex-M7" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" category="Security/MMCAU library" user_visible="true" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <dependencies>
        <all>
          <component_dependency value="middleware.mmcau.common_files.MIMX8QM6"/>
          <component_dependency value="platform.drivers.clock.MIMX8QM6"/>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source toolchain="armgcc mcuxpresso" relative_path="asm-cm4-cm7" type="lib">
        <files mask="lib_mmcau.a"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="middleware_mmcau_cm4_cm7_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="middleware_mmcau_cm4_cm7_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mmcau.common_files.MIMX8QM6" name="mmcau" brief="MMCAU common library source files" version="2.0.1" full_name="Kinetis MMCAU common source files" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" category="Security/MMCAU library" user_visible="true" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="c_include">
        <files mask="cau_api.h"/>
        <files mask="fsl_mmcau.h"/>
      </source>
      <source relative_path="./" type="src">
        <files mask="fsl_mmcau.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="middleware_mmcau_common_files_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="middleware_mmcau_common_files_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="middleware.mmcau.mmcau_files.MIMX8QM6" name="mmcau" brief="MMCAU security function library source files" version="2.0.1" full_name="Kinetis MMCAU security function library source files" devices="MIMX8QM6xxxFF" category="Security/MMCAU library" user_visible="false" type="middleware" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <source relative_path="./" type="doc">
        <files mask="README.txt"/>
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source relative_path="asm-cm4-cm7/src" type="other" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF">
        <files mask="cau2_defines.hdr"/>
      </source>
      <source relative_path="asm-cm4-cm7/src" type="asm_include" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF">
        <files mask="mmcau_sha1_functions.s"/>
        <files mask="mmcau_md5_functions.s"/>
        <files mask="mmcau_sha256_functions.s"/>
        <files mask="mmcau_aes_functions.s"/>
        <files mask="mmcau_des_functions.s"/>
      </source>
    </component>
    <component id="middleware.mmcau.unused_files.MIMX8QM6" name="unused_files" brief="MMCAU files unused by projects" version="2.0.1" full_name="MMCAU library unused files" devices="MIMX8QM6xxxFF" user_visible="false" type="other" package_base_path="core/middleware/mmcau" project_base_path="mmcau">
      <source exclude="true" relative_path="doxygen" type="other">
        <files mask="fsl_mmcau.dox" hidden="true"/>
      </source>
    </component>
    <component id="middleware.multicore.remoteproc.loadscript.MIMX8QM6" name="remoteproc_load_script" brief="remoteproc-load script" version="1.0.0" full_name="remoteproc-load script" devices="MIMX8QM6xxxFF" user_visible="true" type="other" package_base_path="core/middleware/multicore" project_base_path="multicore">
      <source relative_path="tools/remoteproc-load" type="script">
        <files mask="load.sh"/>
      </source>
      <source relative_path="tools/remoteproc-load" type="other">
        <files mask="Readme.md"/>
        <files mask="remote.cfg"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MIMX8QM6" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" full_name="Utilities miscellaneous" devices="MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/utilities/misc_utilities" project_base_path="utilities">
      <source toolchain="armgcc" relative_path="./" type="src">
        <files mask="fsl_sbrk.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="utilities_misc_utilities_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="utilities_misc_utilities_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MIMX8QM6" name="assert" brief="Utility assert" version="1.0.0" full_name="Utility assert" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="utility_assert_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="utility_assert_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
    </component>
    <component id="platform.utilities.assert_lite.MIMX8QM6" name="assert_lite" brief="Utility assert_lite" version="1.0.0" full_name="Utility assert_lite" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/utilities/assert" project_base_path="utilities">
      <dependencies>
        <component_dependency value="utility.debug_console_lite.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_assert.c"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="utility_assert_lite_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="utility_assert_lite_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
    </component>
    <component id="utility.debug_console.MIMX8QM6" name="debug_console" brief="Utility debug_console" version="1.0.0" full_name="Utility debug_console" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.serial_manager.MIMX8QM6"/>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="str" project_relative_path="./" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source relative_path="str" project_relative_path="./" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="debug_console" project_relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="utility_debug_console_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="utility_debug_console_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="str" project_relative_path="./" type="c_include"/>
        <include_path relative_path="debug_console" project_relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.debug_console_lite.MIMX8QM6" name="debug_console_lite" brief="Utility debug_console_lite" version="1.0.0" full_name="Utility debug_console_lite" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/utilities/debug_console_lite" project_base_path="utilities">
      <dependencies>
        <all>
          <component_dependency value="component.lpuart_adapter.MIMX8QM6"/>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core0_MIMX8QM6xxxFF">
        <files mask="utility_debug_console_lite_MIMX8QM6_cm4_core0.cmake" hidden="true"/>
      </source>
      <source toolchain="armgcc" relative_path="." type="workspace" device_cores="cm4_core1_MIMX8QM6xxxFF">
        <files mask="utility_debug_console_lite_MIMX8QM6_cm4_core1.cmake" hidden="true"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="platform.utilities.notifier.MIMX8QM6" name="notifier" brief="Utility notifier" version="1.0.0" full_name="Utility notifier" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/devices/MIMX8QM6/utilities" project_base_path="utilities/utilities">
      <dependencies>
        <component_dependency value="platform.drivers.common.MIMX8QM6"/>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_notifier.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_notifier.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
    <component id="utility.shell.MIMX8QM6" name="shell" brief="Utility shell" version="1.0.0" full_name="Utility shell" devices="MIMX8QM6xxxFF" device_cores="cm4_core0_MIMX8QM6xxxFF cm4_core1_MIMX8QM6xxxFF" user_visible="true" type="utilities" package_base_path="core/devices/MIMX8QM6/utilities" project_base_path="utilities">
      <defines>
        <define name="DEBUG_CONSOLE_RX_ENABLE" value="0"/>
      </defines>
      <dependencies>
        <all>
          <component_dependency value="utility.debug_console.MIMX8QM6"/>
          <component_dependency value="component.lists.MIMX8QM6"/>
          <component_dependency value="platform.drivers.common.MIMX8QM6"/>
        </all>
      </dependencies>
      <source relative_path="./" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source relative_path="./" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
      <include_paths>
        <include_path relative_path="./" type="c_include"/>
      </include_paths>
    </component>
  </components>
</ksdk:manifest>
